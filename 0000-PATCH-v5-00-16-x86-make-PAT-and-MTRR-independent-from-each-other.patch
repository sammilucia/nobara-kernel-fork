From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id D2308C4332F
	for <linux-kernel@archiver.kernel.org>; Wed,  2 Nov 2022 07:47:22 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230418AbiKBHrU (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 2 Nov 2022 03:47:20 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:58236 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230026AbiKBHrS (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 2 Nov 2022 03:47:18 -0400
Received: from smtp-out2.suse.de (smtp-out2.suse.de [IPv6:2001:67c:2178:6::1d])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 6C89025E8C;
        Wed,  2 Nov 2022 00:47:17 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out2.suse.de (Postfix) with ESMTPS id AB4A31F8B0;
        Wed,  2 Nov 2022 07:47:15 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1667375235; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:  content-transfer-encoding:content-transfer-encoding;
        bh=QXxgpBh7/7Ngps7X8Ud2Cswcq3gje0X5VBuwnN65KQc=;
        b=n8TLRKVn9h8Rnp5Qz1eBqnKdpz+LlW+wk2cr0jH2R9Mf0D6vec0wj4098jH0FEygWoopCM
        Q5RZbiPcLUOekkdwOsPUF5q5FEqI7LAbyV7+H26oaUgT5DwGL0giJK6ol20V5ZG91ZcSQO
        DoOjkLWZ/z8qlJoUOLpd9l1cZ5vykT4=
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id 52AB51376E;
        Wed,  2 Nov 2022 07:47:15 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id Hyq9EoMgYmOBcgAAMHmgww
        (envelope-from <jgross@suse.com>); Wed, 02 Nov 2022 07:47:15 +0000
From:   Juergen Gross <jgross@suse.com>
To:     linux-kernel@vger.kernel.org, x86@kernel.org,
        linux-pm@vger.kernel.org
Cc:     Juergen Gross <jgross@suse.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>,
        "Rafael J. Wysocki" <rafael@kernel.org>,
        Pavel Machek <pavel@ucw.cz>, Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>
Subject: [PATCH v5 00/16] x86: make PAT and MTRR independent from each other
Date:   Wed,  2 Nov 2022 08:46:57 +0100
Message-Id: <20221102074713.21493-1-jgross@suse.com>
X-Mailer: git-send-email 2.35.3
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Today PAT can't be used without MTRR being available, unless MTRR is at
least configured via CONFIG_MTRR and the system is running as Xen PV
guest. In this case PAT is automatically available via the hypervisor,
but the PAT MSR can't be modified by the kernel and MTRR is disabled.

The same applies to a kernel built with no MTRR support: it won't
allow to use the PAT MSR, even if there is no technical reason for
that, other than setting up PAT on all CPUs the same way (which is a
requirement of the processor's cache management) is relying on some
MTRR specific code.

Fix all of that by:

- moving the function needed by PAT from MTRR specific code one level
  up
- reworking the init sequences of MTRR and PAT to be more similar to
  each other without calling PAT from MTRR code
- removing the dependency of PAT on MTRR

There is some more cleanup done reducing code size.

Note that patches 1+2 have already been applied to tip.git x86/cpu.
They are included in this series only for reference.

Changes in V5:
- addressed comments

Changes in V4:
- new patches 10, 14, 15, 16
- split up old patch 4 into 3 patches
- addressed comments

Changes in V3:
- replace patch 1 by just adding a comment

Changes in V2:
- complete rework of the patches based on comments by Boris Petkov
- added several patches to the series

Juergen Gross (16):
  x86/mtrr: add comment for set_mtrr_state() serialization
  x86/mtrr: remove unused cyrix_set_all() function
  x86/mtrr: replace use_intel() with a local flag
  x86/mtrr: rename prepare_set() and post_set()
  x86/mtrr: split MTRR specific handling from cache dis/enabling
  x86: move some code out of arch/x86/kernel/cpu/mtrr
  x86/mtrr: Disentangle MTRR init from PAT init.
  x86/mtrr: remove set_all callback from struct mtrr_ops
  x86/mtrr: simplify mtrr_bp_init()
  x86/mtrr: get rid of __mtrr_enabled bool
  x86/mtrr: let cache_aps_delayed_init replace mtrr_aps_delayed_init
  x86/mtrr: add a stop_machine() handler calling only cache_cpu_init()
  x86: decouple PAT and MTRR handling
  x86: switch cache_ap_init() to hotplug callback
  x86: do MTRR/PAT setup on all secondary CPUs in parallel
  x86/mtrr: simplify mtrr_ops initialization

 arch/x86/include/asm/cacheinfo.h   |  19 ++++
 arch/x86/include/asm/memtype.h     |   5 +-
 arch/x86/include/asm/mtrr.h        |  17 +--
 arch/x86/kernel/cpu/cacheinfo.c    | 173 +++++++++++++++++++++++++++++
 arch/x86/kernel/cpu/common.c       |   2 +-
 arch/x86/kernel/cpu/mtrr/amd.c     |   8 +-
 arch/x86/kernel/cpu/mtrr/centaur.c |   8 +-
 arch/x86/kernel/cpu/mtrr/cyrix.c   |  42 +------
 arch/x86/kernel/cpu/mtrr/generic.c | 127 ++++-----------------
 arch/x86/kernel/cpu/mtrr/mtrr.c    | 171 ++++------------------------
 arch/x86/kernel/cpu/mtrr/mtrr.h    |  15 +--
 arch/x86/kernel/setup.c            |  14 +--
 arch/x86/kernel/smpboot.c          |   9 +-
 arch/x86/mm/pat/memtype.c          | 152 +++++++++----------------
 arch/x86/power/cpu.c               |   3 +-
 include/linux/cpuhotplug.h         |   1 +
 16 files changed, 308 insertions(+), 458 deletions(-)

-- 
2.35.3


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 3B477C433FE
	for <linux-kernel@archiver.kernel.org>; Wed,  2 Nov 2022 07:47:29 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230420AbiKBHr1 (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 2 Nov 2022 03:47:27 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:58338 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230419AbiKBHrX (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 2 Nov 2022 03:47:23 -0400
Received: from smtp-out2.suse.de (smtp-out2.suse.de [IPv6:2001:67c:2178:6::1d])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 9F6D225EAA
        for <linux-kernel@vger.kernel.org>; Wed,  2 Nov 2022 00:47:22 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out2.suse.de (Postfix) with ESMTPS id 55A521F8F6;
        Wed,  2 Nov 2022 07:47:21 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1667375241; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=2leKddvHcFKOPECovCQoX+YzpPkMWoS3wh7BhleyL14=;
        b=qFgHZiO+6+gBo4apQivoOgk7d+PDAndeKnWMGSowg6KGs6QioJHppeR7vHkmYpH6KtMdgF
        cfzprQcBHxXtNLEUIaqOn+EWTQrTuPdKkviAL7c1c2/IGtql0fIxihe8NlKNOAHv5ul4aP
        J/cF3nKW98YaLLZ0NFGUupSp9zkkHtM=
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id 1C4171376E;
        Wed,  2 Nov 2022 07:47:21 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id zhumBYkgYmOLcgAAMHmgww
        (envelope-from <jgross@suse.com>); Wed, 02 Nov 2022 07:47:21 +0000
From:   Juergen Gross <jgross@suse.com>
To:     linux-kernel@vger.kernel.org, x86@kernel.org
Cc:     Juergen Gross <jgross@suse.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>
Subject: [PATCH v5 01/16] x86/mtrr: add comment for set_mtrr_state() serialization
Date:   Wed,  2 Nov 2022 08:46:58 +0100
Message-Id: <20221102074713.21493-2-jgross@suse.com>
X-Mailer: git-send-email 2.35.3
In-Reply-To: <20221102074713.21493-1-jgross@suse.com>
References: <20221102074713.21493-1-jgross@suse.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Add a comment how set_mtrr_state() is needing serialization.

Note that this patch has already been applied to tip.git.

Suggested-by: Borislav Petkov <bp@alien8.de>
Signed-off-by: Juergen Gross <jgross@suse.com>
---
V3:
- new patch instead of old patch 1
---
 arch/x86/kernel/cpu/mtrr/generic.c | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/arch/x86/kernel/cpu/mtrr/generic.c b/arch/x86/kernel/cpu/mtrr/generic.c
index 558108296f3c..cd64eab02393 100644
--- a/arch/x86/kernel/cpu/mtrr/generic.c
+++ b/arch/x86/kernel/cpu/mtrr/generic.c
@@ -684,7 +684,10 @@ static u32 deftype_lo, deftype_hi;
 /**
  * set_mtrr_state - Set the MTRR state for this CPU.
  *
- * NOTE: The CPU must already be in a safe state for MTRR changes.
+ * NOTE: The CPU must already be in a safe state for MTRR changes, including
+ *       measures that only a single CPU can be active in set_mtrr_state() in
+ *       order to not be subject to races for usage of deftype_lo (this is
+ *       accomplished by taking set_atomicity_lock).
  * RETURNS: 0 if no changes made, else a mask indicating what was changed.
  */
 static unsigned long set_mtrr_state(void)
-- 
2.35.3


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id D3D60C433FE
	for <linux-kernel@archiver.kernel.org>; Wed,  2 Nov 2022 07:47:38 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230451AbiKBHrg (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 2 Nov 2022 03:47:36 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:58500 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230424AbiKBHra (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 2 Nov 2022 03:47:30 -0400
Received: from smtp-out2.suse.de (smtp-out2.suse.de [195.135.220.29])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 6301B25EA2
        for <linux-kernel@vger.kernel.org>; Wed,  2 Nov 2022 00:47:28 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out2.suse.de (Postfix) with ESMTPS id 07CF61F8B0;
        Wed,  2 Nov 2022 07:47:27 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1667375247; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=GQEtb2vL+iQO4o3v4gnSZ8HiVeg2+FFF5GuRa10reVo=;
        b=XcAg0758gjmv84xLkZT984Qx7dgoXbDg2VgwRDexHARVFS/H9a7bejr26a2+5BXSudfixa
        TGFD3ycnVDrW8J1yLkpHFUxcBiV1J0fryFHTuP+AMoiMCwWXAJEPM8Ni2kt3zvJIY5AZqG
        PjWf0m9dqJ1FFqOf9Z1FczZkNAX5M7s=
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id BB5C41376E;
        Wed,  2 Nov 2022 07:47:26 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id sI5FLI4gYmOccgAAMHmgww
        (envelope-from <jgross@suse.com>); Wed, 02 Nov 2022 07:47:26 +0000
From:   Juergen Gross <jgross@suse.com>
To:     linux-kernel@vger.kernel.org, x86@kernel.org
Cc:     Juergen Gross <jgross@suse.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>
Subject: [PATCH v5 02/16] x86/mtrr: remove unused cyrix_set_all() function
Date:   Wed,  2 Nov 2022 08:46:59 +0100
Message-Id: <20221102074713.21493-3-jgross@suse.com>
X-Mailer: git-send-email 2.35.3
In-Reply-To: <20221102074713.21493-1-jgross@suse.com>
References: <20221102074713.21493-1-jgross@suse.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The Cyrix CPU specific MTRR function cyrix_set_all() will never be
called, as the struct mtrr_ops set_all() callback will only be called
in the use_intel() case, which would require the use_intel_if member
of struct mtrr_ops to be set, which isn't the case for Cyrix.

Note that this patch has already been applied to tip.git.

Signed-off-by: Juergen Gross <jgross@suse.com>
---
V2:
- new patch
---
 arch/x86/kernel/cpu/mtrr/cyrix.c | 34 --------------------------------
 1 file changed, 34 deletions(-)

diff --git a/arch/x86/kernel/cpu/mtrr/cyrix.c b/arch/x86/kernel/cpu/mtrr/cyrix.c
index ca670919b561..c77d3b0a5bf2 100644
--- a/arch/x86/kernel/cpu/mtrr/cyrix.c
+++ b/arch/x86/kernel/cpu/mtrr/cyrix.c
@@ -234,42 +234,8 @@ static void cyrix_set_arr(unsigned int reg, unsigned long base,
 	post_set();
 }
 
-typedef struct {
-	unsigned long	base;
-	unsigned long	size;
-	mtrr_type	type;
-} arr_state_t;
-
-static arr_state_t arr_state[8] = {
-	{0UL, 0UL, 0UL}, {0UL, 0UL, 0UL}, {0UL, 0UL, 0UL}, {0UL, 0UL, 0UL},
-	{0UL, 0UL, 0UL}, {0UL, 0UL, 0UL}, {0UL, 0UL, 0UL}, {0UL, 0UL, 0UL}
-};
-
-static unsigned char ccr_state[7] = { 0, 0, 0, 0, 0, 0, 0 };
-
-static void cyrix_set_all(void)
-{
-	int i;
-
-	prepare_set();
-
-	/* the CCRs are not contiguous */
-	for (i = 0; i < 4; i++)
-		setCx86(CX86_CCR0 + i, ccr_state[i]);
-	for (; i < 7; i++)
-		setCx86(CX86_CCR4 + i, ccr_state[i]);
-
-	for (i = 0; i < 8; i++) {
-		cyrix_set_arr(i, arr_state[i].base,
-			      arr_state[i].size, arr_state[i].type);
-	}
-
-	post_set();
-}
-
 static const struct mtrr_ops cyrix_mtrr_ops = {
 	.vendor            = X86_VENDOR_CYRIX,
-	.set_all	   = cyrix_set_all,
 	.set               = cyrix_set_arr,
 	.get               = cyrix_get_arr,
 	.get_free_region   = cyrix_get_free_region,
-- 
2.35.3


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id D5F61C433FE
	for <linux-kernel@archiver.kernel.org>; Wed,  2 Nov 2022 07:47:42 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230458AbiKBHrk (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 2 Nov 2022 03:47:40 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:58528 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229547AbiKBHrf (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 2 Nov 2022 03:47:35 -0400
Received: from smtp-out1.suse.de (smtp-out1.suse.de [IPv6:2001:67c:2178:6::1c])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id EC43625E8B
        for <linux-kernel@vger.kernel.org>; Wed,  2 Nov 2022 00:47:33 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out1.suse.de (Postfix) with ESMTPS id A41383373A;
        Wed,  2 Nov 2022 07:47:32 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1667375252; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=z6gy2tyRJJ+OFyVFudtbf06b5xT5AM3xfmnxx6MsckU=;
        b=kB6M6YcMniF4XqArkgMZkLvV3UMLrbzfiFvOgWVIyGfmpeJvp3hRkiAbDedxmFIYgF2q2p
        ghgQo5Nl3tDpFd6AX7/hovwGDFmDXsurNIaH3Gpfy5HTKatdQV6wSsvr6LK7p9Kpc1rom/
        pKmdEsxvGDdJFcqRXP2Yz5Zc71NdyBo=
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id 6B9761376E;
        Wed,  2 Nov 2022 07:47:32 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id T0XlGJQgYmOmcgAAMHmgww
        (envelope-from <jgross@suse.com>); Wed, 02 Nov 2022 07:47:32 +0000
From:   Juergen Gross <jgross@suse.com>
To:     linux-kernel@vger.kernel.org, x86@kernel.org
Cc:     Juergen Gross <jgross@suse.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>
Subject: [PATCH v5 03/16] x86/mtrr: replace use_intel() with a local flag
Date:   Wed,  2 Nov 2022 08:47:00 +0100
Message-Id: <20221102074713.21493-4-jgross@suse.com>
X-Mailer: git-send-email 2.35.3
In-Reply-To: <20221102074713.21493-1-jgross@suse.com>
References: <20221102074713.21493-1-jgross@suse.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

In MTRR code use_intel() is only used in one source file, and the
relevant use_intel_if member of struct mtrr_ops is set only in
generic_mtrr_ops.

Replace use_intel() with a single flag in cacheinfo.c, which can be set
when assigning generic_mtrr_ops to mtrr_if. This allows to drop
use_intel_if from mtrr_ops, while preparing to support PAT without
MTRR. As another preparation for the PAT/MTRR decoupling use a bit for
MTRR control and one for PAT control. For now set both bits together,
this can be changed later.

As the new flag will be set only if mtrr_enabled is set, the test for
mtrr_enabled can be dropped at some places.

Signed-off-by: Juergen Gross <jgross@suse.com>
---
V2:
- new patch
V4:
- rename cache_generic to memory_caching_control (Borislav Petkov)
- rename CACHE_GENERIC_* to CACHE_* (Borislav Petkov)
- get rid of use_generic in mtrr_bp_init() (Borislav Petkov)
V5:
- keep mtrr_enabled() (Borislav Petkov)
---
 arch/x86/include/asm/cacheinfo.h   |  5 +++++
 arch/x86/kernel/cpu/cacheinfo.c    |  3 +++
 arch/x86/kernel/cpu/mtrr/generic.c |  1 -
 arch/x86/kernel/cpu/mtrr/mtrr.c    | 28 +++++++++++++---------------
 arch/x86/kernel/cpu/mtrr/mtrr.h    |  2 --
 5 files changed, 21 insertions(+), 18 deletions(-)

diff --git a/arch/x86/include/asm/cacheinfo.h b/arch/x86/include/asm/cacheinfo.h
index 86b2e0dcc4bf..c3873962a7cd 100644
--- a/arch/x86/include/asm/cacheinfo.h
+++ b/arch/x86/include/asm/cacheinfo.h
@@ -2,6 +2,11 @@
 #ifndef _ASM_X86_CACHEINFO_H
 #define _ASM_X86_CACHEINFO_H
 
+/* Kernel controls MTRR and/or PAT MSRs. */
+extern unsigned int memory_caching_control;
+#define CACHE_MTRR 0x01
+#define CACHE_PAT  0x02
+
 void cacheinfo_amd_init_llc_id(struct cpuinfo_x86 *c, int cpu);
 void cacheinfo_hygon_init_llc_id(struct cpuinfo_x86 *c, int cpu);
 
diff --git a/arch/x86/kernel/cpu/cacheinfo.c b/arch/x86/kernel/cpu/cacheinfo.c
index 66556833d7af..5228fb9a3798 100644
--- a/arch/x86/kernel/cpu/cacheinfo.c
+++ b/arch/x86/kernel/cpu/cacheinfo.c
@@ -35,6 +35,9 @@ DEFINE_PER_CPU_READ_MOSTLY(cpumask_var_t, cpu_llc_shared_map);
 /* Shared L2 cache maps */
 DEFINE_PER_CPU_READ_MOSTLY(cpumask_var_t, cpu_l2c_shared_map);
 
+/* Kernel controls MTRR and/or PAT MSRs. */
+unsigned int memory_caching_control __ro_after_init;
+
 struct _cache_table {
 	unsigned char descriptor;
 	char cache_type;
diff --git a/arch/x86/kernel/cpu/mtrr/generic.c b/arch/x86/kernel/cpu/mtrr/generic.c
index cd64eab02393..81742870ecc5 100644
--- a/arch/x86/kernel/cpu/mtrr/generic.c
+++ b/arch/x86/kernel/cpu/mtrr/generic.c
@@ -917,7 +917,6 @@ int positive_have_wrcomb(void)
  * Generic structure...
  */
 const struct mtrr_ops generic_mtrr_ops = {
-	.use_intel_if		= 1,
 	.set_all		= generic_set_all,
 	.get			= generic_get_mtrr,
 	.get_free_region	= generic_get_free_region,
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.c b/arch/x86/kernel/cpu/mtrr/mtrr.c
index 2746cac9d8a9..4209945c4e68 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.c
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.c
@@ -46,6 +46,7 @@
 #include <linux/syscore_ops.h>
 #include <linux/rcupdate.h>
 
+#include <asm/cacheinfo.h>
 #include <asm/cpufeature.h>
 #include <asm/e820/api.h>
 #include <asm/mtrr.h>
@@ -119,11 +120,11 @@ static int have_wrcomb(void)
 }
 
 /*  This function returns the number of variable MTRRs  */
-static void __init set_num_var_ranges(void)
+static void __init set_num_var_ranges(bool use_generic)
 {
 	unsigned long config = 0, dummy;
 
-	if (use_intel())
+	if (use_generic)
 		rdmsr(MSR_MTRRcap, config, dummy);
 	else if (is_cpu(AMD) || is_cpu(HYGON))
 		config = 2;
@@ -756,14 +757,16 @@ void __init mtrr_bp_init(void)
 
 	if (mtrr_if) {
 		__mtrr_enabled = true;
-		set_num_var_ranges();
+		set_num_var_ranges(mtrr_if == &generic_mtrr_ops);
 		init_table();
-		if (use_intel()) {
+		if (mtrr_if == &generic_mtrr_ops) {
 			/* BIOS may override */
 			__mtrr_enabled = get_mtrr_state();
 
-			if (mtrr_enabled())
+			if (mtrr_enabled()) {
 				mtrr_bp_pat_init();
+				memory_caching_control |= CACHE_MTRR | CACHE_PAT;
+			}
 
 			if (mtrr_cleanup(phys_addr)) {
 				changed_by_mtrr_cleanup = 1;
@@ -786,10 +789,7 @@ void __init mtrr_bp_init(void)
 
 void mtrr_ap_init(void)
 {
-	if (!mtrr_enabled())
-		return;
-
-	if (!use_intel() || mtrr_aps_delayed_init)
+	if (!memory_caching_control || mtrr_aps_delayed_init)
 		return;
 
 	/*
@@ -825,9 +825,7 @@ void mtrr_save_state(void)
 
 void set_mtrr_aps_delayed_init(void)
 {
-	if (!mtrr_enabled())
-		return;
-	if (!use_intel())
+	if (!memory_caching_control)
 		return;
 
 	mtrr_aps_delayed_init = true;
@@ -838,7 +836,7 @@ void set_mtrr_aps_delayed_init(void)
  */
 void mtrr_aps_init(void)
 {
-	if (!use_intel() || !mtrr_enabled())
+	if (!memory_caching_control)
 		return;
 
 	/*
@@ -855,7 +853,7 @@ void mtrr_aps_init(void)
 
 void mtrr_bp_restore(void)
 {
-	if (!use_intel() || !mtrr_enabled())
+	if (!memory_caching_control)
 		return;
 
 	mtrr_if->set_all();
@@ -866,7 +864,7 @@ static int __init mtrr_init_finialize(void)
 	if (!mtrr_enabled())
 		return 0;
 
-	if (use_intel()) {
+	if (memory_caching_control & CACHE_MTRR) {
 		if (!changed_by_mtrr_cleanup)
 			mtrr_state_warn();
 		return 0;
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.h b/arch/x86/kernel/cpu/mtrr/mtrr.h
index 2ac99e561181..88b1c4b6174a 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.h
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.h
@@ -14,7 +14,6 @@ extern unsigned int mtrr_usage_table[MTRR_MAX_VAR_RANGES];
 
 struct mtrr_ops {
 	u32	vendor;
-	u32	use_intel_if;
 	void	(*set)(unsigned int reg, unsigned long base,
 		       unsigned long size, mtrr_type type);
 	void	(*set_all)(void);
@@ -61,7 +60,6 @@ extern u64 size_or_mask, size_and_mask;
 extern const struct mtrr_ops *mtrr_if;
 
 #define is_cpu(vnd)	(mtrr_if && mtrr_if->vendor == X86_VENDOR_##vnd)
-#define use_intel()	(mtrr_if && mtrr_if->use_intel_if == 1)
 
 extern unsigned int num_var_ranges;
 extern u64 mtrr_tom2;
-- 
2.35.3


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 2B24CC4332F
	for <linux-kernel@archiver.kernel.org>; Wed,  2 Nov 2022 07:47:47 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230450AbiKBHrp (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 2 Nov 2022 03:47:45 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:58718 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229534AbiKBHrk (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 2 Nov 2022 03:47:40 -0400
Received: from smtp-out1.suse.de (smtp-out1.suse.de [IPv6:2001:67c:2178:6::1c])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id B93DB26AE7
        for <linux-kernel@vger.kernel.org>; Wed,  2 Nov 2022 00:47:39 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out1.suse.de (Postfix) with ESMTPS id 5050B338F3;
        Wed,  2 Nov 2022 07:47:38 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1667375258; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=gjmwwu1nE4qkYJE0/hC2MZUBh8G9fijNxWNwmPmBasU=;
        b=Loy3jBzVbq4Y8fth8Cvtw/EA441/lsaVmGenyW7/NEybkX1pS6vP7gtya6fQ6KHWA4PhpK
        wbeaEPqMMccegCd1zFzdo8fKmErtB89wKkH5+KPeMIJarCCpYI2XDYXS7st9zG+2aJzQm8
        tCz5nHYwSsnQ78kGr7Wk9tDLkIr++Eo=
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id 13A0B1376E;
        Wed,  2 Nov 2022 07:47:38 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id qoR6A5ogYmOucgAAMHmgww
        (envelope-from <jgross@suse.com>); Wed, 02 Nov 2022 07:47:38 +0000
From:   Juergen Gross <jgross@suse.com>
To:     linux-kernel@vger.kernel.org, x86@kernel.org
Cc:     Juergen Gross <jgross@suse.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>
Subject: [PATCH v5 04/16] x86/mtrr: rename prepare_set() and post_set()
Date:   Wed,  2 Nov 2022 08:47:01 +0100
Message-Id: <20221102074713.21493-5-jgross@suse.com>
X-Mailer: git-send-email 2.35.3
In-Reply-To: <20221102074713.21493-1-jgross@suse.com>
References: <20221102074713.21493-1-jgross@suse.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Rename the currently MTRR specific functions prepare_set() and
post_set() for preparing to move them. Make them non-static and put
their prototypes into cacheinfo.h, where they will end after moving
them to their final position anyway.

Expand the comment before the functions with an introductory line and
rename two related static variables, too.

Signed-off-by: Juergen Gross <jgross@suse.com>
---
V4:
- carved out from other patch (Borislav Petkov)
---
 arch/x86/include/asm/cacheinfo.h   |  3 +++
 arch/x86/kernel/cpu/mtrr/generic.c | 43 +++++++++++++++---------------
 2 files changed, 24 insertions(+), 22 deletions(-)

diff --git a/arch/x86/include/asm/cacheinfo.h b/arch/x86/include/asm/cacheinfo.h
index c3873962a7cd..6159874b4183 100644
--- a/arch/x86/include/asm/cacheinfo.h
+++ b/arch/x86/include/asm/cacheinfo.h
@@ -10,4 +10,7 @@ extern unsigned int memory_caching_control;
 void cacheinfo_amd_init_llc_id(struct cpuinfo_x86 *c, int cpu);
 void cacheinfo_hygon_init_llc_id(struct cpuinfo_x86 *c, int cpu);
 
+void cache_disable(void);
+void cache_enable(void);
+
 #endif /* _ASM_X86_CACHEINFO_H */
diff --git a/arch/x86/kernel/cpu/mtrr/generic.c b/arch/x86/kernel/cpu/mtrr/generic.c
index 81742870ecc5..aebdc90a2489 100644
--- a/arch/x86/kernel/cpu/mtrr/generic.c
+++ b/arch/x86/kernel/cpu/mtrr/generic.c
@@ -10,6 +10,7 @@
 #include <linux/mm.h>
 
 #include <asm/processor-flags.h>
+#include <asm/cacheinfo.h>
 #include <asm/cpufeature.h>
 #include <asm/tlbflush.h>
 #include <asm/mtrr.h>
@@ -396,9 +397,6 @@ print_fixed(unsigned base, unsigned step, const mtrr_type *types)
 	}
 }
 
-static void prepare_set(void);
-static void post_set(void);
-
 static void __init print_mtrr_state(void)
 {
 	unsigned int i;
@@ -450,11 +448,11 @@ void __init mtrr_bp_pat_init(void)
 	unsigned long flags;
 
 	local_irq_save(flags);
-	prepare_set();
+	cache_disable();
 
 	pat_init();
 
-	post_set();
+	cache_enable();
 	local_irq_restore(flags);
 }
 
@@ -687,7 +685,7 @@ static u32 deftype_lo, deftype_hi;
  * NOTE: The CPU must already be in a safe state for MTRR changes, including
  *       measures that only a single CPU can be active in set_mtrr_state() in
  *       order to not be subject to races for usage of deftype_lo (this is
- *       accomplished by taking set_atomicity_lock).
+ *       accomplished by taking cache_disable_lock).
  * RETURNS: 0 if no changes made, else a mask indicating what was changed.
  */
 static unsigned long set_mtrr_state(void)
@@ -718,18 +716,19 @@ static unsigned long set_mtrr_state(void)
 	return change_mask;
 }
 
-
-static unsigned long cr4;
-static DEFINE_RAW_SPINLOCK(set_atomicity_lock);
-
 /*
+ * Disable and enable caches. Needed for changing MTRRs and the PAT MSR.
+ *
  * Since we are disabling the cache don't allow any interrupts,
  * they would run extremely slow and would only increase the pain.
  *
  * The caller must ensure that local interrupts are disabled and
- * are reenabled after post_set() has been called.
+ * are reenabled after cache_enable() has been called.
  */
-static void prepare_set(void) __acquires(set_atomicity_lock)
+static unsigned long saved_cr4;
+static DEFINE_RAW_SPINLOCK(cache_disable_lock);
+
+void cache_disable(void) __acquires(cache_disable_lock)
 {
 	unsigned long cr0;
 
@@ -740,7 +739,7 @@ static void prepare_set(void) __acquires(set_atomicity_lock)
 	 * changes to the way the kernel boots
 	 */
 
-	raw_spin_lock(&set_atomicity_lock);
+	raw_spin_lock(&cache_disable_lock);
 
 	/* Enter the no-fill (CD=1, NW=0) cache mode and flush caches. */
 	cr0 = read_cr0() | X86_CR0_CD;
@@ -757,8 +756,8 @@ static void prepare_set(void) __acquires(set_atomicity_lock)
 
 	/* Save value of CR4 and clear Page Global Enable (bit 7) */
 	if (boot_cpu_has(X86_FEATURE_PGE)) {
-		cr4 = __read_cr4();
-		__write_cr4(cr4 & ~X86_CR4_PGE);
+		saved_cr4 = __read_cr4();
+		__write_cr4(saved_cr4 & ~X86_CR4_PGE);
 	}
 
 	/* Flush all TLBs via a mov %cr3, %reg; mov %reg, %cr3 */
@@ -776,7 +775,7 @@ static void prepare_set(void) __acquires(set_atomicity_lock)
 		wbinvd();
 }
 
-static void post_set(void) __releases(set_atomicity_lock)
+void cache_enable(void) __releases(cache_disable_lock)
 {
 	/* Flush TLBs (no need to flush caches - they are disabled) */
 	count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);
@@ -790,8 +789,8 @@ static void post_set(void) __releases(set_atomicity_lock)
 
 	/* Restore value of CR4 */
 	if (boot_cpu_has(X86_FEATURE_PGE))
-		__write_cr4(cr4);
-	raw_spin_unlock(&set_atomicity_lock);
+		__write_cr4(saved_cr4);
+	raw_spin_unlock(&cache_disable_lock);
 }
 
 static void generic_set_all(void)
@@ -800,7 +799,7 @@ static void generic_set_all(void)
 	unsigned long flags;
 
 	local_irq_save(flags);
-	prepare_set();
+	cache_disable();
 
 	/* Actually set the state */
 	mask = set_mtrr_state();
@@ -808,7 +807,7 @@ static void generic_set_all(void)
 	/* also set PAT */
 	pat_init();
 
-	post_set();
+	cache_enable();
 	local_irq_restore(flags);
 
 	/* Use the atomic bitops to update the global mask */
@@ -839,7 +838,7 @@ static void generic_set_mtrr(unsigned int reg, unsigned long base,
 	vr = &mtrr_state.var_ranges[reg];
 
 	local_irq_save(flags);
-	prepare_set();
+	cache_disable();
 
 	if (size == 0) {
 		/*
@@ -858,7 +857,7 @@ static void generic_set_mtrr(unsigned int reg, unsigned long base,
 		mtrr_wrmsr(MTRRphysMask_MSR(reg), vr->mask_lo, vr->mask_hi);
 	}
 
-	post_set();
+	cache_enable();
 	local_irq_restore(flags);
 }
 
-- 
2.35.3


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 2AD91C433FE
	for <linux-kernel@archiver.kernel.org>; Wed,  2 Nov 2022 07:48:07 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230456AbiKBHsF (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 2 Nov 2022 03:48:05 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:58522 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230468AbiKBHr5 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 2 Nov 2022 03:47:57 -0400
Received: from smtp-out1.suse.de (smtp-out1.suse.de [IPv6:2001:67c:2178:6::1c])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 41F2825EA8
        for <linux-kernel@vger.kernel.org>; Wed,  2 Nov 2022 00:47:45 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out1.suse.de (Postfix) with ESMTPS id EA2E43373A;
        Wed,  2 Nov 2022 07:47:43 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1667375263; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=Wg1ltP5S2ST2D2shywYpbJwrHqpg2nHmgpqKBsh6EzQ=;
        b=MPB5tr1NRV+9NntC9d7piW075UGauYq/F0wIwl3hrWXHrOLpkt91GvuDjQ/bqOTrZjDpEU
        QX1BhBHf7jqkHc6qAYj9wTU4zVgjLARKDa3oAWOcyUM9u1SYh2gdoCx+sKKvTRrgd+a9qB
        owZ9Lyo3qx/EzoklDjpwBt/Ya9F0nZs=
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id B225A1376E;
        Wed,  2 Nov 2022 07:47:43 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id Zk5BKp8gYmO9cgAAMHmgww
        (envelope-from <jgross@suse.com>); Wed, 02 Nov 2022 07:47:43 +0000
From:   Juergen Gross <jgross@suse.com>
To:     linux-kernel@vger.kernel.org, x86@kernel.org
Cc:     Juergen Gross <jgross@suse.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>
Subject: [PATCH v5 05/16] x86/mtrr: split MTRR specific handling from cache dis/enabling
Date:   Wed,  2 Nov 2022 08:47:02 +0100
Message-Id: <20221102074713.21493-6-jgross@suse.com>
X-Mailer: git-send-email 2.35.3
In-Reply-To: <20221102074713.21493-1-jgross@suse.com>
References: <20221102074713.21493-1-jgross@suse.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Split the MTRR specific actions from cache_disable() and cache_enable()
into the new functions mtrr_disable() and mtrr_enable().

Signed-off-by: Juergen Gross <jgross@suse.com>
---
V4:
- carved out from other patch (Borislav Petkov)
V5:
- use cpu_feature_enabled() (Borislav Petkov)
---
 arch/x86/include/asm/mtrr.h        |  4 ++++
 arch/x86/kernel/cpu/mtrr/generic.c | 26 +++++++++++++++++++-------
 2 files changed, 23 insertions(+), 7 deletions(-)

diff --git a/arch/x86/include/asm/mtrr.h b/arch/x86/include/asm/mtrr.h
index 76d726074c16..12a16caed395 100644
--- a/arch/x86/include/asm/mtrr.h
+++ b/arch/x86/include/asm/mtrr.h
@@ -48,6 +48,8 @@ extern void mtrr_aps_init(void);
 extern void mtrr_bp_restore(void);
 extern int mtrr_trim_uncached_memory(unsigned long end_pfn);
 extern int amd_special_default_mtrr(void);
+void mtrr_disable(void);
+void mtrr_enable(void);
 #  else
 static inline u8 mtrr_type_lookup(u64 addr, u64 end, u8 *uniform)
 {
@@ -87,6 +89,8 @@ static inline void mtrr_centaur_report_mcr(int mcr, u32 lo, u32 hi)
 #define set_mtrr_aps_delayed_init() do {} while (0)
 #define mtrr_aps_init() do {} while (0)
 #define mtrr_bp_restore() do {} while (0)
+#define mtrr_disable() do {} while (0)
+#define mtrr_enable() do {} while (0)
 #  endif
 
 #ifdef CONFIG_COMPAT
diff --git a/arch/x86/kernel/cpu/mtrr/generic.c b/arch/x86/kernel/cpu/mtrr/generic.c
index aebdc90a2489..4edf0827f7ee 100644
--- a/arch/x86/kernel/cpu/mtrr/generic.c
+++ b/arch/x86/kernel/cpu/mtrr/generic.c
@@ -716,6 +716,21 @@ static unsigned long set_mtrr_state(void)
 	return change_mask;
 }
 
+void mtrr_disable(void)
+{
+	/* Save MTRR state */
+	rdmsr(MSR_MTRRdefType, deftype_lo, deftype_hi);
+
+	/* Disable MTRRs, and set the default type to uncached */
+	mtrr_wrmsr(MSR_MTRRdefType, deftype_lo & ~0xcff, deftype_hi);
+}
+
+void mtrr_enable(void)
+{
+	/* Intel (P6) standard MTRRs */
+	mtrr_wrmsr(MSR_MTRRdefType, deftype_lo, deftype_hi);
+}
+
 /*
  * Disable and enable caches. Needed for changing MTRRs and the PAT MSR.
  *
@@ -764,11 +779,8 @@ void cache_disable(void) __acquires(cache_disable_lock)
 	count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);
 	flush_tlb_local();
 
-	/* Save MTRR state */
-	rdmsr(MSR_MTRRdefType, deftype_lo, deftype_hi);
-
-	/* Disable MTRRs, and set the default type to uncached */
-	mtrr_wrmsr(MSR_MTRRdefType, deftype_lo & ~0xcff, deftype_hi);
+	if (cpu_feature_enabled(X86_FEATURE_MTRR))
+		mtrr_disable();
 
 	/* Again, only flush caches if we have to. */
 	if (!static_cpu_has(X86_FEATURE_SELFSNOOP))
@@ -781,8 +793,8 @@ void cache_enable(void) __releases(cache_disable_lock)
 	count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);
 	flush_tlb_local();
 
-	/* Intel (P6) standard MTRRs */
-	mtrr_wrmsr(MSR_MTRRdefType, deftype_lo, deftype_hi);
+	if (cpu_feature_enabled(X86_FEATURE_MTRR))
+		mtrr_enable();
 
 	/* Enable caches */
 	write_cr0(read_cr0() & ~X86_CR0_CD);
-- 
2.35.3


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 5FD82C4332F
	for <linux-kernel@archiver.kernel.org>; Wed,  2 Nov 2022 07:48:09 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230487AbiKBHsI (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 2 Nov 2022 03:48:08 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:58870 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230483AbiKBHsA (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 2 Nov 2022 03:48:00 -0400
Received: from smtp-out2.suse.de (smtp-out2.suse.de [IPv6:2001:67c:2178:6::1d])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id EB63F27170
        for <linux-kernel@vger.kernel.org>; Wed,  2 Nov 2022 00:47:50 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out2.suse.de (Postfix) with ESMTPS id A5D971F8B0;
        Wed,  2 Nov 2022 07:47:49 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1667375269; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=NhfPGIkSQGMzUIyLCC2u9IISPCoq9TUFQ1/WyCEAvPA=;
        b=aUuF0bLWXXy0fVLbPkMPgxknmGre45Rj0LWrTujtDYRMlIC5iGoyJdB3SMfRKClXzIeZfp
        O1NeIAfRF5gbasriCALR3LHJTSP3SX0ciNr9ETvPMZZTFtlhzMaEsVqFzKj4arMyWIJ8CV
        QyRqHfboyRR3bQyJmJ/+ivlIvvFribE=
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id 632D11376E;
        Wed,  2 Nov 2022 07:47:49 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id aPWnFqUgYmPPcgAAMHmgww
        (envelope-from <jgross@suse.com>); Wed, 02 Nov 2022 07:47:49 +0000
From:   Juergen Gross <jgross@suse.com>
To:     linux-kernel@vger.kernel.org, x86@kernel.org
Cc:     Juergen Gross <jgross@suse.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>
Subject: [PATCH v5 06/16] x86: move some code out of arch/x86/kernel/cpu/mtrr
Date:   Wed,  2 Nov 2022 08:47:03 +0100
Message-Id: <20221102074713.21493-7-jgross@suse.com>
X-Mailer: git-send-email 2.35.3
In-Reply-To: <20221102074713.21493-1-jgross@suse.com>
References: <20221102074713.21493-1-jgross@suse.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Prepare making PAT and MTRR support independent from each other by
moving some code needed by both out of the MTRR specific sources.

Signed-off-by: Juergen Gross <jgross@suse.com>
---
V2:
- move code from cpu/common.c to cpu/cacheinfo.c (Borislav Petkov)
V4:
- carved out all non-movement modifications (Borislav Petkov)
---
 arch/x86/kernel/cpu/cacheinfo.c    | 77 ++++++++++++++++++++++++++++++
 arch/x86/kernel/cpu/mtrr/generic.c | 74 ----------------------------
 2 files changed, 77 insertions(+), 74 deletions(-)

diff --git a/arch/x86/kernel/cpu/cacheinfo.c b/arch/x86/kernel/cpu/cacheinfo.c
index 5228fb9a3798..c6a17e21301e 100644
--- a/arch/x86/kernel/cpu/cacheinfo.c
+++ b/arch/x86/kernel/cpu/cacheinfo.c
@@ -20,6 +20,8 @@
 #include <asm/cacheinfo.h>
 #include <asm/amd_nb.h>
 #include <asm/smp.h>
+#include <asm/mtrr.h>
+#include <asm/tlbflush.h>
 
 #include "cpu.h"
 
@@ -1043,3 +1045,78 @@ int populate_cache_leaves(unsigned int cpu)
 
 	return 0;
 }
+
+/*
+ * Disable and enable caches. Needed for changing MTRRs and the PAT MSR.
+ *
+ * Since we are disabling the cache don't allow any interrupts,
+ * they would run extremely slow and would only increase the pain.
+ *
+ * The caller must ensure that local interrupts are disabled and
+ * are reenabled after cache_enable() has been called.
+ */
+static unsigned long saved_cr4;
+static DEFINE_RAW_SPINLOCK(cache_disable_lock);
+
+void cache_disable(void) __acquires(cache_disable_lock)
+{
+	unsigned long cr0;
+
+	/*
+	 * Note that this is not ideal
+	 * since the cache is only flushed/disabled for this CPU while the
+	 * MTRRs are changed, but changing this requires more invasive
+	 * changes to the way the kernel boots
+	 */
+
+	raw_spin_lock(&cache_disable_lock);
+
+	/* Enter the no-fill (CD=1, NW=0) cache mode and flush caches. */
+	cr0 = read_cr0() | X86_CR0_CD;
+	write_cr0(cr0);
+
+	/*
+	 * Cache flushing is the most time-consuming step when programming
+	 * the MTRRs. Fortunately, as per the Intel Software Development
+	 * Manual, we can skip it if the processor supports cache self-
+	 * snooping.
+	 */
+	if (!static_cpu_has(X86_FEATURE_SELFSNOOP))
+		wbinvd();
+
+	/* Save value of CR4 and clear Page Global Enable (bit 7) */
+	if (cpu_feature_enabled(X86_FEATURE_PGE)) {
+		saved_cr4 = __read_cr4();
+		__write_cr4(saved_cr4 & ~X86_CR4_PGE);
+	}
+
+	/* Flush all TLBs via a mov %cr3, %reg; mov %reg, %cr3 */
+	count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);
+	flush_tlb_local();
+
+	if (cpu_feature_enabled(X86_FEATURE_MTRR))
+		mtrr_disable();
+
+	/* Again, only flush caches if we have to. */
+	if (!static_cpu_has(X86_FEATURE_SELFSNOOP))
+		wbinvd();
+}
+
+void cache_enable(void) __releases(cache_disable_lock)
+{
+	/* Flush TLBs (no need to flush caches - they are disabled) */
+	count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);
+	flush_tlb_local();
+
+	if (cpu_feature_enabled(X86_FEATURE_MTRR))
+		mtrr_enable();
+
+	/* Enable caches */
+	write_cr0(read_cr0() & ~X86_CR0_CD);
+
+	/* Restore value of CR4 */
+	if (cpu_feature_enabled(X86_FEATURE_PGE))
+		__write_cr4(saved_cr4);
+
+	raw_spin_unlock(&cache_disable_lock);
+}
diff --git a/arch/x86/kernel/cpu/mtrr/generic.c b/arch/x86/kernel/cpu/mtrr/generic.c
index 4edf0827f7ee..bfe13eedaca8 100644
--- a/arch/x86/kernel/cpu/mtrr/generic.c
+++ b/arch/x86/kernel/cpu/mtrr/generic.c
@@ -731,80 +731,6 @@ void mtrr_enable(void)
 	mtrr_wrmsr(MSR_MTRRdefType, deftype_lo, deftype_hi);
 }
 
-/*
- * Disable and enable caches. Needed for changing MTRRs and the PAT MSR.
- *
- * Since we are disabling the cache don't allow any interrupts,
- * they would run extremely slow and would only increase the pain.
- *
- * The caller must ensure that local interrupts are disabled and
- * are reenabled after cache_enable() has been called.
- */
-static unsigned long saved_cr4;
-static DEFINE_RAW_SPINLOCK(cache_disable_lock);
-
-void cache_disable(void) __acquires(cache_disable_lock)
-{
-	unsigned long cr0;
-
-	/*
-	 * Note that this is not ideal
-	 * since the cache is only flushed/disabled for this CPU while the
-	 * MTRRs are changed, but changing this requires more invasive
-	 * changes to the way the kernel boots
-	 */
-
-	raw_spin_lock(&cache_disable_lock);
-
-	/* Enter the no-fill (CD=1, NW=0) cache mode and flush caches. */
-	cr0 = read_cr0() | X86_CR0_CD;
-	write_cr0(cr0);
-
-	/*
-	 * Cache flushing is the most time-consuming step when programming
-	 * the MTRRs. Fortunately, as per the Intel Software Development
-	 * Manual, we can skip it if the processor supports cache self-
-	 * snooping.
-	 */
-	if (!static_cpu_has(X86_FEATURE_SELFSNOOP))
-		wbinvd();
-
-	/* Save value of CR4 and clear Page Global Enable (bit 7) */
-	if (boot_cpu_has(X86_FEATURE_PGE)) {
-		saved_cr4 = __read_cr4();
-		__write_cr4(saved_cr4 & ~X86_CR4_PGE);
-	}
-
-	/* Flush all TLBs via a mov %cr3, %reg; mov %reg, %cr3 */
-	count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);
-	flush_tlb_local();
-
-	if (cpu_feature_enabled(X86_FEATURE_MTRR))
-		mtrr_disable();
-
-	/* Again, only flush caches if we have to. */
-	if (!static_cpu_has(X86_FEATURE_SELFSNOOP))
-		wbinvd();
-}
-
-void cache_enable(void) __releases(cache_disable_lock)
-{
-	/* Flush TLBs (no need to flush caches - they are disabled) */
-	count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);
-	flush_tlb_local();
-
-	if (cpu_feature_enabled(X86_FEATURE_MTRR))
-		mtrr_enable();
-
-	/* Enable caches */
-	write_cr0(read_cr0() & ~X86_CR0_CD);
-
-	/* Restore value of CR4 */
-	if (boot_cpu_has(X86_FEATURE_PGE))
-		__write_cr4(saved_cr4);
-	raw_spin_unlock(&cache_disable_lock);
-}
-
 static void generic_set_all(void)
 {
 	unsigned long mask, count;
-- 
2.35.3


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 06C11C4332F
	for <linux-kernel@archiver.kernel.org>; Wed,  2 Nov 2022 07:48:18 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230474AbiKBHsQ (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 2 Nov 2022 03:48:16 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:58522 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230467AbiKBHsB (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 2 Nov 2022 03:48:01 -0400
Received: from smtp-out1.suse.de (smtp-out1.suse.de [IPv6:2001:67c:2178:6::1c])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 9C0ED25EA5
        for <linux-kernel@vger.kernel.org>; Wed,  2 Nov 2022 00:47:56 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out1.suse.de (Postfix) with ESMTPS id 5B1923373A;
        Wed,  2 Nov 2022 07:47:55 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1667375275; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=hfFxlGohZFf4CqpiCTKsxCFD+Xx0kKFUH3zzu8okq48=;
        b=nlpM0eoMXQa+ifbQPXqCnafiiovJrI9moEH/jBkqh1HjGfdpeGr28LiYWG70VhmAB2MiDu
        Ggyg4U4i/o8rU4Diuq2BXGJIA6kKEUweTCGXPH0MpEhTuEA1d8f20ljR8pmgxbHF9aCUiP
        VhOyq8U/FvwdZR524s9c7Ge3o/C25yA=
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id 1F2691376E;
        Wed,  2 Nov 2022 07:47:55 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id 9Zc9BqsgYmPacgAAMHmgww
        (envelope-from <jgross@suse.com>); Wed, 02 Nov 2022 07:47:55 +0000
From:   Juergen Gross <jgross@suse.com>
To:     linux-kernel@vger.kernel.org, x86@kernel.org
Cc:     Juergen Gross <jgross@suse.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>
Subject: [PATCH v5 07/16] x86/mtrr: Disentangle MTRR init from PAT init.
Date:   Wed,  2 Nov 2022 08:47:04 +0100
Message-Id: <20221102074713.21493-8-jgross@suse.com>
X-Mailer: git-send-email 2.35.3
In-Reply-To: <20221102074713.21493-1-jgross@suse.com>
References: <20221102074713.21493-1-jgross@suse.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Add a main cache_cpu_init() init routine which initializes MTRR and/or
PAT support depending on what has been detected on the system.

Leave the MTRR-specific initialization in a MTRR-specific init function
where the smp_changes_mask setting happens now with caches disabled.

This global mask update was done with caches enabled before probably
because atomic operations while running uncached might have been quite
expensive.

But since only systems with a broken BIOS should ever require to set any
bit in smp_changes_mask, hurting those devices with a penalty of a few
microseconds during boot shouldn't be a real issue.

Signed-off-by: Juergen Gross <jgross@suse.com>
---
V2:
- new patch
V4:
- remove some comments (Borislav Petkov)
V5:
- rephrase commit message (Borislav Petkov)
---
 arch/x86/include/asm/cacheinfo.h   |  1 +
 arch/x86/include/asm/mtrr.h        |  2 ++
 arch/x86/kernel/cpu/cacheinfo.c    | 17 +++++++++++++++++
 arch/x86/kernel/cpu/mtrr/generic.c | 15 ++-------------
 4 files changed, 22 insertions(+), 13 deletions(-)

diff --git a/arch/x86/include/asm/cacheinfo.h b/arch/x86/include/asm/cacheinfo.h
index 6159874b4183..978bac70fd49 100644
--- a/arch/x86/include/asm/cacheinfo.h
+++ b/arch/x86/include/asm/cacheinfo.h
@@ -12,5 +12,6 @@ void cacheinfo_hygon_init_llc_id(struct cpuinfo_x86 *c, int cpu);
 
 void cache_disable(void);
 void cache_enable(void);
+void cache_cpu_init(void);
 
 #endif /* _ASM_X86_CACHEINFO_H */
diff --git a/arch/x86/include/asm/mtrr.h b/arch/x86/include/asm/mtrr.h
index 12a16caed395..986249a2b9b6 100644
--- a/arch/x86/include/asm/mtrr.h
+++ b/arch/x86/include/asm/mtrr.h
@@ -50,6 +50,7 @@ extern int mtrr_trim_uncached_memory(unsigned long end_pfn);
 extern int amd_special_default_mtrr(void);
 void mtrr_disable(void);
 void mtrr_enable(void);
+void mtrr_generic_set_state(void);
 #  else
 static inline u8 mtrr_type_lookup(u64 addr, u64 end, u8 *uniform)
 {
@@ -91,6 +92,7 @@ static inline void mtrr_centaur_report_mcr(int mcr, u32 lo, u32 hi)
 #define mtrr_bp_restore() do {} while (0)
 #define mtrr_disable() do {} while (0)
 #define mtrr_enable() do {} while (0)
+#define mtrr_generic_set_state() do {} while (0)
 #  endif
 
 #ifdef CONFIG_COMPAT
diff --git a/arch/x86/kernel/cpu/cacheinfo.c b/arch/x86/kernel/cpu/cacheinfo.c
index c6a17e21301e..81ab99fe92bd 100644
--- a/arch/x86/kernel/cpu/cacheinfo.c
+++ b/arch/x86/kernel/cpu/cacheinfo.c
@@ -1120,3 +1120,20 @@ void cache_enable(void) __releases(cache_disable_lock)
 
 	raw_spin_unlock(&cache_disable_lock);
 }
+
+void cache_cpu_init(void)
+{
+	unsigned long flags;
+
+	local_irq_save(flags);
+	cache_disable();
+
+	if (memory_caching_control & CACHE_MTRR)
+		mtrr_generic_set_state();
+
+	if (memory_caching_control & CACHE_PAT)
+		pat_init();
+
+	cache_enable();
+	local_irq_restore(flags);
+}
diff --git a/arch/x86/kernel/cpu/mtrr/generic.c b/arch/x86/kernel/cpu/mtrr/generic.c
index bfe13eedaca8..32aebed25e3f 100644
--- a/arch/x86/kernel/cpu/mtrr/generic.c
+++ b/arch/x86/kernel/cpu/mtrr/generic.c
@@ -731,30 +731,19 @@ void mtrr_enable(void)
 	mtrr_wrmsr(MSR_MTRRdefType, deftype_lo, deftype_hi);
 }
 
-static void generic_set_all(void)
+void mtrr_generic_set_state(void)
 {
 	unsigned long mask, count;
-	unsigned long flags;
-
-	local_irq_save(flags);
-	cache_disable();
 
 	/* Actually set the state */
 	mask = set_mtrr_state();
 
-	/* also set PAT */
-	pat_init();
-
-	cache_enable();
-	local_irq_restore(flags);
-
 	/* Use the atomic bitops to update the global mask */
 	for (count = 0; count < sizeof(mask) * 8; ++count) {
 		if (mask & 0x01)
 			set_bit(count, &smp_changes_mask);
 		mask >>= 1;
 	}
-
 }
 
 /**
@@ -854,7 +843,7 @@ int positive_have_wrcomb(void)
  * Generic structure...
  */
 const struct mtrr_ops generic_mtrr_ops = {
-	.set_all		= generic_set_all,
+	.set_all		= cache_cpu_init,
 	.get			= generic_get_mtrr,
 	.get_free_region	= generic_get_free_region,
 	.set			= generic_set_mtrr,
-- 
2.35.3


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 39BEBC4332F
	for <linux-kernel@archiver.kernel.org>; Wed,  2 Nov 2022 07:48:28 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230478AbiKBHs0 (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 2 Nov 2022 03:48:26 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:59098 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230437AbiKBHsF (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 2 Nov 2022 03:48:05 -0400
Received: from smtp-out2.suse.de (smtp-out2.suse.de [IPv6:2001:67c:2178:6::1d])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 4C38625EA8
        for <linux-kernel@vger.kernel.org>; Wed,  2 Nov 2022 00:48:02 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out2.suse.de (Postfix) with ESMTPS id 07B191F8F6;
        Wed,  2 Nov 2022 07:48:01 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1667375281; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=jEdYANPBbo11yEPhclA11hPNGtJyAv+5gydUG+2wLoA=;
        b=HNhwEaizrMBram9B1DMCvJi1mShlOtPjN9L3JRMrTMezKPmg9gEri+ki/ZVoBZ+2c1B7Cg
        fEFmNmizwcFlmkkfoTYL0rYYi3ZA4ZC1U6Diyvr8jyHZmhvwV3FiqS+fWX8XojEihjGhjy
        rIOuhc+lCXpgsb1jyFU3vsl3BxuG9/Y=
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id BC24E1376E;
        Wed,  2 Nov 2022 07:48:00 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id PdaVLLAgYmPmcgAAMHmgww
        (envelope-from <jgross@suse.com>); Wed, 02 Nov 2022 07:48:00 +0000
From:   Juergen Gross <jgross@suse.com>
To:     linux-kernel@vger.kernel.org, x86@kernel.org
Cc:     Juergen Gross <jgross@suse.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>
Subject: [PATCH v5 08/16] x86/mtrr: remove set_all callback from struct mtrr_ops
Date:   Wed,  2 Nov 2022 08:47:05 +0100
Message-Id: <20221102074713.21493-9-jgross@suse.com>
X-Mailer: git-send-email 2.35.3
In-Reply-To: <20221102074713.21493-1-jgross@suse.com>
References: <20221102074713.21493-1-jgross@suse.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Instead of using an indirect call to mtrr_if->set_all just call the
only possible target cache_cpu_init() directly. This enables to remove
the set_all callback from struct mtrr_ops.

Signed-off-by: Juergen Gross <jgross@suse.com>
---
 arch/x86/kernel/cpu/mtrr/generic.c |  1 -
 arch/x86/kernel/cpu/mtrr/mtrr.c    | 10 +++++-----
 arch/x86/kernel/cpu/mtrr/mtrr.h    |  2 --
 3 files changed, 5 insertions(+), 8 deletions(-)

diff --git a/arch/x86/kernel/cpu/mtrr/generic.c b/arch/x86/kernel/cpu/mtrr/generic.c
index 32aebed25e3f..af8422c96b92 100644
--- a/arch/x86/kernel/cpu/mtrr/generic.c
+++ b/arch/x86/kernel/cpu/mtrr/generic.c
@@ -843,7 +843,6 @@ int positive_have_wrcomb(void)
  * Generic structure...
  */
 const struct mtrr_ops generic_mtrr_ops = {
-	.set_all		= cache_cpu_init,
 	.get			= generic_get_mtrr,
 	.get_free_region	= generic_get_free_region,
 	.set			= generic_set_mtrr,
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.c b/arch/x86/kernel/cpu/mtrr/mtrr.c
index 4209945c4e68..a44b510ced0e 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.c
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.c
@@ -170,15 +170,15 @@ static int mtrr_rendezvous_handler(void *info)
 	 * saved, and we want to replicate that across all the cpus that come
 	 * online (either at the end of boot or resume or during a runtime cpu
 	 * online). If we're doing that, @reg is set to something special and on
-	 * all the cpu's we do mtrr_if->set_all() (On the logical cpu that
+	 * all the CPUs we do cache_cpu_init() (On the logical CPU that
 	 * started the boot/resume sequence, this might be a duplicate
-	 * set_all()).
+	 * cache_cpu_init()).
 	 */
 	if (data->smp_reg != ~0U) {
 		mtrr_if->set(data->smp_reg, data->smp_base,
 			     data->smp_size, data->smp_type);
 	} else if (mtrr_aps_delayed_init || !cpu_online(smp_processor_id())) {
-		mtrr_if->set_all();
+		cache_cpu_init();
 	}
 	return 0;
 }
@@ -770,7 +770,7 @@ void __init mtrr_bp_init(void)
 
 			if (mtrr_cleanup(phys_addr)) {
 				changed_by_mtrr_cleanup = 1;
-				mtrr_if->set_all();
+				cache_cpu_init();
 			}
 		}
 	}
@@ -856,7 +856,7 @@ void mtrr_bp_restore(void)
 	if (!memory_caching_control)
 		return;
 
-	mtrr_if->set_all();
+	cache_cpu_init();
 }
 
 static int __init mtrr_init_finialize(void)
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.h b/arch/x86/kernel/cpu/mtrr/mtrr.h
index 88b1c4b6174a..3b1883185185 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.h
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.h
@@ -16,8 +16,6 @@ struct mtrr_ops {
 	u32	vendor;
 	void	(*set)(unsigned int reg, unsigned long base,
 		       unsigned long size, mtrr_type type);
-	void	(*set_all)(void);
-
 	void	(*get)(unsigned int reg, unsigned long *base,
 		       unsigned long *size, mtrr_type *type);
 	int	(*get_free_region)(unsigned long base, unsigned long size,
-- 
2.35.3


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 7A89CC4332F
	for <linux-kernel@archiver.kernel.org>; Wed,  2 Nov 2022 07:48:35 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230497AbiKBHse (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 2 Nov 2022 03:48:34 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:58908 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229587AbiKBHsI (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 2 Nov 2022 03:48:08 -0400
Received: from smtp-out2.suse.de (smtp-out2.suse.de [IPv6:2001:67c:2178:6::1d])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id E6A4E2714C
        for <linux-kernel@vger.kernel.org>; Wed,  2 Nov 2022 00:48:07 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out2.suse.de (Postfix) with ESMTPS id 9C5951F8D0;
        Wed,  2 Nov 2022 07:48:06 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1667375286; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=dqXfly+nuyRzVNoX1Dc+OjXV+YnmKzCTWh6bGlPZ0fg=;
        b=hxa617INPh9fzqGr3kbyQUayFOCFuaBCZ9uLqj9xvG3+RNrZTyxB82el3RtRth37stdlHA
        J4i2OeSAf5G16bqL1/J+s5/YCNMwmpSK8XygJ/W+Ji3j3BqwUCziIEg/0RrIoHYebSsAmB
        3W66PBNkCuWC+EDBJdyNJFZ6eLEzM0g=
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id 65F781376E;
        Wed,  2 Nov 2022 07:48:06 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id i0a+F7YgYmP3cgAAMHmgww
        (envelope-from <jgross@suse.com>); Wed, 02 Nov 2022 07:48:06 +0000
From:   Juergen Gross <jgross@suse.com>
To:     linux-kernel@vger.kernel.org, x86@kernel.org
Cc:     Juergen Gross <jgross@suse.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>
Subject: [PATCH v5 09/16] x86/mtrr: simplify mtrr_bp_init()
Date:   Wed,  2 Nov 2022 08:47:06 +0100
Message-Id: <20221102074713.21493-10-jgross@suse.com>
X-Mailer: git-send-email 2.35.3
In-Reply-To: <20221102074713.21493-1-jgross@suse.com>
References: <20221102074713.21493-1-jgross@suse.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

In case of the generic cache interface being used (Intel CPUs or a
64-bit system), the initialization sequence of the boot CPU is more
complicated than necessary:

- check if MTRR enabled, if yes, call mtrr_bp_pat_init() which will
  disable caching, set the PAT MSR, and reenable caching

- call mtrr_cleanup(), in case that changed anything, call
  cache_cpu_init() doing the same caching disable/enable dance as
  above, but this time with setting the (modified) MTRR state (even
  if MTRR was disabled) AND setting the PAT MSR (again even with
  disabled MTRR)

The sequence can be simplified a lot while removing potential
inconsistencies:

- check if MTRR enabled, if yes, call mtrr_cleanup() and then
  cache_cpu_init()

This ensures to:

- no longer disable/enable caching more than once

- avoid to set MTRRs and/or the PAT MSR on the boot processor in case
  of MTRR cleanups even if MTRRs meant to be disabled

With that mtrr_bp_pat_init() can be removed.

Signed-off-by: Juergen Gross <jgross@suse.com>
---
V2:
- new patch
---
 arch/x86/kernel/cpu/mtrr/generic.c | 14 --------------
 arch/x86/kernel/cpu/mtrr/mtrr.c    |  6 +-----
 arch/x86/kernel/cpu/mtrr/mtrr.h    |  1 -
 3 files changed, 1 insertion(+), 20 deletions(-)

diff --git a/arch/x86/kernel/cpu/mtrr/generic.c b/arch/x86/kernel/cpu/mtrr/generic.c
index af8422c96b92..2f2485d6657f 100644
--- a/arch/x86/kernel/cpu/mtrr/generic.c
+++ b/arch/x86/kernel/cpu/mtrr/generic.c
@@ -442,20 +442,6 @@ static void __init print_mtrr_state(void)
 		pr_debug("TOM2: %016llx aka %lldM\n", mtrr_tom2, mtrr_tom2>>20);
 }
 
-/* PAT setup for BP. We need to go through sync steps here */
-void __init mtrr_bp_pat_init(void)
-{
-	unsigned long flags;
-
-	local_irq_save(flags);
-	cache_disable();
-
-	pat_init();
-
-	cache_enable();
-	local_irq_restore(flags);
-}
-
 /* Grab all of the MTRR state for this CPU into *state */
 bool __init get_mtrr_state(void)
 {
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.c b/arch/x86/kernel/cpu/mtrr/mtrr.c
index a44b510ced0e..a468be5d778f 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.c
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.c
@@ -764,12 +764,8 @@ void __init mtrr_bp_init(void)
 			__mtrr_enabled = get_mtrr_state();
 
 			if (mtrr_enabled()) {
-				mtrr_bp_pat_init();
 				memory_caching_control |= CACHE_MTRR | CACHE_PAT;
-			}
-
-			if (mtrr_cleanup(phys_addr)) {
-				changed_by_mtrr_cleanup = 1;
+				changed_by_mtrr_cleanup = mtrr_cleanup(phys_addr);
 				cache_cpu_init();
 			}
 		}
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.h b/arch/x86/kernel/cpu/mtrr/mtrr.h
index 3b1883185185..c98928ceee6a 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.h
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.h
@@ -50,7 +50,6 @@ void set_mtrr_prepare_save(struct set_mtrr_context *ctxt);
 void fill_mtrr_var_range(unsigned int index,
 		u32 base_lo, u32 base_hi, u32 mask_lo, u32 mask_hi);
 bool get_mtrr_state(void);
-void mtrr_bp_pat_init(void);
 
 extern void __init set_mtrr_ops(const struct mtrr_ops *ops);
 
-- 
2.35.3


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 50F8BC4332F
	for <linux-kernel@archiver.kernel.org>; Wed,  2 Nov 2022 07:48:42 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230503AbiKBHsj (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 2 Nov 2022 03:48:39 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:59158 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230464AbiKBHsO (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 2 Nov 2022 03:48:14 -0400
Received: from smtp-out2.suse.de (smtp-out2.suse.de [195.135.220.29])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 850F62715C
        for <linux-kernel@vger.kernel.org>; Wed,  2 Nov 2022 00:48:13 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out2.suse.de (Postfix) with ESMTPS id 464841F90F;
        Wed,  2 Nov 2022 07:48:12 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1667375292; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=Ux8/e9Woh3s8p0UvLOFok/6CxUvIyieZjB6VEj7G4a8=;
        b=BIorFGSD6wNJyIneTrGhMbM4cpdb9OTImr4C9otIkeQZVL7lnzgyvPA8CsLuyN0l2YqmHM
        nGYCHKnnM3D3c6q7keXpI43++4UBPl2PSwnPM4alZ0kEpqRScZt9i0vYpgGtp4GVwvzrRf
        5O76h1edklbFA2nKkv0ZVGlxJwBCvKM=
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id 071DA1376E;
        Wed,  2 Nov 2022 07:48:12 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id Cb9oALwgYmP/cgAAMHmgww
        (envelope-from <jgross@suse.com>); Wed, 02 Nov 2022 07:48:12 +0000
From:   Juergen Gross <jgross@suse.com>
To:     linux-kernel@vger.kernel.org, x86@kernel.org
Cc:     Juergen Gross <jgross@suse.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>
Subject: [PATCH v5 10/16] x86/mtrr: get rid of __mtrr_enabled bool
Date:   Wed,  2 Nov 2022 08:47:07 +0100
Message-Id: <20221102074713.21493-11-jgross@suse.com>
X-Mailer: git-send-email 2.35.3
In-Reply-To: <20221102074713.21493-1-jgross@suse.com>
References: <20221102074713.21493-1-jgross@suse.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

There is no need for keeping __mtrr_enabled, as it can easily be
replaced by testing mtrr_if to be not NULL.

Signed-off-by: Juergen Gross <jgross@suse.com>
---
V4:
- new patch
V5:
- rebase
---
 arch/x86/kernel/cpu/mtrr/mtrr.c | 13 +++++--------
 1 file changed, 5 insertions(+), 8 deletions(-)

diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.c b/arch/x86/kernel/cpu/mtrr/mtrr.c
index a468be5d778f..f671be9823b6 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.c
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.c
@@ -59,11 +59,9 @@
 #define MTRR_TO_PHYS_WC_OFFSET 1000
 
 u32 num_var_ranges;
-static bool __mtrr_enabled;
-
 static bool mtrr_enabled(void)
 {
-	return __mtrr_enabled;
+	return !!mtrr_if;
 }
 
 unsigned int mtrr_usage_table[MTRR_MAX_VAR_RANGES];
@@ -755,18 +753,17 @@ void __init mtrr_bp_init(void)
 		}
 	}
 
-	if (mtrr_if) {
-		__mtrr_enabled = true;
+	if (mtrr_enabled()) {
 		set_num_var_ranges(mtrr_if == &generic_mtrr_ops);
 		init_table();
 		if (mtrr_if == &generic_mtrr_ops) {
 			/* BIOS may override */
-			__mtrr_enabled = get_mtrr_state();
-
-			if (mtrr_enabled()) {
+			if (get_mtrr_state()) {
 				memory_caching_control |= CACHE_MTRR | CACHE_PAT;
 				changed_by_mtrr_cleanup = mtrr_cleanup(phys_addr);
 				cache_cpu_init();
+			} else {
+				mtrr_if = NULL;
 			}
 		}
 	}
-- 
2.35.3


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 2E2B6C4332F
	for <linux-kernel@archiver.kernel.org>; Wed,  2 Nov 2022 07:48:47 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230527AbiKBHsp (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 2 Nov 2022 03:48:45 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:59378 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230492AbiKBHsU (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 2 Nov 2022 03:48:20 -0400
Received: from smtp-out1.suse.de (smtp-out1.suse.de [195.135.220.28])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 4C3AE25E83
        for <linux-kernel@vger.kernel.org>; Wed,  2 Nov 2022 00:48:19 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out1.suse.de (Postfix) with ESMTPS id E8F763373A;
        Wed,  2 Nov 2022 07:48:17 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1667375297; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=Lov3KMbpEv8g7a+8daqNFwrPW1J1X3RgaiyGShrBdqQ=;
        b=EwIcdofAfJvCRkRZfEZ5/66EjiOF2unOYKBvHC6JnghEcPWy8/uaFXj1bS3AwK2PYKTaB9
        KG4/Rfcd2UIa2c4wJV9VFGrreUVjH01W/ChLDUeA1qPItEVgvRE+WgGHVogsXIwln/WbP+
        Ex/lxTQ9usFrIvpDGIGahBhBDyBg4F8=
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id AAF8D1376E;
        Wed,  2 Nov 2022 07:48:17 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id XoRcKMEgYmMNcwAAMHmgww
        (envelope-from <jgross@suse.com>); Wed, 02 Nov 2022 07:48:17 +0000
From:   Juergen Gross <jgross@suse.com>
To:     linux-kernel@vger.kernel.org, x86@kernel.org
Cc:     Juergen Gross <jgross@suse.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>
Subject: [PATCH v5 11/16] x86/mtrr: let cache_aps_delayed_init replace mtrr_aps_delayed_init
Date:   Wed,  2 Nov 2022 08:47:08 +0100
Message-Id: <20221102074713.21493-12-jgross@suse.com>
X-Mailer: git-send-email 2.35.3
In-Reply-To: <20221102074713.21493-1-jgross@suse.com>
References: <20221102074713.21493-1-jgross@suse.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

In order to prepare decoupling MTRR and PAT replace the MTRR specific
mtrr_aps_delayed_init flag with a more generic cache_aps_delayed_init
one.

Signed-off-by: Juergen Gross <jgross@suse.com>
---
V2:
- new patch
V4:
- reestablish function to set cache_aps_delayed_init (Borislav Petkov)
V5:
- make cache_aps_delayed_init static, add get accessor (Borislav Petkov)
---
 arch/x86/include/asm/cacheinfo.h |  2 ++
 arch/x86/include/asm/mtrr.h      |  2 --
 arch/x86/kernel/cpu/cacheinfo.c  | 12 ++++++++++++
 arch/x86/kernel/cpu/mtrr/mtrr.c  | 18 +++++-------------
 arch/x86/kernel/smpboot.c        |  5 +++--
 5 files changed, 22 insertions(+), 17 deletions(-)

diff --git a/arch/x86/include/asm/cacheinfo.h b/arch/x86/include/asm/cacheinfo.h
index 978bac70fd49..e443fcc1f045 100644
--- a/arch/x86/include/asm/cacheinfo.h
+++ b/arch/x86/include/asm/cacheinfo.h
@@ -13,5 +13,7 @@ void cacheinfo_hygon_init_llc_id(struct cpuinfo_x86 *c, int cpu);
 void cache_disable(void);
 void cache_enable(void);
 void cache_cpu_init(void);
+void set_cache_aps_delayed_init(bool val);
+bool get_cache_aps_delayed_init(void);
 
 #endif /* _ASM_X86_CACHEINFO_H */
diff --git a/arch/x86/include/asm/mtrr.h b/arch/x86/include/asm/mtrr.h
index 986249a2b9b6..5d31219c8529 100644
--- a/arch/x86/include/asm/mtrr.h
+++ b/arch/x86/include/asm/mtrr.h
@@ -43,7 +43,6 @@ extern int mtrr_del(int reg, unsigned long base, unsigned long size);
 extern int mtrr_del_page(int reg, unsigned long base, unsigned long size);
 extern void mtrr_centaur_report_mcr(int mcr, u32 lo, u32 hi);
 extern void mtrr_ap_init(void);
-extern void set_mtrr_aps_delayed_init(void);
 extern void mtrr_aps_init(void);
 extern void mtrr_bp_restore(void);
 extern int mtrr_trim_uncached_memory(unsigned long end_pfn);
@@ -87,7 +86,6 @@ static inline void mtrr_centaur_report_mcr(int mcr, u32 lo, u32 hi)
 {
 }
 #define mtrr_ap_init() do {} while (0)
-#define set_mtrr_aps_delayed_init() do {} while (0)
 #define mtrr_aps_init() do {} while (0)
 #define mtrr_bp_restore() do {} while (0)
 #define mtrr_disable() do {} while (0)
diff --git a/arch/x86/kernel/cpu/cacheinfo.c b/arch/x86/kernel/cpu/cacheinfo.c
index 81ab99fe92bd..931ba3fb1363 100644
--- a/arch/x86/kernel/cpu/cacheinfo.c
+++ b/arch/x86/kernel/cpu/cacheinfo.c
@@ -1137,3 +1137,15 @@ void cache_cpu_init(void)
 	cache_enable();
 	local_irq_restore(flags);
 }
+
+static bool cache_aps_delayed_init;
+
+void set_cache_aps_delayed_init(bool val)
+{
+	cache_aps_delayed_init = val;
+}
+
+bool get_cache_aps_delayed_init(void)
+{
+	return cache_aps_delayed_init;
+}
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.c b/arch/x86/kernel/cpu/mtrr/mtrr.c
index f671be9823b6..15ee6d72fb1f 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.c
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.c
@@ -68,7 +68,6 @@ unsigned int mtrr_usage_table[MTRR_MAX_VAR_RANGES];
 static DEFINE_MUTEX(mtrr_mutex);
 
 u64 size_or_mask, size_and_mask;
-static bool mtrr_aps_delayed_init;
 
 static const struct mtrr_ops *mtrr_ops[X86_VENDOR_NUM] __ro_after_init;
 
@@ -175,7 +174,8 @@ static int mtrr_rendezvous_handler(void *info)
 	if (data->smp_reg != ~0U) {
 		mtrr_if->set(data->smp_reg, data->smp_base,
 			     data->smp_size, data->smp_type);
-	} else if (mtrr_aps_delayed_init || !cpu_online(smp_processor_id())) {
+	} else if (get_cache_aps_delayed_init() ||
+		   !cpu_online(smp_processor_id())) {
 		cache_cpu_init();
 	}
 	return 0;
@@ -782,7 +782,7 @@ void __init mtrr_bp_init(void)
 
 void mtrr_ap_init(void)
 {
-	if (!memory_caching_control || mtrr_aps_delayed_init)
+	if (!memory_caching_control || get_cache_aps_delayed_init())
 		return;
 
 	/*
@@ -816,14 +816,6 @@ void mtrr_save_state(void)
 	smp_call_function_single(first_cpu, mtrr_save_fixed_ranges, NULL, 1);
 }
 
-void set_mtrr_aps_delayed_init(void)
-{
-	if (!memory_caching_control)
-		return;
-
-	mtrr_aps_delayed_init = true;
-}
-
 /*
  * Delayed MTRR initialization for all AP's
  */
@@ -837,11 +829,11 @@ void mtrr_aps_init(void)
 	 * by doing set_mtrr_aps_delayed_init(), prior to this point. If not,
 	 * then we are done.
 	 */
-	if (!mtrr_aps_delayed_init)
+	if (!get_cache_aps_delayed_init())
 		return;
 
 	set_mtrr(~0U, 0, 0, 0);
-	mtrr_aps_delayed_init = false;
+	set_cache_aps_delayed_init(false);
 }
 
 void mtrr_bp_restore(void)
diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c
index 3f3ea0287f69..13c71ab29d84 100644
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@ -58,6 +58,7 @@
 #include <linux/overflow.h>
 
 #include <asm/acpi.h>
+#include <asm/cacheinfo.h>
 #include <asm/desc.h>
 #include <asm/nmi.h>
 #include <asm/irq.h>
@@ -1428,7 +1429,7 @@ void __init native_smp_prepare_cpus(unsigned int max_cpus)
 
 	uv_system_init();
 
-	set_mtrr_aps_delayed_init();
+	set_cache_aps_delayed_init(true);
 
 	smp_quirk_init_udelay();
 
@@ -1439,7 +1440,7 @@ void __init native_smp_prepare_cpus(unsigned int max_cpus)
 
 void arch_thaw_secondary_cpus_begin(void)
 {
-	set_mtrr_aps_delayed_init();
+	set_cache_aps_delayed_init(true);
 }
 
 void arch_thaw_secondary_cpus_end(void)
-- 
2.35.3


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 2B528C4332F
	for <linux-kernel@archiver.kernel.org>; Wed,  2 Nov 2022 07:48:52 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S231153AbiKBHsu (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 2 Nov 2022 03:48:50 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:59294 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230457AbiKBHs0 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 2 Nov 2022 03:48:26 -0400
Received: from smtp-out1.suse.de (smtp-out1.suse.de [IPv6:2001:67c:2178:6::1c])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 0727D23151;
        Wed,  2 Nov 2022 00:48:25 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out1.suse.de (Postfix) with ESMTPS id B4911338F3;
        Wed,  2 Nov 2022 07:48:23 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1667375303; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=jL+jY4ifaFqfpcISKGZk1rhvt1fSpsik0OwYqcIWnDU=;
        b=o+9eFEVP6b4Wpu8d2ZEF86V7aJi7ksBB8opTSYJWk92vj2p0mdcQg7ftFxHN+iF084KvFf
        mktWJ1eohNgQGinzYPOjMJ0sk4WcrmY7d7mq0TFyVu4nERDT6uKaf4renJa0W4gn6rTlEe
        HALPPd5OWaZyCVJxXr4axfn7iNhzHD4=
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id 5ED901376E;
        Wed,  2 Nov 2022 07:48:23 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id JprbFccgYmMkcwAAMHmgww
        (envelope-from <jgross@suse.com>); Wed, 02 Nov 2022 07:48:23 +0000
From:   Juergen Gross <jgross@suse.com>
To:     linux-kernel@vger.kernel.org, x86@kernel.org,
        linux-pm@vger.kernel.org
Cc:     Juergen Gross <jgross@suse.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>,
        "Rafael J. Wysocki" <rafael@kernel.org>,
        Pavel Machek <pavel@ucw.cz>
Subject: [PATCH v5 12/16] x86/mtrr: add a stop_machine() handler calling only cache_cpu_init()
Date:   Wed,  2 Nov 2022 08:47:09 +0100
Message-Id: <20221102074713.21493-13-jgross@suse.com>
X-Mailer: git-send-email 2.35.3
In-Reply-To: <20221102074713.21493-1-jgross@suse.com>
References: <20221102074713.21493-1-jgross@suse.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Instead of having a stop_machine() handler for either a specific MTRR
register or all state at once, add a handler just for calling
cache_cpu_init() if appropriate.

Add functions for calling stop_machine() with this handler as well.

Add a generic replacement for mtrr_bp_restore() and a wrapper for
mtrr_bp_init().

Signed-off-by: Juergen Gross <jgross@suse.com>
---
V2:
- completely new replacement of former patch 2
V5:
- add a missing mtrr_bp_init() stub (Borislav Petkov)
---
 arch/x86/include/asm/cacheinfo.h |  5 +-
 arch/x86/include/asm/mtrr.h      |  8 +--
 arch/x86/kernel/cpu/cacheinfo.c  | 59 ++++++++++++++++++++-
 arch/x86/kernel/cpu/common.c     |  3 +-
 arch/x86/kernel/cpu/mtrr/mtrr.c  | 88 +-------------------------------
 arch/x86/kernel/setup.c          |  3 +-
 arch/x86/kernel/smpboot.c        |  4 +-
 arch/x86/power/cpu.c             |  3 +-
 8 files changed, 74 insertions(+), 99 deletions(-)

diff --git a/arch/x86/include/asm/cacheinfo.h b/arch/x86/include/asm/cacheinfo.h
index e443fcc1f045..a0ef46e9f453 100644
--- a/arch/x86/include/asm/cacheinfo.h
+++ b/arch/x86/include/asm/cacheinfo.h
@@ -12,8 +12,11 @@ void cacheinfo_hygon_init_llc_id(struct cpuinfo_x86 *c, int cpu);
 
 void cache_disable(void);
 void cache_enable(void);
-void cache_cpu_init(void);
 void set_cache_aps_delayed_init(bool val);
 bool get_cache_aps_delayed_init(void);
+void cache_bp_init(void);
+void cache_bp_restore(void);
+void cache_ap_init(void);
+void cache_aps_init(void);
 
 #endif /* _ASM_X86_CACHEINFO_H */
diff --git a/arch/x86/include/asm/mtrr.h b/arch/x86/include/asm/mtrr.h
index 5d31219c8529..f0eeaf6e5f5f 100644
--- a/arch/x86/include/asm/mtrr.h
+++ b/arch/x86/include/asm/mtrr.h
@@ -25,13 +25,12 @@
 
 #include <uapi/asm/mtrr.h>
 
-void mtrr_bp_init(void);
-
 /*
  * The following functions are for use by other drivers that cannot use
  * arch_phys_wc_add and arch_phys_wc_del.
  */
 # ifdef CONFIG_MTRR
+void mtrr_bp_init(void);
 extern u8 mtrr_type_lookup(u64 addr, u64 end, u8 *uniform);
 extern void mtrr_save_fixed_ranges(void *);
 extern void mtrr_save_state(void);
@@ -42,8 +41,6 @@ extern int mtrr_add_page(unsigned long base, unsigned long size,
 extern int mtrr_del(int reg, unsigned long base, unsigned long size);
 extern int mtrr_del_page(int reg, unsigned long base, unsigned long size);
 extern void mtrr_centaur_report_mcr(int mcr, u32 lo, u32 hi);
-extern void mtrr_ap_init(void);
-extern void mtrr_aps_init(void);
 extern void mtrr_bp_restore(void);
 extern int mtrr_trim_uncached_memory(unsigned long end_pfn);
 extern int amd_special_default_mtrr(void);
@@ -85,8 +82,7 @@ static inline int mtrr_trim_uncached_memory(unsigned long end_pfn)
 static inline void mtrr_centaur_report_mcr(int mcr, u32 lo, u32 hi)
 {
 }
-#define mtrr_ap_init() do {} while (0)
-#define mtrr_aps_init() do {} while (0)
+#define mtrr_bp_init() do {} while (0)
 #define mtrr_bp_restore() do {} while (0)
 #define mtrr_disable() do {} while (0)
 #define mtrr_enable() do {} while (0)
diff --git a/arch/x86/kernel/cpu/cacheinfo.c b/arch/x86/kernel/cpu/cacheinfo.c
index 931ba3fb1363..a92099569617 100644
--- a/arch/x86/kernel/cpu/cacheinfo.c
+++ b/arch/x86/kernel/cpu/cacheinfo.c
@@ -15,6 +15,7 @@
 #include <linux/capability.h>
 #include <linux/sysfs.h>
 #include <linux/pci.h>
+#include <linux/stop_machine.h>
 
 #include <asm/cpufeature.h>
 #include <asm/cacheinfo.h>
@@ -1121,7 +1122,7 @@ void cache_enable(void) __releases(cache_disable_lock)
 	raw_spin_unlock(&cache_disable_lock);
 }
 
-void cache_cpu_init(void)
+static void cache_cpu_init(void)
 {
 	unsigned long flags;
 
@@ -1149,3 +1150,59 @@ bool get_cache_aps_delayed_init(void)
 {
 	return cache_aps_delayed_init;
 }
+
+static int cache_rendezvous_handler(void *unused)
+{
+	if (get_cache_aps_delayed_init() || !cpu_online(smp_processor_id()))
+		cache_cpu_init();
+
+	return 0;
+}
+
+void __init cache_bp_init(void)
+{
+	mtrr_bp_init();
+
+	if (memory_caching_control)
+		cache_cpu_init();
+}
+
+void cache_bp_restore(void)
+{
+	if (memory_caching_control)
+		cache_cpu_init();
+}
+
+void cache_ap_init(void)
+{
+	if (!memory_caching_control || get_cache_aps_delayed_init())
+		return;
+
+	/*
+	 * Ideally we should hold mtrr_mutex here to avoid MTRR entries
+	 * changed, but this routine will be called in CPU boot time,
+	 * holding the lock breaks it.
+	 *
+	 * This routine is called in two cases:
+	 *
+	 *   1. very early time of software resume, when there absolutely
+	 *      isn't MTRR entry changes;
+	 *
+	 *   2. CPU hotadd time. We let mtrr_add/del_page hold cpuhotplug
+	 *      lock to prevent MTRR entry changes
+	 */
+	stop_machine_from_inactive_cpu(cache_rendezvous_handler, NULL,
+				       cpu_callout_mask);
+}
+
+/*
+ * Delayed cache initialization for all AP's
+ */
+void cache_aps_init(void)
+{
+	if (!memory_caching_control || !get_cache_aps_delayed_init())
+		return;
+
+	stop_machine(cache_rendezvous_handler, NULL, cpu_online_mask);
+	set_cache_aps_delayed_init(false);
+}
diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c
index 3e508f239098..fd058b547f8d 100644
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@ -52,6 +52,7 @@
 #include <asm/cpu.h>
 #include <asm/mce.h>
 #include <asm/msr.h>
+#include <asm/cacheinfo.h>
 #include <asm/memtype.h>
 #include <asm/microcode.h>
 #include <asm/microcode_intel.h>
@@ -1948,7 +1949,7 @@ void identify_secondary_cpu(struct cpuinfo_x86 *c)
 #ifdef CONFIG_X86_32
 	enable_sep_cpu();
 #endif
-	mtrr_ap_init();
+	cache_ap_init();
 	validate_apic_and_package_id(c);
 	x86_spec_ctrl_setup_ap();
 	update_srbds_msr();
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.c b/arch/x86/kernel/cpu/mtrr/mtrr.c
index 15ee6d72fb1f..99b6973a69b4 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.c
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.c
@@ -73,9 +73,6 @@ static const struct mtrr_ops *mtrr_ops[X86_VENDOR_NUM] __ro_after_init;
 
 const struct mtrr_ops *mtrr_if;
 
-static void set_mtrr(unsigned int reg, unsigned long base,
-		     unsigned long size, mtrr_type type);
-
 void __init set_mtrr_ops(const struct mtrr_ops *ops)
 {
 	if (ops->vendor && ops->vendor < X86_VENDOR_NUM)
@@ -158,26 +155,8 @@ static int mtrr_rendezvous_handler(void *info)
 {
 	struct set_mtrr_data *data = info;
 
-	/*
-	 * We use this same function to initialize the mtrrs during boot,
-	 * resume, runtime cpu online and on an explicit request to set a
-	 * specific MTRR.
-	 *
-	 * During boot or suspend, the state of the boot cpu's mtrrs has been
-	 * saved, and we want to replicate that across all the cpus that come
-	 * online (either at the end of boot or resume or during a runtime cpu
-	 * online). If we're doing that, @reg is set to something special and on
-	 * all the CPUs we do cache_cpu_init() (On the logical CPU that
-	 * started the boot/resume sequence, this might be a duplicate
-	 * cache_cpu_init()).
-	 */
-	if (data->smp_reg != ~0U) {
-		mtrr_if->set(data->smp_reg, data->smp_base,
-			     data->smp_size, data->smp_type);
-	} else if (get_cache_aps_delayed_init() ||
-		   !cpu_online(smp_processor_id())) {
-		cache_cpu_init();
-	}
+	mtrr_if->set(data->smp_reg, data->smp_base,
+		     data->smp_size, data->smp_type);
 	return 0;
 }
 
@@ -247,19 +226,6 @@ static void set_mtrr_cpuslocked(unsigned int reg, unsigned long base,
 	stop_machine_cpuslocked(mtrr_rendezvous_handler, &data, cpu_online_mask);
 }
 
-static void set_mtrr_from_inactive_cpu(unsigned int reg, unsigned long base,
-				      unsigned long size, mtrr_type type)
-{
-	struct set_mtrr_data data = { .smp_reg = reg,
-				      .smp_base = base,
-				      .smp_size = size,
-				      .smp_type = type
-				    };
-
-	stop_machine_from_inactive_cpu(mtrr_rendezvous_handler, &data,
-				       cpu_callout_mask);
-}
-
 /**
  * mtrr_add_page - Add a memory type region
  * @base: Physical base address of region in pages (in units of 4 kB!)
@@ -761,7 +727,6 @@ void __init mtrr_bp_init(void)
 			if (get_mtrr_state()) {
 				memory_caching_control |= CACHE_MTRR | CACHE_PAT;
 				changed_by_mtrr_cleanup = mtrr_cleanup(phys_addr);
-				cache_cpu_init();
 			} else {
 				mtrr_if = NULL;
 			}
@@ -780,27 +745,6 @@ void __init mtrr_bp_init(void)
 	}
 }
 
-void mtrr_ap_init(void)
-{
-	if (!memory_caching_control || get_cache_aps_delayed_init())
-		return;
-
-	/*
-	 * Ideally we should hold mtrr_mutex here to avoid mtrr entries
-	 * changed, but this routine will be called in cpu boot time,
-	 * holding the lock breaks it.
-	 *
-	 * This routine is called in two cases:
-	 *
-	 *   1. very early time of software resume, when there absolutely
-	 *      isn't mtrr entry changes;
-	 *
-	 *   2. cpu hotadd time. We let mtrr_add/del_page hold cpuhotplug
-	 *      lock to prevent mtrr entry changes
-	 */
-	set_mtrr_from_inactive_cpu(~0U, 0, 0, 0);
-}
-
 /**
  * mtrr_save_state - Save current fixed-range MTRR state of the first
  *	cpu in cpu_online_mask.
@@ -816,34 +760,6 @@ void mtrr_save_state(void)
 	smp_call_function_single(first_cpu, mtrr_save_fixed_ranges, NULL, 1);
 }
 
-/*
- * Delayed MTRR initialization for all AP's
- */
-void mtrr_aps_init(void)
-{
-	if (!memory_caching_control)
-		return;
-
-	/*
-	 * Check if someone has requested the delay of AP MTRR initialization,
-	 * by doing set_mtrr_aps_delayed_init(), prior to this point. If not,
-	 * then we are done.
-	 */
-	if (!get_cache_aps_delayed_init())
-		return;
-
-	set_mtrr(~0U, 0, 0, 0);
-	set_cache_aps_delayed_init(false);
-}
-
-void mtrr_bp_restore(void)
-{
-	if (!memory_caching_control)
-		return;
-
-	cache_cpu_init();
-}
-
 static int __init mtrr_init_finialize(void)
 {
 	if (!mtrr_enabled())
diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c
index 216fee7144ee..e0e185ee0229 100644
--- a/arch/x86/kernel/setup.c
+++ b/arch/x86/kernel/setup.c
@@ -34,6 +34,7 @@
 #include <asm/numa.h>
 #include <asm/bios_ebda.h>
 #include <asm/bugs.h>
+#include <asm/cacheinfo.h>
 #include <asm/cpu.h>
 #include <asm/efi.h>
 #include <asm/gart.h>
@@ -1075,7 +1076,7 @@ void __init setup_arch(char **cmdline_p)
 
 	/* update e820 for memory not covered by WB MTRRs */
 	if (IS_ENABLED(CONFIG_MTRR))
-		mtrr_bp_init();
+		cache_bp_init();
 	else
 		pat_disable("PAT support disabled because CONFIG_MTRR is disabled in the kernel.");
 
diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c
index 13c71ab29d84..1b61a480c966 100644
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@ -1445,7 +1445,7 @@ void arch_thaw_secondary_cpus_begin(void)
 
 void arch_thaw_secondary_cpus_end(void)
 {
-	mtrr_aps_init();
+	cache_aps_init();
 }
 
 /*
@@ -1488,7 +1488,7 @@ void __init native_smp_cpus_done(unsigned int max_cpus)
 
 	nmi_selftest();
 	impress_friends();
-	mtrr_aps_init();
+	cache_aps_init();
 }
 
 static int __initdata setup_possible_cpus = -1;
diff --git a/arch/x86/power/cpu.c b/arch/x86/power/cpu.c
index bb176c72891c..754221c9a1c3 100644
--- a/arch/x86/power/cpu.c
+++ b/arch/x86/power/cpu.c
@@ -23,6 +23,7 @@
 #include <asm/fpu/api.h>
 #include <asm/debugreg.h>
 #include <asm/cpu.h>
+#include <asm/cacheinfo.h>
 #include <asm/mmu_context.h>
 #include <asm/cpu_device_id.h>
 #include <asm/microcode.h>
@@ -261,7 +262,7 @@ static void notrace __restore_processor_state(struct saved_context *ctxt)
 	do_fpu_end();
 	tsc_verify_tsc_adjust(true);
 	x86_platform.restore_sched_clock_state();
-	mtrr_bp_restore();
+	cache_bp_restore();
 	perf_restore_debug_store();
 
 	c = &cpu_data(smp_processor_id());
-- 
2.35.3


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 618EEC4332F
	for <linux-kernel@archiver.kernel.org>; Wed,  2 Nov 2022 07:49:07 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230366AbiKBHtE (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 2 Nov 2022 03:49:04 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:59698 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230489AbiKBHsc (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 2 Nov 2022 03:48:32 -0400
Received: from smtp-out2.suse.de (smtp-out2.suse.de [195.135.220.29])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id AB3A32612B
        for <linux-kernel@vger.kernel.org>; Wed,  2 Nov 2022 00:48:30 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out2.suse.de (Postfix) with ESMTPS id 6A0B91F8B0;
        Wed,  2 Nov 2022 07:48:29 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1667375309; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=R10C4rCtq1ivY+IhxBh2ebzergfYAXSfqeTMWrGpHUU=;
        b=qZQZ0JcdkHpjwpSv3z1bF5ehq6gHqILX5N8Vbq8iXlMOAa+LIawMaBw6ksJlv/nGRZE22P
        FSE+oowEBloJhkwhaad3tO4V18zCI1uRxrvU73huJqz7+a3Lt1hvwcWhV6F7wy2FzyH+Xw
        sp3IHVCmEwTHpuzXZU4CI7aZbv5DiGY=
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id 224DE1376E;
        Wed,  2 Nov 2022 07:48:29 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id /UczB80gYmM3cwAAMHmgww
        (envelope-from <jgross@suse.com>); Wed, 02 Nov 2022 07:48:29 +0000
From:   Juergen Gross <jgross@suse.com>
To:     linux-kernel@vger.kernel.org, x86@kernel.org
Cc:     Juergen Gross <jgross@suse.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>,
        Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>
Subject: [PATCH v5 13/16] x86: decouple PAT and MTRR handling
Date:   Wed,  2 Nov 2022 08:47:10 +0100
Message-Id: <20221102074713.21493-14-jgross@suse.com>
X-Mailer: git-send-email 2.35.3
In-Reply-To: <20221102074713.21493-1-jgross@suse.com>
References: <20221102074713.21493-1-jgross@suse.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Today PAT is usable only with MTRR being active, with some nasty tweaks
to make PAT usable when running as Xen PV guest, which doesn't support
MTRR.

The reason for this coupling is, that both, PAT MSR changes and MTRR
changes, require a similar sequence and so full PAT support was added
using the already available MTRR handling.

Xen PV PAT handling can work without MTRR, as it just needs to consume
the PAT MSR setting done by the hypervisor without the ability and need
to change it. This in turn has resulted in a convoluted initialization
sequence and wrong decisions regarding cache mode availability due to
misguiding PAT availability flags.

Fix all of that by allowing to use PAT without MTRR and by reworking
the current PAT initialization sequence to match better with the newly
introduced generic cache initialization.

This removes the need of the recently added pat_force_disabled flag, so
remove the remnants of the patch adding it.

Signed-off-by: Juergen Gross <jgross@suse.com>
---
V2:
- former patch 3 completely reworked
V5:
- rework PAT() macro
- drop local pat variable (Borislav Petkov)
- use cpu_feature_enabled() (Borislav Petkov)
- some more minor adjustments (Borislav Petkov)
---
 arch/x86/include/asm/memtype.h  |   5 +-
 arch/x86/kernel/cpu/cacheinfo.c |   3 +-
 arch/x86/kernel/cpu/mtrr/mtrr.c |  12 +--
 arch/x86/kernel/setup.c         |  13 +--
 arch/x86/mm/pat/memtype.c       | 152 +++++++++++---------------------
 5 files changed, 57 insertions(+), 128 deletions(-)

diff --git a/arch/x86/include/asm/memtype.h b/arch/x86/include/asm/memtype.h
index 9ca760e430b9..113b2fa51849 100644
--- a/arch/x86/include/asm/memtype.h
+++ b/arch/x86/include/asm/memtype.h
@@ -6,9 +6,8 @@
 #include <asm/pgtable_types.h>
 
 extern bool pat_enabled(void);
-extern void pat_disable(const char *reason);
-extern void pat_init(void);
-extern void init_cache_modes(void);
+extern void pat_bp_init(void);
+extern void pat_cpu_init(void);
 
 extern int memtype_reserve(u64 start, u64 end,
 		enum page_cache_mode req_pcm, enum page_cache_mode *ret_pcm);
diff --git a/arch/x86/kernel/cpu/cacheinfo.c b/arch/x86/kernel/cpu/cacheinfo.c
index a92099569617..1aaf830254df 100644
--- a/arch/x86/kernel/cpu/cacheinfo.c
+++ b/arch/x86/kernel/cpu/cacheinfo.c
@@ -1133,7 +1133,7 @@ static void cache_cpu_init(void)
 		mtrr_generic_set_state();
 
 	if (memory_caching_control & CACHE_PAT)
-		pat_init();
+		pat_cpu_init();
 
 	cache_enable();
 	local_irq_restore(flags);
@@ -1162,6 +1162,7 @@ static int cache_rendezvous_handler(void *unused)
 void __init cache_bp_init(void)
 {
 	mtrr_bp_init();
+	pat_bp_init();
 
 	if (memory_caching_control)
 		cache_cpu_init();
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.c b/arch/x86/kernel/cpu/mtrr/mtrr.c
index 99b6973a69b4..8403daf34158 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.c
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.c
@@ -725,7 +725,7 @@ void __init mtrr_bp_init(void)
 		if (mtrr_if == &generic_mtrr_ops) {
 			/* BIOS may override */
 			if (get_mtrr_state()) {
-				memory_caching_control |= CACHE_MTRR | CACHE_PAT;
+				memory_caching_control |= CACHE_MTRR;
 				changed_by_mtrr_cleanup = mtrr_cleanup(phys_addr);
 			} else {
 				mtrr_if = NULL;
@@ -733,16 +733,8 @@ void __init mtrr_bp_init(void)
 		}
 	}
 
-	if (!mtrr_enabled()) {
+	if (!mtrr_enabled())
 		pr_info("Disabled\n");
-
-		/*
-		 * PAT initialization relies on MTRR's rendezvous handler.
-		 * Skip PAT init until the handler can initialize both
-		 * features independently.
-		 */
-		pat_disable("MTRRs disabled, skipping PAT initialization too.");
-	}
 }
 
 /**
diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c
index e0e185ee0229..aacaa96f0195 100644
--- a/arch/x86/kernel/setup.c
+++ b/arch/x86/kernel/setup.c
@@ -1075,23 +1075,12 @@ void __init setup_arch(char **cmdline_p)
 	max_pfn = e820__end_of_ram_pfn();
 
 	/* update e820 for memory not covered by WB MTRRs */
-	if (IS_ENABLED(CONFIG_MTRR))
-		cache_bp_init();
-	else
-		pat_disable("PAT support disabled because CONFIG_MTRR is disabled in the kernel.");
-
+	cache_bp_init();
 	if (mtrr_trim_uncached_memory(max_pfn))
 		max_pfn = e820__end_of_ram_pfn();
 
 	max_possible_pfn = max_pfn;
 
-	/*
-	 * This call is required when the CPU does not support PAT. If
-	 * mtrr_bp_init() invoked it already via pat_init() the call has no
-	 * effect.
-	 */
-	init_cache_modes();
-
 	/*
 	 * Define random base addresses for memory sections after max_pfn is
 	 * defined and before each memory section base is used.
diff --git a/arch/x86/mm/pat/memtype.c b/arch/x86/mm/pat/memtype.c
index 66a209f7eb86..9aab17d660cd 100644
--- a/arch/x86/mm/pat/memtype.c
+++ b/arch/x86/mm/pat/memtype.c
@@ -43,6 +43,7 @@
 #include <linux/rbtree.h>
 
 #include <asm/cacheflush.h>
+#include <asm/cacheinfo.h>
 #include <asm/processor.h>
 #include <asm/tlbflush.h>
 #include <asm/x86_init.h>
@@ -60,41 +61,34 @@
 #undef pr_fmt
 #define pr_fmt(fmt) "" fmt
 
-static bool __read_mostly pat_bp_initialized;
 static bool __read_mostly pat_disabled = !IS_ENABLED(CONFIG_X86_PAT);
-static bool __initdata pat_force_disabled = !IS_ENABLED(CONFIG_X86_PAT);
-static bool __read_mostly pat_bp_enabled;
-static bool __read_mostly pat_cm_initialized;
+static u64 __ro_after_init pat_msr_val;
 
 /*
  * PAT support is enabled by default, but can be disabled for
  * various user-requested or hardware-forced reasons:
  */
-void pat_disable(const char *msg_reason)
+static void __init pat_disable(const char *msg_reason)
 {
 	if (pat_disabled)
 		return;
 
-	if (pat_bp_initialized) {
-		WARN_ONCE(1, "x86/PAT: PAT cannot be disabled after initialization\n");
-		return;
-	}
-
 	pat_disabled = true;
 	pr_info("x86/PAT: %s\n", msg_reason);
+
+	memory_caching_control &= ~CACHE_PAT;
 }
 
 static int __init nopat(char *str)
 {
 	pat_disable("PAT support disabled via boot option.");
-	pat_force_disabled = true;
 	return 0;
 }
 early_param("nopat", nopat);
 
 bool pat_enabled(void)
 {
-	return pat_bp_enabled;
+	return !pat_disabled;
 }
 EXPORT_SYMBOL_GPL(pat_enabled);
 
@@ -192,7 +186,8 @@ enum {
 
 #define CM(c) (_PAGE_CACHE_MODE_ ## c)
 
-static enum page_cache_mode pat_get_cache_mode(unsigned pat_val, char *msg)
+static enum page_cache_mode __init pat_get_cache_mode(unsigned int pat_val,
+						      char *msg)
 {
 	enum page_cache_mode cache;
 	char *cache_mode;
@@ -219,14 +214,12 @@ static enum page_cache_mode pat_get_cache_mode(unsigned pat_val, char *msg)
  * configuration.
  * Using lower indices is preferred, so we start with highest index.
  */
-static void __init_cache_modes(u64 pat)
+static void __init init_cache_modes(u64 pat)
 {
 	enum page_cache_mode cache;
 	char pat_msg[33];
 	int i;
 
-	WARN_ON_ONCE(pat_cm_initialized);
-
 	pat_msg[32] = 0;
 	for (i = 7; i >= 0; i--) {
 		cache = pat_get_cache_mode((pat >> (i * 8)) & 7,
@@ -234,34 +227,9 @@ static void __init_cache_modes(u64 pat)
 		update_cache_mode_entry(i, cache);
 	}
 	pr_info("x86/PAT: Configuration [0-7]: %s\n", pat_msg);
-
-	pat_cm_initialized = true;
 }
 
-#define PAT(x, y)	((u64)PAT_ ## y << ((x)*8))
-
-static void pat_bp_init(u64 pat)
-{
-	u64 tmp_pat;
-
-	if (!boot_cpu_has(X86_FEATURE_PAT)) {
-		pat_disable("PAT not supported by the CPU.");
-		return;
-	}
-
-	rdmsrl(MSR_IA32_CR_PAT, tmp_pat);
-	if (!tmp_pat) {
-		pat_disable("PAT support disabled by the firmware.");
-		return;
-	}
-
-	wrmsrl(MSR_IA32_CR_PAT, pat);
-	pat_bp_enabled = true;
-
-	__init_cache_modes(pat);
-}
-
-static void pat_ap_init(u64 pat)
+void pat_cpu_init(void)
 {
 	if (!boot_cpu_has(X86_FEATURE_PAT)) {
 		/*
@@ -271,30 +239,39 @@ static void pat_ap_init(u64 pat)
 		panic("x86/PAT: PAT enabled, but not supported by secondary CPU\n");
 	}
 
-	wrmsrl(MSR_IA32_CR_PAT, pat);
+	wrmsrl(MSR_IA32_CR_PAT, pat_msr_val);
 }
 
-void __init init_cache_modes(void)
+/**
+ * pat_bp_init - Initialize the PAT MSR value and PAT table
+ *
+ * This function initializes PAT MSR value and PAT table with an OS-defined
+ * value to enable additional cache attributes, WC, WT and WP.
+ *
+ * This function prepares the calls of pat_cpu_init() via cache_cpu_init()
+ * on all CPUs.
+ */
+void __init pat_bp_init(void)
 {
-	u64 pat = 0;
+	struct cpuinfo_x86 *c = &boot_cpu_data;
+#define PAT(p0, p1, p2, p3, p4, p5, p6, p7)			\
+	(((u64)PAT_ ## p0) | ((u64)PAT_ ## p1 << 8) |		\
+	((u64)PAT_ ## p2 << 16) | ((u64)PAT_ ## p3 << 24) |	\
+	((u64)PAT_ ## p4 << 32) | ((u64)PAT_ ## p5 << 40) |	\
+	((u64)PAT_ ## p6 << 48) | ((u64)PAT_ ## p7 << 56))
 
-	if (pat_cm_initialized)
-		return;
 
-	if (boot_cpu_has(X86_FEATURE_PAT)) {
-		/*
-		 * CPU supports PAT. Set PAT table to be consistent with
-		 * PAT MSR. This case supports "nopat" boot option, and
-		 * virtual machine environments which support PAT without
-		 * MTRRs. In specific, Xen has unique setup to PAT MSR.
-		 *
-		 * If PAT MSR returns 0, it is considered invalid and emulates
-		 * as No PAT.
-		 */
-		rdmsrl(MSR_IA32_CR_PAT, pat);
-	}
+	if (!IS_ENABLED(CONFIG_X86_PAT))
+		pr_info_once("x86/PAT: PAT support disabled because CONFIG_X86_PAT is disabled in the kernel.\n");
+
+	if (!cpu_feature_enabled(X86_FEATURE_PAT))
+		pat_disable("PAT not supported by the CPU.");
+	else
+		rdmsrl(MSR_IA32_CR_PAT, pat_msr_val);
+
+	if (!pat_msr_val) {
+		pat_disable("PAT support disabled by the firmware.");
 
-	if (!pat) {
 		/*
 		 * No PAT. Emulate the PAT table that corresponds to the two
 		 * cache bits, PWT (Write Through) and PCD (Cache Disable).
@@ -313,40 +290,17 @@ void __init init_cache_modes(void)
 		 * NOTE: When WC or WP is used, it is redirected to UC- per
 		 * the default setup in __cachemode2pte_tbl[].
 		 */
-		pat = PAT(0, WB) | PAT(1, WT) | PAT(2, UC_MINUS) | PAT(3, UC) |
-		      PAT(4, WB) | PAT(5, WT) | PAT(6, UC_MINUS) | PAT(7, UC);
-	} else if (!pat_force_disabled && cpu_feature_enabled(X86_FEATURE_HYPERVISOR)) {
-		/*
-		 * Clearly PAT is enabled underneath. Allow pat_enabled() to
-		 * reflect this.
-		 */
-		pat_bp_enabled = true;
+		pat_msr_val = PAT(WB, WT, UC_MINUS, UC, WB, WT, UC_MINUS, UC);
 	}
 
-	__init_cache_modes(pat);
-}
-
-/**
- * pat_init - Initialize the PAT MSR and PAT table on the current CPU
- *
- * This function initializes PAT MSR and PAT table with an OS-defined value
- * to enable additional cache attributes, WC, WT and WP.
- *
- * This function must be called on all CPUs using the specific sequence of
- * operations defined in Intel SDM. mtrr_rendezvous_handler() provides this
- * procedure for PAT.
- */
-void pat_init(void)
-{
-	u64 pat;
-	struct cpuinfo_x86 *c = &boot_cpu_data;
-
-#ifndef CONFIG_X86_PAT
-	pr_info_once("x86/PAT: PAT support disabled because CONFIG_X86_PAT is disabled in the kernel.\n");
-#endif
-
-	if (pat_disabled)
+	/*
+	 * Xen PV doesn't allow to set PAT MSR, but all cache modes are
+	 * supported.
+	 */
+	if (pat_disabled || cpu_feature_enabled(X86_FEATURE_XENPV)) {
+		init_cache_modes(pat_msr_val);
 		return;
+	}
 
 	if ((c->x86_vendor == X86_VENDOR_INTEL) &&
 	    (((c->x86 == 0x6) && (c->x86_model <= 0xd)) ||
@@ -371,8 +325,7 @@ void pat_init(void)
 		 * NOTE: When WT or WP is used, it is redirected to UC- per
 		 * the default setup in __cachemode2pte_tbl[].
 		 */
-		pat = PAT(0, WB) | PAT(1, WC) | PAT(2, UC_MINUS) | PAT(3, UC) |
-		      PAT(4, WB) | PAT(5, WC) | PAT(6, UC_MINUS) | PAT(7, UC);
+		pat_msr_val = PAT(WB, WC, UC_MINUS, UC, WB, WC, UC_MINUS, UC);
 	} else {
 		/*
 		 * Full PAT support.  We put WT in slot 7 to improve
@@ -400,19 +353,14 @@ void pat_init(void)
 		 * The reserved slots are unused, but mapped to their
 		 * corresponding types in the presence of PAT errata.
 		 */
-		pat = PAT(0, WB) | PAT(1, WC) | PAT(2, UC_MINUS) | PAT(3, UC) |
-		      PAT(4, WB) | PAT(5, WP) | PAT(6, UC_MINUS) | PAT(7, WT);
+		pat_msr_val = PAT(WB, WC, UC_MINUS, UC, WB, WP, UC_MINUS, WT);
 	}
 
-	if (!pat_bp_initialized) {
-		pat_bp_init(pat);
-		pat_bp_initialized = true;
-	} else {
-		pat_ap_init(pat);
-	}
-}
+	memory_caching_control |= CACHE_PAT;
 
+	init_cache_modes(pat_msr_val);
 #undef PAT
+}
 
 static DEFINE_SPINLOCK(memtype_lock);	/* protects memtype accesses */
 
-- 
2.35.3


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id E2A69C433FE
	for <linux-kernel@archiver.kernel.org>; Wed,  2 Nov 2022 07:49:09 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S231127AbiKBHtI (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 2 Nov 2022 03:49:08 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:59888 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230502AbiKBHsi (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 2 Nov 2022 03:48:38 -0400
Received: from smtp-out2.suse.de (smtp-out2.suse.de [IPv6:2001:67c:2178:6::1d])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 6CB2D275E7
        for <linux-kernel@vger.kernel.org>; Wed,  2 Nov 2022 00:48:36 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out2.suse.de (Postfix) with ESMTPS id 236111F8D0;
        Wed,  2 Nov 2022 07:48:35 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1667375315; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=8mPWpLwJy7yzhex6eU7j5tLklymwcAzwe+PPdkowDuM=;
        b=jK+xtRHuGxgvIkpvOFSz7r4XQb0A4BZmX2KszjLMCulWag7FTQL5eJPNj8vloNmCtmUGAR
        VD6ozlxoai+mtixWWex89re4ODBn3w+t6Si82LwdfzTxwfv9MLOyQuOKiL0IJmCbI0saFh
        neFoGFASCrsQr0TiitJCiVMjDmtHjd8=
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id CDD681376E;
        Wed,  2 Nov 2022 07:48:34 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id VZ/XMNIgYmNIcwAAMHmgww
        (envelope-from <jgross@suse.com>); Wed, 02 Nov 2022 07:48:34 +0000
From:   Juergen Gross <jgross@suse.com>
To:     linux-kernel@vger.kernel.org, x86@kernel.org
Cc:     Juergen Gross <jgross@suse.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>
Subject: [PATCH v5 14/16] x86: switch cache_ap_init() to hotplug callback
Date:   Wed,  2 Nov 2022 08:47:11 +0100
Message-Id: <20221102074713.21493-15-jgross@suse.com>
X-Mailer: git-send-email 2.35.3
In-Reply-To: <20221102074713.21493-1-jgross@suse.com>
References: <20221102074713.21493-1-jgross@suse.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Instead of explicitly calling cache_ap_init() in
identify_secondary_cpu() use a CPU hotplug callback instead. By
registering the callback only after having started the non-boot CPUs
and initializing cache_aps_delayed_init with "true", calling
set_cache_aps_delayed_init() at boot time can be dropped.

It should be noted that this change results in cache_ap_init() being
called a little bit later when hotplugging CPUs. By using a new
hotplug slot right at the start of the low level bringup this is not
problematic, as no operations requiring a specific caching mode are
performed that early in CPU initialization.

Suggested-by: Borislav Petkov <bp@alien8.de>
Signed-off-by: Juergen Gross <jgross@suse.com>
---
V4:
- new patch
---
 arch/x86/include/asm/cacheinfo.h |  1 -
 arch/x86/kernel/cpu/cacheinfo.c  | 18 +++++++++++++++---
 arch/x86/kernel/cpu/common.c     |  1 -
 arch/x86/kernel/smpboot.c        |  2 --
 include/linux/cpuhotplug.h       |  1 +
 5 files changed, 16 insertions(+), 7 deletions(-)

diff --git a/arch/x86/include/asm/cacheinfo.h b/arch/x86/include/asm/cacheinfo.h
index a0ef46e9f453..ce9685fc78d8 100644
--- a/arch/x86/include/asm/cacheinfo.h
+++ b/arch/x86/include/asm/cacheinfo.h
@@ -16,7 +16,6 @@ void set_cache_aps_delayed_init(bool val);
 bool get_cache_aps_delayed_init(void);
 void cache_bp_init(void);
 void cache_bp_restore(void);
-void cache_ap_init(void);
 void cache_aps_init(void);
 
 #endif /* _ASM_X86_CACHEINFO_H */
diff --git a/arch/x86/kernel/cpu/cacheinfo.c b/arch/x86/kernel/cpu/cacheinfo.c
index 1aaf830254df..231cf1ff0641 100644
--- a/arch/x86/kernel/cpu/cacheinfo.c
+++ b/arch/x86/kernel/cpu/cacheinfo.c
@@ -11,6 +11,7 @@
 #include <linux/slab.h>
 #include <linux/cacheinfo.h>
 #include <linux/cpu.h>
+#include <linux/cpuhotplug.h>
 #include <linux/sched.h>
 #include <linux/capability.h>
 #include <linux/sysfs.h>
@@ -1139,7 +1140,7 @@ static void cache_cpu_init(void)
 	local_irq_restore(flags);
 }
 
-static bool cache_aps_delayed_init;
+static bool cache_aps_delayed_init = true;
 
 void set_cache_aps_delayed_init(bool val)
 {
@@ -1174,10 +1175,10 @@ void cache_bp_restore(void)
 		cache_cpu_init();
 }
 
-void cache_ap_init(void)
+static int cache_ap_init(unsigned int cpu)
 {
 	if (!memory_caching_control || get_cache_aps_delayed_init())
-		return;
+		return 0;
 
 	/*
 	 * Ideally we should hold mtrr_mutex here to avoid MTRR entries
@@ -1194,6 +1195,8 @@ void cache_ap_init(void)
 	 */
 	stop_machine_from_inactive_cpu(cache_rendezvous_handler, NULL,
 				       cpu_callout_mask);
+
+	return 0;
 }
 
 /*
@@ -1207,3 +1210,12 @@ void cache_aps_init(void)
 	stop_machine(cache_rendezvous_handler, NULL, cpu_online_mask);
 	set_cache_aps_delayed_init(false);
 }
+
+static int __init cache_ap_register(void)
+{
+	cpuhp_setup_state_nocalls(CPUHP_AP_CACHECTRL_STARTING,
+				  "x86/cachectrl:starting",
+				  cache_ap_init, NULL);
+	return 0;
+}
+core_initcall(cache_ap_register);
diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c
index fd058b547f8d..bf4ac1cb93d7 100644
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@ -1949,7 +1949,6 @@ void identify_secondary_cpu(struct cpuinfo_x86 *c)
 #ifdef CONFIG_X86_32
 	enable_sep_cpu();
 #endif
-	cache_ap_init();
 	validate_apic_and_package_id(c);
 	x86_spec_ctrl_setup_ap();
 	update_srbds_msr();
diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c
index 1b61a480c966..82b311c718bc 100644
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@ -1429,8 +1429,6 @@ void __init native_smp_prepare_cpus(unsigned int max_cpus)
 
 	uv_system_init();
 
-	set_cache_aps_delayed_init(true);
-
 	smp_quirk_init_udelay();
 
 	speculative_store_bypass_ht_init();
diff --git a/include/linux/cpuhotplug.h b/include/linux/cpuhotplug.h
index f61447913db9..0d277b4b025a 100644
--- a/include/linux/cpuhotplug.h
+++ b/include/linux/cpuhotplug.h
@@ -140,6 +140,7 @@ enum cpuhp_state {
 	 */
 	CPUHP_AP_IDLE_DEAD,
 	CPUHP_AP_OFFLINE,
+	CPUHP_AP_CACHECTRL_STARTING,
 	CPUHP_AP_SCHED_STARTING,
 	CPUHP_AP_RCUTREE_DYING,
 	CPUHP_AP_CPU_PM_STARTING,
-- 
2.35.3


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 5FA89C433FE
	for <linux-kernel@archiver.kernel.org>; Wed,  2 Nov 2022 07:49:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S231135AbiKBHtM (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 2 Nov 2022 03:49:12 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:60058 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230513AbiKBHsn (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 2 Nov 2022 03:48:43 -0400
Received: from smtp-out2.suse.de (smtp-out2.suse.de [IPv6:2001:67c:2178:6::1d])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 0E6FC2610D
        for <linux-kernel@vger.kernel.org>; Wed,  2 Nov 2022 00:48:42 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out2.suse.de (Postfix) with ESMTPS id BDBF21F8B0;
        Wed,  2 Nov 2022 07:48:40 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1667375320; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=SkMhXh10I996ogHNk1iHONe/Tn2QI4iwdDoxFOo7ziE=;
        b=cb6qsJD1Rkw1pfAhLr10zuRBQukLiY/H3TeGxwjAIRapVdkuRuxjlo+tDPenQTTeASmlfP
        hA4a78kWEQCMmPlWT563YnpAX3ey8KBNwLCNDxzDx+w72hWxcrVogIbGch8A+KRvMz4/Xc
        xPLB9ZBu2e7J2pK+IU4eBCILKwXvaxw=
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id 8208C1376E;
        Wed,  2 Nov 2022 07:48:40 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id nX1lHtggYmNRcwAAMHmgww
        (envelope-from <jgross@suse.com>); Wed, 02 Nov 2022 07:48:40 +0000
From:   Juergen Gross <jgross@suse.com>
To:     linux-kernel@vger.kernel.org, x86@kernel.org
Cc:     Juergen Gross <jgross@suse.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>
Subject: [PATCH v5 15/16] x86: do MTRR/PAT setup on all secondary CPUs in parallel
Date:   Wed,  2 Nov 2022 08:47:12 +0100
Message-Id: <20221102074713.21493-16-jgross@suse.com>
X-Mailer: git-send-email 2.35.3
In-Reply-To: <20221102074713.21493-1-jgross@suse.com>
References: <20221102074713.21493-1-jgross@suse.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

Instead of serializing MTRR/PAT setup on the secondary CPUs in order
to avoid clobbering of static variables used by the setup process, put
those variables into a structure held on the stack and drop the
serialization.

This speeds up the start of secondary CPUs a little bit (on a small
system with 8 CPUs the time needed for starting the secondary CPUs was
measured to go down from about 60 milliseconds without this patch to
about 55 milliseconds with this patch applied).

Signed-off-by: Juergen Gross <jgross@suse.com>
---
V4:
- new patch
---
 arch/x86/include/asm/cacheinfo.h   | 10 ++++++--
 arch/x86/include/asm/mtrr.h        | 13 +++++-----
 arch/x86/kernel/cpu/cacheinfo.c    | 28 ++++++++-------------
 arch/x86/kernel/cpu/mtrr/generic.c | 40 ++++++++++++++----------------
 4 files changed, 45 insertions(+), 46 deletions(-)

diff --git a/arch/x86/include/asm/cacheinfo.h b/arch/x86/include/asm/cacheinfo.h
index ce9685fc78d8..f66578e1e4e1 100644
--- a/arch/x86/include/asm/cacheinfo.h
+++ b/arch/x86/include/asm/cacheinfo.h
@@ -10,8 +10,14 @@ extern unsigned int memory_caching_control;
 void cacheinfo_amd_init_llc_id(struct cpuinfo_x86 *c, int cpu);
 void cacheinfo_hygon_init_llc_id(struct cpuinfo_x86 *c, int cpu);
 
-void cache_disable(void);
-void cache_enable(void);
+struct cache_state {
+	unsigned long cr4;
+	u32 mtrr_deftype_lo;
+	u32 mtrr_deftype_hi;
+};
+
+void cache_disable(struct cache_state *state);
+void cache_enable(struct cache_state *state);
 void set_cache_aps_delayed_init(bool val);
 bool get_cache_aps_delayed_init(void);
 void cache_bp_init(void);
diff --git a/arch/x86/include/asm/mtrr.h b/arch/x86/include/asm/mtrr.h
index f0eeaf6e5f5f..2ea4a9de7318 100644
--- a/arch/x86/include/asm/mtrr.h
+++ b/arch/x86/include/asm/mtrr.h
@@ -23,6 +23,7 @@
 #ifndef _ASM_X86_MTRR_H
 #define _ASM_X86_MTRR_H
 
+#include <asm/cacheinfo.h>
 #include <uapi/asm/mtrr.h>
 
 /*
@@ -44,9 +45,9 @@ extern void mtrr_centaur_report_mcr(int mcr, u32 lo, u32 hi);
 extern void mtrr_bp_restore(void);
 extern int mtrr_trim_uncached_memory(unsigned long end_pfn);
 extern int amd_special_default_mtrr(void);
-void mtrr_disable(void);
-void mtrr_enable(void);
-void mtrr_generic_set_state(void);
+void mtrr_disable(struct cache_state *state);
+void mtrr_enable(struct cache_state *state);
+void mtrr_generic_set_state(struct cache_state *state);
 #  else
 static inline u8 mtrr_type_lookup(u64 addr, u64 end, u8 *uniform)
 {
@@ -84,9 +85,9 @@ static inline void mtrr_centaur_report_mcr(int mcr, u32 lo, u32 hi)
 }
 #define mtrr_bp_init() do {} while (0)
 #define mtrr_bp_restore() do {} while (0)
-#define mtrr_disable() do {} while (0)
-#define mtrr_enable() do {} while (0)
-#define mtrr_generic_set_state() do {} while (0)
+#define mtrr_disable(s) do {} while (0)
+#define mtrr_enable(s) do {} while (0)
+#define mtrr_generic_set_state(s) do {} while (0)
 #  endif
 
 #ifdef CONFIG_COMPAT
diff --git a/arch/x86/kernel/cpu/cacheinfo.c b/arch/x86/kernel/cpu/cacheinfo.c
index 231cf1ff0641..7e370c979417 100644
--- a/arch/x86/kernel/cpu/cacheinfo.c
+++ b/arch/x86/kernel/cpu/cacheinfo.c
@@ -1057,10 +1057,7 @@ int populate_cache_leaves(unsigned int cpu)
  * The caller must ensure that local interrupts are disabled and
  * are reenabled after cache_enable() has been called.
  */
-static unsigned long saved_cr4;
-static DEFINE_RAW_SPINLOCK(cache_disable_lock);
-
-void cache_disable(void) __acquires(cache_disable_lock)
+void cache_disable(struct cache_state *state)
 {
 	unsigned long cr0;
 
@@ -1071,8 +1068,6 @@ void cache_disable(void) __acquires(cache_disable_lock)
 	 * changes to the way the kernel boots
 	 */
 
-	raw_spin_lock(&cache_disable_lock);
-
 	/* Enter the no-fill (CD=1, NW=0) cache mode and flush caches. */
 	cr0 = read_cr0() | X86_CR0_CD;
 	write_cr0(cr0);
@@ -1088,8 +1083,8 @@ void cache_disable(void) __acquires(cache_disable_lock)
 
 	/* Save value of CR4 and clear Page Global Enable (bit 7) */
 	if (cpu_feature_enabled(X86_FEATURE_PGE)) {
-		saved_cr4 = __read_cr4();
-		__write_cr4(saved_cr4 & ~X86_CR4_PGE);
+		state->cr4 = __read_cr4();
+		__write_cr4(state->cr4 & ~X86_CR4_PGE);
 	}
 
 	/* Flush all TLBs via a mov %cr3, %reg; mov %reg, %cr3 */
@@ -1097,46 +1092,45 @@ void cache_disable(void) __acquires(cache_disable_lock)
 	flush_tlb_local();
 
 	if (cpu_feature_enabled(X86_FEATURE_MTRR))
-		mtrr_disable();
+		mtrr_disable(state);
 
 	/* Again, only flush caches if we have to. */
 	if (!static_cpu_has(X86_FEATURE_SELFSNOOP))
 		wbinvd();
 }
 
-void cache_enable(void) __releases(cache_disable_lock)
+void cache_enable(struct cache_state *state)
 {
 	/* Flush TLBs (no need to flush caches - they are disabled) */
 	count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);
 	flush_tlb_local();
 
 	if (cpu_feature_enabled(X86_FEATURE_MTRR))
-		mtrr_enable();
+		mtrr_enable(state);
 
 	/* Enable caches */
 	write_cr0(read_cr0() & ~X86_CR0_CD);
 
 	/* Restore value of CR4 */
 	if (cpu_feature_enabled(X86_FEATURE_PGE))
-		__write_cr4(saved_cr4);
-
-	raw_spin_unlock(&cache_disable_lock);
+		__write_cr4(state->cr4);
 }
 
 static void cache_cpu_init(void)
 {
 	unsigned long flags;
+	struct cache_state state;
 
 	local_irq_save(flags);
-	cache_disable();
+	cache_disable(&state);
 
 	if (memory_caching_control & CACHE_MTRR)
-		mtrr_generic_set_state();
+		mtrr_generic_set_state(&state);
 
 	if (memory_caching_control & CACHE_PAT)
 		pat_cpu_init();
 
-	cache_enable();
+	cache_enable(&state);
 	local_irq_restore(flags);
 }
 
diff --git a/arch/x86/kernel/cpu/mtrr/generic.c b/arch/x86/kernel/cpu/mtrr/generic.c
index 2f2485d6657f..cddb440f330d 100644
--- a/arch/x86/kernel/cpu/mtrr/generic.c
+++ b/arch/x86/kernel/cpu/mtrr/generic.c
@@ -663,18 +663,13 @@ static bool set_mtrr_var_ranges(unsigned int index, struct mtrr_var_range *vr)
 	return changed;
 }
 
-static u32 deftype_lo, deftype_hi;
-
 /**
  * set_mtrr_state - Set the MTRR state for this CPU.
  *
- * NOTE: The CPU must already be in a safe state for MTRR changes, including
- *       measures that only a single CPU can be active in set_mtrr_state() in
- *       order to not be subject to races for usage of deftype_lo (this is
- *       accomplished by taking cache_disable_lock).
+ * NOTE: The CPU must already be in a safe state for MTRR changes.
  * RETURNS: 0 if no changes made, else a mask indicating what was changed.
  */
-static unsigned long set_mtrr_state(void)
+static unsigned long set_mtrr_state(struct cache_state *state)
 {
 	unsigned long change_mask = 0;
 	unsigned int i;
@@ -691,38 +686,40 @@ static unsigned long set_mtrr_state(void)
 	 * Set_mtrr_restore restores the old value of MTRRdefType,
 	 * so to set it we fiddle with the saved value:
 	 */
-	if ((deftype_lo & 0xff) != mtrr_state.def_type
-	    || ((deftype_lo & 0xc00) >> 10) != mtrr_state.enabled) {
-
-		deftype_lo = (deftype_lo & ~0xcff) | mtrr_state.def_type |
-			     (mtrr_state.enabled << 10);
+	if ((state->mtrr_deftype_lo & 0xff) != mtrr_state.def_type
+	    || ((state->mtrr_deftype_lo & 0xc00) >> 10) != mtrr_state.enabled) {
+		state->mtrr_deftype_lo = (state->mtrr_deftype_lo & ~0xcff) |
+					 mtrr_state.def_type |
+					 (mtrr_state.enabled << 10);
 		change_mask |= MTRR_CHANGE_MASK_DEFTYPE;
 	}
 
 	return change_mask;
 }
 
-void mtrr_disable(void)
+void mtrr_disable(struct cache_state *state)
 {
 	/* Save MTRR state */
-	rdmsr(MSR_MTRRdefType, deftype_lo, deftype_hi);
+	rdmsr(MSR_MTRRdefType, state->mtrr_deftype_lo, state->mtrr_deftype_hi);
 
 	/* Disable MTRRs, and set the default type to uncached */
-	mtrr_wrmsr(MSR_MTRRdefType, deftype_lo & ~0xcff, deftype_hi);
+	mtrr_wrmsr(MSR_MTRRdefType, state->mtrr_deftype_lo & ~0xcff,
+		   state->mtrr_deftype_hi);
 }
 
-void mtrr_enable(void)
+void mtrr_enable(struct cache_state *state)
 {
 	/* Intel (P6) standard MTRRs */
-	mtrr_wrmsr(MSR_MTRRdefType, deftype_lo, deftype_hi);
+	mtrr_wrmsr(MSR_MTRRdefType, state->mtrr_deftype_lo,
+		   state->mtrr_deftype_hi);
 }
 
-void mtrr_generic_set_state(void)
+void mtrr_generic_set_state(struct cache_state *state)
 {
 	unsigned long mask, count;
 
 	/* Actually set the state */
-	mask = set_mtrr_state();
+	mask = set_mtrr_state(state);
 
 	/* Use the atomic bitops to update the global mask */
 	for (count = 0; count < sizeof(mask) * 8; ++count) {
@@ -747,11 +744,12 @@ static void generic_set_mtrr(unsigned int reg, unsigned long base,
 {
 	unsigned long flags;
 	struct mtrr_var_range *vr;
+	struct cache_state state;
 
 	vr = &mtrr_state.var_ranges[reg];
 
 	local_irq_save(flags);
-	cache_disable();
+	cache_disable(&state);
 
 	if (size == 0) {
 		/*
@@ -770,7 +768,7 @@ static void generic_set_mtrr(unsigned int reg, unsigned long base,
 		mtrr_wrmsr(MTRRphysMask_MSR(reg), vr->mask_lo, vr->mask_hi);
 	}
 
-	cache_enable();
+	cache_enable(&state);
 	local_irq_restore(flags);
 }
 
-- 
2.35.3


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id F06B8C433FE
	for <linux-kernel@archiver.kernel.org>; Wed,  2 Nov 2022 07:49:21 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230197AbiKBHtU (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 2 Nov 2022 03:49:20 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:60214 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S231145AbiKBHst (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 2 Nov 2022 03:48:49 -0400
Received: from smtp-out1.suse.de (smtp-out1.suse.de [IPv6:2001:67c:2178:6::1c])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id E2CAF27141
        for <linux-kernel@vger.kernel.org>; Wed,  2 Nov 2022 00:48:47 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out1.suse.de (Postfix) with ESMTPS id 692B121F6E;
        Wed,  2 Nov 2022 07:48:46 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1667375326; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=kVtAWSumNurkoytRaTQXv7/5HrCR6FvTBpLocTA2bAY=;
        b=OIXg+UvpJqtAzZAoGeQCK/oKEPT6ZCODpZRPETtMlMYdoMMFIyuf02xCiw/udVP0r+WVbX
        /tfH3wkn1vaubIbk9R1GNlReODSacP/7iWsX67dNNoyC+/kpIK1sSqBw/DvU5a7UrRphyp
        muhbfPXSTPd9oQ4XbvEHj8RxQYZAE0k=
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id 2D3301376E;
        Wed,  2 Nov 2022 07:48:46 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id SK2UCd4gYmNecwAAMHmgww
        (envelope-from <jgross@suse.com>); Wed, 02 Nov 2022 07:48:46 +0000
From:   Juergen Gross <jgross@suse.com>
To:     linux-kernel@vger.kernel.org, x86@kernel.org
Cc:     Juergen Gross <jgross@suse.com>,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>
Subject: [PATCH v5 16/16] x86/mtrr: simplify mtrr_ops initialization
Date:   Wed,  2 Nov 2022 08:47:13 +0100
Message-Id: <20221102074713.21493-17-jgross@suse.com>
X-Mailer: git-send-email 2.35.3
In-Reply-To: <20221102074713.21493-1-jgross@suse.com>
References: <20221102074713.21493-1-jgross@suse.com>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The way mtrr_if is initialized with the correct mtrr_ops structure is
quite weird.

Simplify that by dropping the vendor specific init functions and the
mtrr_ops[] array. Replace those with direct assignments of the related
vendor specific ops array to mtrr_if.

Note that a direct assignment is okay even for 64-bit builds, where the
symbol isn't present, as the related code will be subject to "dead code
elimination" due to how cpu_feature_enabled() is implemented.

Signed-off-by: Juergen Gross <jgross@suse.com>
---
V4:
- new patch
V5:
- drop the vendor_mtrr_ops() macro (Borislav Petkov)
---
 arch/x86/kernel/cpu/mtrr/amd.c     |  8 +-------
 arch/x86/kernel/cpu/mtrr/centaur.c |  8 +-------
 arch/x86/kernel/cpu/mtrr/cyrix.c   |  8 +-------
 arch/x86/kernel/cpu/mtrr/mtrr.c    | 30 +++---------------------------
 arch/x86/kernel/cpu/mtrr/mtrr.h    | 10 ++++------
 5 files changed, 10 insertions(+), 54 deletions(-)

diff --git a/arch/x86/kernel/cpu/mtrr/amd.c b/arch/x86/kernel/cpu/mtrr/amd.c
index a65a0272096d..eff6ac62c0ff 100644
--- a/arch/x86/kernel/cpu/mtrr/amd.c
+++ b/arch/x86/kernel/cpu/mtrr/amd.c
@@ -109,7 +109,7 @@ amd_validate_add_page(unsigned long base, unsigned long size, unsigned int type)
 	return 0;
 }
 
-static const struct mtrr_ops amd_mtrr_ops = {
+const struct mtrr_ops amd_mtrr_ops = {
 	.vendor            = X86_VENDOR_AMD,
 	.set               = amd_set_mtrr,
 	.get               = amd_get_mtrr,
@@ -117,9 +117,3 @@ static const struct mtrr_ops amd_mtrr_ops = {
 	.validate_add_page = amd_validate_add_page,
 	.have_wrcomb       = positive_have_wrcomb,
 };
-
-int __init amd_init_mtrr(void)
-{
-	set_mtrr_ops(&amd_mtrr_ops);
-	return 0;
-}
diff --git a/arch/x86/kernel/cpu/mtrr/centaur.c b/arch/x86/kernel/cpu/mtrr/centaur.c
index f27177816569..b8a74eddde83 100644
--- a/arch/x86/kernel/cpu/mtrr/centaur.c
+++ b/arch/x86/kernel/cpu/mtrr/centaur.c
@@ -111,7 +111,7 @@ centaur_validate_add_page(unsigned long base, unsigned long size, unsigned int t
 	return 0;
 }
 
-static const struct mtrr_ops centaur_mtrr_ops = {
+const struct mtrr_ops centaur_mtrr_ops = {
 	.vendor            = X86_VENDOR_CENTAUR,
 	.set               = centaur_set_mcr,
 	.get               = centaur_get_mcr,
@@ -119,9 +119,3 @@ static const struct mtrr_ops centaur_mtrr_ops = {
 	.validate_add_page = centaur_validate_add_page,
 	.have_wrcomb       = positive_have_wrcomb,
 };
-
-int __init centaur_init_mtrr(void)
-{
-	set_mtrr_ops(&centaur_mtrr_ops);
-	return 0;
-}
diff --git a/arch/x86/kernel/cpu/mtrr/cyrix.c b/arch/x86/kernel/cpu/mtrr/cyrix.c
index c77d3b0a5bf2..173b9e01e623 100644
--- a/arch/x86/kernel/cpu/mtrr/cyrix.c
+++ b/arch/x86/kernel/cpu/mtrr/cyrix.c
@@ -234,7 +234,7 @@ static void cyrix_set_arr(unsigned int reg, unsigned long base,
 	post_set();
 }
 
-static const struct mtrr_ops cyrix_mtrr_ops = {
+const struct mtrr_ops cyrix_mtrr_ops = {
 	.vendor            = X86_VENDOR_CYRIX,
 	.set               = cyrix_set_arr,
 	.get               = cyrix_get_arr,
@@ -242,9 +242,3 @@ static const struct mtrr_ops cyrix_mtrr_ops = {
 	.validate_add_page = generic_validate_add_page,
 	.have_wrcomb       = positive_have_wrcomb,
 };
-
-int __init cyrix_init_mtrr(void)
-{
-	set_mtrr_ops(&cyrix_mtrr_ops);
-	return 0;
-}
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.c b/arch/x86/kernel/cpu/mtrr/mtrr.c
index 8403daf34158..6432abccbf56 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.c
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.c
@@ -69,16 +69,8 @@ static DEFINE_MUTEX(mtrr_mutex);
 
 u64 size_or_mask, size_and_mask;
 
-static const struct mtrr_ops *mtrr_ops[X86_VENDOR_NUM] __ro_after_init;
-
 const struct mtrr_ops *mtrr_if;
 
-void __init set_mtrr_ops(const struct mtrr_ops *ops)
-{
-	if (ops->vendor && ops->vendor < X86_VENDOR_NUM)
-		mtrr_ops[ops->vendor] = ops;
-}
-
 /*  Returns non-zero if we have the write-combining memory type  */
 static int have_wrcomb(void)
 {
@@ -582,20 +574,6 @@ int arch_phys_wc_index(int handle)
 }
 EXPORT_SYMBOL_GPL(arch_phys_wc_index);
 
-/*
- * HACK ALERT!
- * These should be called implicitly, but we can't yet until all the initcall
- * stuff is done...
- */
-static void __init init_ifs(void)
-{
-#ifndef CONFIG_X86_64
-	amd_init_mtrr();
-	cyrix_init_mtrr();
-	centaur_init_mtrr();
-#endif
-}
-
 /* The suspend/resume methods are only for CPU without MTRR. CPU using generic
  * MTRR driver doesn't require this
  */
@@ -653,8 +631,6 @@ void __init mtrr_bp_init(void)
 {
 	u32 phys_addr;
 
-	init_ifs();
-
 	phys_addr = 32;
 
 	if (boot_cpu_has(X86_FEATURE_MTRR)) {
@@ -695,21 +671,21 @@ void __init mtrr_bp_init(void)
 		case X86_VENDOR_AMD:
 			if (cpu_feature_enabled(X86_FEATURE_K6_MTRR)) {
 				/* Pre-Athlon (K6) AMD CPU MTRRs */
-				mtrr_if = mtrr_ops[X86_VENDOR_AMD];
+				mtrr_if = &amd_mtrr_ops;
 				size_or_mask = SIZE_OR_MASK_BITS(32);
 				size_and_mask = 0;
 			}
 			break;
 		case X86_VENDOR_CENTAUR:
 			if (cpu_feature_enabled(X86_FEATURE_CENTAUR_MCR)) {
-				mtrr_if = mtrr_ops[X86_VENDOR_CENTAUR];
+				mtrr_if = &centaur_mtrr_ops;
 				size_or_mask = SIZE_OR_MASK_BITS(32);
 				size_and_mask = 0;
 			}
 			break;
 		case X86_VENDOR_CYRIX:
 			if (cpu_feature_enabled(X86_FEATURE_CYRIX_ARR)) {
-				mtrr_if = mtrr_ops[X86_VENDOR_CYRIX];
+				mtrr_if = &cyrix_mtrr_ops;
 				size_or_mask = SIZE_OR_MASK_BITS(32);
 				size_and_mask = 0;
 			}
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.h b/arch/x86/kernel/cpu/mtrr/mtrr.h
index c98928ceee6a..02eb5871492d 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.h
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.h
@@ -51,8 +51,6 @@ void fill_mtrr_var_range(unsigned int index,
 		u32 base_lo, u32 base_hi, u32 mask_lo, u32 mask_hi);
 bool get_mtrr_state(void);
 
-extern void __init set_mtrr_ops(const struct mtrr_ops *ops);
-
 extern u64 size_or_mask, size_and_mask;
 extern const struct mtrr_ops *mtrr_if;
 
@@ -66,10 +64,10 @@ void mtrr_state_warn(void);
 const char *mtrr_attrib_to_str(int x);
 void mtrr_wrmsr(unsigned, unsigned, unsigned);
 
-/* CPU specific mtrr init functions */
-int amd_init_mtrr(void);
-int cyrix_init_mtrr(void);
-int centaur_init_mtrr(void);
+/* CPU specific mtrr_ops vectors. */
+extern const struct mtrr_ops amd_mtrr_ops;
+extern const struct mtrr_ops cyrix_mtrr_ops;
+extern const struct mtrr_ops centaur_mtrr_ops;
 
 extern int changed_by_mtrr_cleanup;
 extern int mtrr_cleanup(unsigned address_bits);
-- 
2.35.3


From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id E9247C4332F
	for <linux-kernel@archiver.kernel.org>; Wed,  2 Nov 2022 18:05:11 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S231206AbiKBSFJ (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Wed, 2 Nov 2022 14:05:09 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:33880 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230253AbiKBSFE (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 2 Nov 2022 14:05:04 -0400
Received: from mail.skyhub.de (mail.skyhub.de [5.9.137.197])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id E80152F003;
        Wed,  2 Nov 2022 11:05:02 -0700 (PDT)
Received: from zn.tnic (p200300ea9733e741329c23fffea6a903.dip0.t-ipconnect.de [IPv6:2003:ea:9733:e741:329c:23ff:fea6:a903])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.skyhub.de (SuperMail on ZX Spectrum 128k) with ESMTPSA id 4DC3C1EC0430;
        Wed,  2 Nov 2022 19:05:01 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=alien8.de; s=dkim;
        t=1667412301;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:content-type:content-type:
         content-transfer-encoding:in-reply-to:in-reply-to:  references:references;
        bh=Ep4poWzvh4BEAYAVPV+8HNyluMMUvJCMlgTBWwttbq0=;
        b=E7zQs/NLK4edogyboQinsYMbiq0yAOWPRwhBwjaS6EBtShq9AEdpxQAXzpjC7wAPDRri/v
        os5dLBrfulfFNGLIEBtiV380bLKXXMyMBMcaiAQIeV/cMy8kacpfhCExGiQL83e584TlbM
        PnOtnsh2KH1ZCKTOplCG+qmgfO5IvJQ=
Date:   Wed, 2 Nov 2022 19:04:56 +0100
From:   Borislav Petkov <bp@alien8.de>
To:     Juergen Gross <jgross@suse.com>
Cc:     linux-kernel@vger.kernel.org, x86@kernel.org,
        linux-pm@vger.kernel.org, Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>,
        "Rafael J. Wysocki" <rafael@kernel.org>,
        Pavel Machek <pavel@ucw.cz>, Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>
Subject: Re: [PATCH v5 00/16] x86: make PAT and MTRR independent from each
 other
Message-ID: <Y2KxSGWllUPTikJv@zn.tnic>
References: <20221102074713.21493-1-jgross@suse.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <20221102074713.21493-1-jgross@suse.com>
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Nov 02, 2022 at 08:46:57AM +0100, Juergen Gross wrote:
> Today PAT can't be used without MTRR being available, unless MTRR is at
> least configured via CONFIG_MTRR and the system is running as Xen PV
> guest. In this case PAT is automatically available via the hypervisor,
> but the PAT MSR can't be modified by the kernel and MTRR is disabled.
> 
> The same applies to a kernel built with no MTRR support: it won't
> allow to use the PAT MSR, even if there is no technical reason for
> that, other than setting up PAT on all CPUs the same way (which is a
> requirement of the processor's cache management) is relying on some
> MTRR specific code.
> 
> Fix all of that by:

One of the AMD test boxes here says with this:

...
[    0.863466] PCI: not using MMCONFIG
[    0.863475] PCI: Using configuration type 1 for base access
[    0.863478] PCI: Using configuration type 1 for extended access
[    0.866733] mtrr: your CPUs had inconsistent MTRRdefType settings
[    0.866737] mtrr: probably your BIOS does not setup all CPUs.
[    0.866740] mtrr: corrected configuration.
[    0.869350] kprobes: kprobe jump-optimization is enabled. All kprobes are optimized if possible.
...

Previous logs don't have it:

PCI: not using MMCONFIG
PCI: Using configuration type 1 for base access
PCI: Using configuration type 1 for extended access
kprobes: kprobe jump-optimization is enabled. All kprobes are optimized if possible.

-- 
Regards/Gruss,
    Boris.

https://people.kernel.org/tglx/notes-about-netiquette

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 56E26C433FE
	for <linux-kernel@archiver.kernel.org>; Thu,  3 Nov 2022 08:40:40 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230526AbiKCIkj (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 3 Nov 2022 04:40:39 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:47644 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229436AbiKCIkf (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 3 Nov 2022 04:40:35 -0400
Received: from smtp-out1.suse.de (smtp-out1.suse.de [IPv6:2001:67c:2178:6::1c])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id BEC6FBF68;
        Thu,  3 Nov 2022 01:40:34 -0700 (PDT)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out1.suse.de (Postfix) with ESMTPS id 76966219C3;
        Thu,  3 Nov 2022 08:40:33 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1667464833; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references;
        bh=+bQf+zayucqbyO7dwj1iRvWukyivM0DZIR4s33rXgcU=;
        b=owL11lY3nPitW1qUg/OxfGZPyhmhbUQj9bnn7TuYgUNMsvq46UBGeTcKASwrRfEzku8xRk
        YG0BtLS0ovGKnkk6OiRkTZSBOqyFog+5OEHMiDfPImtwiWm4oWnGbsm2UUnFa6RZomGOx9
        ffsZN9jEsAKJX5Olt7Otzti9qpovvKs=
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id 22D2013480;
        Thu,  3 Nov 2022 08:40:33 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id eoSlBoF+Y2OnQAAAMHmgww
        (envelope-from <jgross@suse.com>); Thu, 03 Nov 2022 08:40:33 +0000
Message-ID: <a9c1ba97-340e-ed7b-ccdc-44a1aaff6d6d@suse.com>
Date:   Thu, 3 Nov 2022 09:40:32 +0100
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.4.0
Subject: Re: [PATCH v5 00/16] x86: make PAT and MTRR independent from each
 other
Content-Language: en-US
To:     Borislav Petkov <bp@alien8.de>
Cc:     linux-kernel@vger.kernel.org, x86@kernel.org,
        linux-pm@vger.kernel.org, Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>,
        "Rafael J. Wysocki" <rafael@kernel.org>,
        Pavel Machek <pavel@ucw.cz>, Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>
References: <20221102074713.21493-1-jgross@suse.com>
 <Y2KxSGWllUPTikJv@zn.tnic>
From:   Juergen Gross <jgross@suse.com>
In-Reply-To: <Y2KxSGWllUPTikJv@zn.tnic>
Content-Type: multipart/signed; micalg=pgp-sha256;
 protocol="application/pgp-signature";
 boundary="------------N4Cl7R7bF3xqhiqQGDkEbU0R"
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--------------N4Cl7R7bF3xqhiqQGDkEbU0R
Content-Type: multipart/mixed; boundary="------------CFTQuLfB0XzzrRuxaVt4YV0p";
 protected-headers="v1"
From: Juergen Gross <jgross@suse.com>
To: Borislav Petkov <bp@alien8.de>
Cc: linux-kernel@vger.kernel.org, x86@kernel.org, linux-pm@vger.kernel.org,
 Thomas Gleixner <tglx@linutronix.de>, Ingo Molnar <mingo@redhat.com>,
 Dave Hansen <dave.hansen@linux.intel.com>, "H. Peter Anvin" <hpa@zytor.com>,
 "Rafael J. Wysocki" <rafael@kernel.org>, Pavel Machek <pavel@ucw.cz>,
 Andy Lutomirski <luto@kernel.org>, Peter Zijlstra <peterz@infradead.org>
Message-ID: <a9c1ba97-340e-ed7b-ccdc-44a1aaff6d6d@suse.com>
Subject: Re: [PATCH v5 00/16] x86: make PAT and MTRR independent from each
 other
References: <20221102074713.21493-1-jgross@suse.com>
 <Y2KxSGWllUPTikJv@zn.tnic>
In-Reply-To: <Y2KxSGWllUPTikJv@zn.tnic>

--------------CFTQuLfB0XzzrRuxaVt4YV0p
Content-Type: multipart/mixed; boundary="------------azArCveb1AUWWtevdrZ3gd44"

--------------azArCveb1AUWWtevdrZ3gd44
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: base64

T24gMDIuMTEuMjIgMTk6MDQsIEJvcmlzbGF2IFBldGtvdiB3cm90ZToNCj4gT24gV2VkLCBO
b3YgMDIsIDIwMjIgYXQgMDg6NDY6NTdBTSArMDEwMCwgSnVlcmdlbiBHcm9zcyB3cm90ZToN
Cj4+IFRvZGF5IFBBVCBjYW4ndCBiZSB1c2VkIHdpdGhvdXQgTVRSUiBiZWluZyBhdmFpbGFi
bGUsIHVubGVzcyBNVFJSIGlzIGF0DQo+PiBsZWFzdCBjb25maWd1cmVkIHZpYSBDT05GSUdf
TVRSUiBhbmQgdGhlIHN5c3RlbSBpcyBydW5uaW5nIGFzIFhlbiBQVg0KPj4gZ3Vlc3QuIElu
IHRoaXMgY2FzZSBQQVQgaXMgYXV0b21hdGljYWxseSBhdmFpbGFibGUgdmlhIHRoZSBoeXBl
cnZpc29yLA0KPj4gYnV0IHRoZSBQQVQgTVNSIGNhbid0IGJlIG1vZGlmaWVkIGJ5IHRoZSBr
ZXJuZWwgYW5kIE1UUlIgaXMgZGlzYWJsZWQuDQo+Pg0KPj4gVGhlIHNhbWUgYXBwbGllcyB0
byBhIGtlcm5lbCBidWlsdCB3aXRoIG5vIE1UUlIgc3VwcG9ydDogaXQgd29uJ3QNCj4+IGFs
bG93IHRvIHVzZSB0aGUgUEFUIE1TUiwgZXZlbiBpZiB0aGVyZSBpcyBubyB0ZWNobmljYWwg
cmVhc29uIGZvcg0KPj4gdGhhdCwgb3RoZXIgdGhhbiBzZXR0aW5nIHVwIFBBVCBvbiBhbGwg
Q1BVcyB0aGUgc2FtZSB3YXkgKHdoaWNoIGlzIGENCj4+IHJlcXVpcmVtZW50IG9mIHRoZSBw
cm9jZXNzb3IncyBjYWNoZSBtYW5hZ2VtZW50KSBpcyByZWx5aW5nIG9uIHNvbWUNCj4+IE1U
UlIgc3BlY2lmaWMgY29kZS4NCj4+DQo+PiBGaXggYWxsIG9mIHRoYXQgYnk6DQo+IA0KPiBP
bmUgb2YgdGhlIEFNRCB0ZXN0IGJveGVzIGhlcmUgc2F5cyB3aXRoIHRoaXM6DQo+IA0KPiAu
Li4NCj4gWyAgICAwLjg2MzQ2Nl0gUENJOiBub3QgdXNpbmcgTU1DT05GSUcNCj4gWyAgICAw
Ljg2MzQ3NV0gUENJOiBVc2luZyBjb25maWd1cmF0aW9uIHR5cGUgMSBmb3IgYmFzZSBhY2Nl
c3MNCj4gWyAgICAwLjg2MzQ3OF0gUENJOiBVc2luZyBjb25maWd1cmF0aW9uIHR5cGUgMSBm
b3IgZXh0ZW5kZWQgYWNjZXNzDQo+IFsgICAgMC44NjY3MzNdIG10cnI6IHlvdXIgQ1BVcyBo
YWQgaW5jb25zaXN0ZW50IE1UUlJkZWZUeXBlIHNldHRpbmdzDQo+IFsgICAgMC44NjY3Mzdd
IG10cnI6IHByb2JhYmx5IHlvdXIgQklPUyBkb2VzIG5vdCBzZXR1cCBhbGwgQ1BVcy4NCj4g
WyAgICAwLjg2Njc0MF0gbXRycjogY29ycmVjdGVkIGNvbmZpZ3VyYXRpb24uDQo+IFsgICAg
MC44NjkzNTBdIGtwcm9iZXM6IGtwcm9iZSBqdW1wLW9wdGltaXphdGlvbiBpcyBlbmFibGVk
LiBBbGwga3Byb2JlcyBhcmUgb3B0aW1pemVkIGlmIHBvc3NpYmxlLg0KPiAuLi4NCj4gDQo+
IFByZXZpb3VzIGxvZ3MgZG9uJ3QgaGF2ZSBpdDoNCj4gDQo+IFBDSTogbm90IHVzaW5nIE1N
Q09ORklHDQo+IFBDSTogVXNpbmcgY29uZmlndXJhdGlvbiB0eXBlIDEgZm9yIGJhc2UgYWNj
ZXNzDQo+IFBDSTogVXNpbmcgY29uZmlndXJhdGlvbiB0eXBlIDEgZm9yIGV4dGVuZGVkIGFj
Y2Vzcw0KPiBrcHJvYmVzOiBrcHJvYmUganVtcC1vcHRpbWl6YXRpb24gaXMgZW5hYmxlZC4g
QWxsIGtwcm9iZXMgYXJlIG9wdGltaXplZCBpZiBwb3NzaWJsZS4NCj4gDQoNCldlaXJkLiBJ
IGNhbid0IHNwb3QgYW55IG1vZGlmaWNhdGlvbiB3aGljaCBjb3VsZCBoYXZlIGNhdXNlZCB0
aGF0Lg0KDQpXb3VsZCBpdCBiZSBwb3NzaWJsZSB0byBpZGVudGlmeSB0aGUgcGF0Y2ggY2F1
c2luZyB0aGF0Pw0KDQoNCkp1ZXJnZW4NCg==
--------------azArCveb1AUWWtevdrZ3gd44
Content-Type: application/pgp-keys; name="OpenPGP_0xB0DE9DD628BF132F.asc"
Content-Disposition: attachment; filename="OpenPGP_0xB0DE9DD628BF132F.asc"
Content-Description: OpenPGP public key
Content-Transfer-Encoding: quoted-printable

-----BEGIN PGP PUBLIC KEY BLOCK-----

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
jR/i1DG86lem3iBDXzXsZDn8R38=3D
=3D2wuH
-----END PGP PUBLIC KEY BLOCK-----

--------------azArCveb1AUWWtevdrZ3gd44--

--------------CFTQuLfB0XzzrRuxaVt4YV0p--

--------------N4Cl7R7bF3xqhiqQGDkEbU0R
Content-Type: application/pgp-signature; name="OpenPGP_signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="OpenPGP_signature"

-----BEGIN PGP SIGNATURE-----

wsB5BAABCAAjFiEEhRJncuj2BJSl0Jf3sN6d1ii/Ey8FAmNjfoAFAwAAAAAACgkQsN6d1ii/Ey9Q
pgf9FMDqYVKu7+g0fBT6oUsL+nUDWwh5ZHjI9xtyxSVYej19jKTj8M4hHBcSFtl6lfLH8Dl2puTo
PbxFLRxd7PPAs4VUkgv/gOtfdlMqpJMXqgLl4ODL04OQxOPFVok2KrmN6V01HZ0zNthenw5QWpL0
/vUmTjPQb+dUWGq0VdiLBVFHGV+9nju/N3ObgO2UtSZhwbDeBJ7Jl5aqSbqi12VEFK31NcdOdAg9
TL1C20HQ5uUeiE67S7PexgAukYAWiAVglN+r+AX6600NfywbuXiEVPu7Nw/Y58t/Ec/BRP79Mmir
bmhkFD479UVDA/G62gwFKOxZSdZy17RISw4xJquxDA==
=YsxI
-----END PGP SIGNATURE-----

--------------N4Cl7R7bF3xqhiqQGDkEbU0R--

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id F10DFC433FE
	for <linux-kernel@archiver.kernel.org>; Thu,  3 Nov 2022 16:16:06 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230121AbiKCQQF (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 3 Nov 2022 12:16:05 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:44922 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S231873AbiKCQP7 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 3 Nov 2022 12:15:59 -0400
Received: from mail.skyhub.de (mail.skyhub.de [5.9.137.197])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 12E16178B8;
        Thu,  3 Nov 2022 09:15:58 -0700 (PDT)
Received: from zn.tnic (p200300ea9733e7e7329c23fffea6a903.dip0.t-ipconnect.de [IPv6:2003:ea:9733:e7e7:329c:23ff:fea6:a903])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.skyhub.de (SuperMail on ZX Spectrum 128k) with ESMTPSA id 6C7FA1EC04F0;
        Thu,  3 Nov 2022 17:15:57 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=alien8.de; s=dkim;
        t=1667492157;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:content-type:content-type:
         content-transfer-encoding:in-reply-to:in-reply-to:  references:references;
        bh=BDVaUg54wfl/xCMdSJWmb+iMXlpz8E0yvyP08froxkM=;
        b=oFxSCTS6oNB2G+pumgtyPaKAxY8PVtu0fQqnH2P97qCSp2dhuIbJWlEWbERe2EK51WtmoB
        lCBDcS/cS86wRdh4MFsWLXOLTvw8dBZ7wRcv/3iI9auoEvys0OG59J263tsfWRrRtcr8Xt
        IvrTN2ZlslquhYZN1UzaTwgNV2PXk50=
Date:   Thu, 3 Nov 2022 17:15:52 +0100
From:   Borislav Petkov <bp@alien8.de>
To:     Juergen Gross <jgross@suse.com>
Cc:     linux-kernel@vger.kernel.org, x86@kernel.org,
        linux-pm@vger.kernel.org, Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>,
        "Rafael J. Wysocki" <rafael@kernel.org>,
        Pavel Machek <pavel@ucw.cz>, Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>
Subject: Re: [PATCH v5 00/16] x86: make PAT and MTRR independent from each
 other
Message-ID: <Y2PpOGaiapd4twQR@zn.tnic>
References: <20221102074713.21493-1-jgross@suse.com>
 <Y2KxSGWllUPTikJv@zn.tnic>
 <a9c1ba97-340e-ed7b-ccdc-44a1aaff6d6d@suse.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <a9c1ba97-340e-ed7b-ccdc-44a1aaff6d6d@suse.com>
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, Nov 03, 2022 at 09:40:32AM +0100, Juergen Gross wrote:
> Would it be possible to identify the patch causing that?

Lemme try to find a smaller box which shows that too - that one is a
pain to bisect on.

-- 
Regards/Gruss,
    Boris.

https://people.kernel.org/tglx/notes-about-netiquette

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 51E3DC43217
	for <linux-kernel@archiver.kernel.org>; Mon,  7 Nov 2022 19:25:24 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232135AbiKGTZX (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Mon, 7 Nov 2022 14:25:23 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:55828 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S232220AbiKGTZU (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 7 Nov 2022 14:25:20 -0500
Received: from mail.skyhub.de (mail.skyhub.de [5.9.137.197])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id F37B5286D8;
        Mon,  7 Nov 2022 11:25:18 -0800 (PST)
Received: from zn.tnic (p200300ea9733e71f329c23fffea6a903.dip0.t-ipconnect.de [IPv6:2003:ea:9733:e71f:329c:23ff:fea6:a903])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.skyhub.de (SuperMail on ZX Spectrum 128k) with ESMTPSA id 45DA01EC0567;
        Mon,  7 Nov 2022 20:25:17 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=alien8.de; s=dkim;
        t=1667849117;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:content-type:content-type:
         content-transfer-encoding:in-reply-to:in-reply-to:  references:references;
        bh=pcjC4gsDaAQb9wj37T7o2+NsO6eLZXW3GUgwox1LxPQ=;
        b=BM8GaX3rOv+jHHETXBX9E8P+zhHlYgi0574Y/GBHtedB3N0PSJKicx7PP+t4FHe/u+S7Gu
        yq382MXQySKBA42Ty9USgymXnP2bYlFN7ivz6wE/imTQAGQM77QNdVhJW66iVZYSl0b0fj
        7C82jcgDeBRASyPB8sWiZ/VOXv0OB0Q=
Date:   Mon, 7 Nov 2022 20:25:13 +0100
From:   Borislav Petkov <bp@alien8.de>
To:     Juergen Gross <jgross@suse.com>
Cc:     linux-kernel@vger.kernel.org, x86@kernel.org,
        linux-pm@vger.kernel.org, Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>,
        "Rafael J. Wysocki" <rafael@kernel.org>,
        Pavel Machek <pavel@ucw.cz>, Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>
Subject: Re: [PATCH v5 00/16] x86: make PAT and MTRR independent from each
 other
Message-ID: <Y2lbmYRWQvXn0nPe@zn.tnic>
References: <20221102074713.21493-1-jgross@suse.com>
 <Y2KxSGWllUPTikJv@zn.tnic>
 <a9c1ba97-340e-ed7b-ccdc-44a1aaff6d6d@suse.com>
 <Y2PpOGaiapd4twQR@zn.tnic>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <Y2PpOGaiapd4twQR@zn.tnic>
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, Nov 03, 2022 at 05:15:52PM +0100, Borislav Petkov wrote:
> Lemme try to find a smaller box which shows that too - that one is a
> pain to bisect on.

Ok, couldn't find a smaller one (or maybe it had to be a big one to
tickle this out).

So I think it is the parallel setup thing:

x86/mtrr: Do MTRR/PAT setup on all secondary CPUs in parallel

Note that before it, it would do the configuration sequentially on each
CPU:

[    0.759239] MTRR: prepare_set: CPU83, MSR_MTRRdefType: 0x0, read: (0xc00:0)
[    0.759239] MTRR: set_mtrr_state: CPU83, mtrr_deftype_lo: 0xc00, mtrr_state.def_type: 0, mtrr_state.enabled: 3
[    0.760794] MTRR: post_set: CPU83, MSR_MTRRdefType will write: (0xc00:0)
[    0.761151] MTRR: prepare_set: CPU70, MSR_MTRRdefType: 0x0, read: (0xc00:0)
[    0.761151] MTRR: set_mtrr_state: CPU70, mtrr_deftype_lo: 0xc00, mtrr_state.def_type: 0, mtrr_state.enabled: 3
[    0.761151] MTRR: post_set: CPU70, MSR_MTRRdefType will write: (0xc00:0)
...

and so on.

Now, it would do it all in parallel:

[    0.762006] MTRR: mtrr_disable: CPU70, MSR_MTRRdefType: 0x0, read: (0xc00:0)
[    0.761916] MTRR: mtrr_disable: CPU18, MSR_MTRRdefType: 0x0, read: (0xc00:0)
[    0.761808] MTRR: mtrr_disable: CPU82, MSR_MTRRdefType: 0x0, read: (0xc00:0)
[    0.762593] MTRR: mtrr_disable: CPU6, MSR_MTRRdefType: 0x0, read: (0x0:0)
								      ^^^^^^

Note that last thing. That comes from (with debug output added):

void mtrr_disable(struct cache_state *state)
{
        unsigned int cpu = smp_processor_id();
        u64 msrval;

        /* Save MTRR state */
        rdmsr(MSR_MTRRdefType, state->mtrr_deftype_lo, state->mtrr_deftype_hi);

        /* Disable MTRRs, and set the default type to uncached */
        mtrr_wrmsr(MSR_MTRRdefType, state->mtrr_deftype_lo & ~0xcff,
                   state->mtrr_deftype_hi);

        rdmsrl(MSR_MTRRdefType, msrval);

        pr_info("%s: CPU%d, MSR_MTRRdefType: 0x%llx, read: (0x%x:%x)\n",
                __func__, cpu, msrval, state->mtrr_deftype_lo, state->mtrr_deftype_hi);
}

The "read: (0x0:0)" basically says that

	state->mtrr_deftype_lo, state->mtrr_deftype_hi

are both 0 already. BUT(!), they should NOT be. The low piece is 0xc00 on most
cores except a handful and it means that MTRRs and Fixed Range are
enabled. In total, they're these cores here:

[    0.762593] MTRR: mtrr_disable: CPU6, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762247] MTRR: mtrr_disable: CPU26, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762685] MTRR: mtrr_disable: CPU68, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762725] MTRR: mtrr_disable: CPU17, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762685] MTRR: mtrr_disable: CPU69, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762800] MTRR: mtrr_disable: CPU1, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762734] MTRR: mtrr_disable: CPU13, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762720] MTRR: mtrr_disable: CPU24, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762696] MTRR: mtrr_disable: CPU66, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762716] MTRR: mtrr_disable: CPU48, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762693] MTRR: mtrr_disable: CPU57, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762519] MTRR: mtrr_disable: CPU87, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762532] MTRR: mtrr_disable: CPU58, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762755] MTRR: mtrr_disable: CPU32, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762693] MTRR: mtrr_disable: CPU52, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762861] MTRR: mtrr_disable: CPU0, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762724] MTRR: mtrr_disable: CPU21, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762640] MTRR: mtrr_disable: CPU15, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762615] MTRR: mtrr_disable: CPU50, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762741] MTRR: mtrr_disable: CPU40, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762738] MTRR: mtrr_disable: CPU37, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762716] MTRR: mtrr_disable: CPU25, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762512] MTRR: mtrr_disable: CPU59, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762721] MTRR: mtrr_disable: CPU45, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762682] MTRR: mtrr_disable: CPU56, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762583] MTRR: mtrr_disable: CPU124, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762751] MTRR: mtrr_disable: CPU12, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762741] MTRR: mtrr_disable: CPU9, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762575] MTRR: mtrr_disable: CPU51, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762632] MTRR: mtrr_disable: CPU100, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762688] MTRR: mtrr_disable: CPU61, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762610] MTRR: mtrr_disable: CPU105, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762721] MTRR: mtrr_disable: CPU20, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.762583] MTRR: mtrr_disable: CPU47, MSR_MTRRdefType: 0x0, read: (0x0:0)

Now, if I add MFENCEs around those RDMSRs:

void mtrr_disable(struct cache_state *state)
{
        unsigned int cpu = smp_processor_id();
        u64 msrval;

        /* Save MTRR state */
        rdmsr(MSR_MTRRdefType, state->mtrr_deftype_lo, state->mtrr_deftype_hi);

        __mb();

        /* Disable MTRRs, and set the default type to uncached */
        mtrr_wrmsr(MSR_MTRRdefType, state->mtrr_deftype_lo & ~0xcff,
                   state->mtrr_deftype_hi);

        __mb();

        rdmsrl(MSR_MTRRdefType, msrval);

        pr_info("%s: CPU%d, MSR_MTRRdefType: 0x%llx, read: (0x%x:%x)\n",
                __func__, cpu, msrval, state->mtrr_deftype_lo, state->mtrr_deftype_hi);

        __mb();
}

the amount of cores becomes less:

[    0.765260] MTRR: mtrr_disable: CPU6, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.765462] MTRR: mtrr_disable: CPU5, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.765242] MTRR: mtrr_disable: CPU22, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.765522] MTRR: mtrr_disable: CPU0, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.765474] MTRR: mtrr_disable: CPU1, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.765207] MTRR: mtrr_disable: CPU54, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.765225] MTRR: mtrr_disable: CPU8, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.765282] MTRR: mtrr_disable: CPU88, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.765150] MTRR: mtrr_disable: CPU119, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.765370] MTRR: mtrr_disable: CPU49, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.765395] MTRR: mtrr_disable: CPU16, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.765348] MTRR: mtrr_disable: CPU52, MSR_MTRRdefType: 0x0, read: (0x0:0)
[    0.765270] MTRR: mtrr_disable: CPU58, MSR_MTRRdefType: 0x0, read: (0x0:0)

which basically hints at some speculative fun where we end up reading
the MSR *after* the write to it has already happened. After this thing:

        /* Disable MTRRs, and set the default type to uncached */
        mtrr_wrmsr(MSR_MTRRdefType, state->mtrr_deftype_lo & ~0xcff,
                   state->mtrr_deftype_hi);

and thus when we read it, we already read the disabled state. But this
is only a conjecture because I still have no clear idea how TF would
that even happen?!?

Needless to say, this fixes it, ofc:

diff --git a/arch/x86/kernel/cpu/cacheinfo.c b/arch/x86/kernel/cpu/cacheinfo.c
index 3805a6d32d37..4a685898caf3 100644
--- a/arch/x86/kernel/cpu/cacheinfo.c
+++ b/arch/x86/kernel/cpu/cacheinfo.c
@@ -1116,12 +1116,14 @@ void cache_enable(struct cache_state *state)
                __write_cr4(state->cr4);
 }
 
+static DEFINE_RAW_SPINLOCK(set_atomicity_lock);
+
 static void cache_cpu_init(void)
 {
        unsigned long flags;
        struct cache_state state = { };
 
-       local_irq_save(flags);
+       raw_spin_lock_irqsave(&set_atomicity_lock, flags);
        cache_disable(&state);
 
        if (memory_caching_control & CACHE_MTRR)
@@ -1131,7 +1133,7 @@ static void cache_cpu_init(void)
                pat_cpu_init();
 
        cache_enable(&state);
-       local_irq_restore(flags);
+       raw_spin_unlock_irqrestore(&set_atomicity_lock, flags);
 }
 
 static bool cache_aps_delayed_init = true;

---

and frankly, considering how we have bigger fish to fry, I'd say we do
it the old way and leave that can'o'worms half-opened.

Unless you wanna continue poking at it. I can give you access to that
box at work...

Thx.

-- 
Regards/Gruss,
    Boris.

https://people.kernel.org/tglx/notes-about-netiquette

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id CE58BC433FE
	for <linux-kernel@archiver.kernel.org>; Tue,  8 Nov 2022 07:30:29 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232896AbiKHHa2 (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Tue, 8 Nov 2022 02:30:28 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:36318 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229478AbiKHHaZ (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 8 Nov 2022 02:30:25 -0500
Received: from smtp-out2.suse.de (smtp-out2.suse.de [IPv6:2001:67c:2178:6::1d])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 6BD34165B8;
        Mon,  7 Nov 2022 23:30:21 -0800 (PST)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out2.suse.de (Postfix) with ESMTPS id CA17E1F8BD;
        Tue,  8 Nov 2022 07:30:19 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1667892619; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references;
        bh=94DskK8xdR8BoL725eTXvsapCbksgAsquemJbsViVMA=;
        b=B+3+6lNCcr7PRklkiRuDl6JMAbP0i2NqllKmLlIbgrlQZhUYquYMIbmRSsNk4hgPm9NUKm
        yYXmS1D0z2avb1oPkvflphp3nZsCPVqt/xSzuJ+GWQ3pV5+y0I7P4i18QDhkC5TWA5pqL/
        kM9a9/SNQGnlPHrDCdK/EytDGdWEkSY=
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id 6F9E813398;
        Tue,  8 Nov 2022 07:30:19 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap2.suse-dmz.suse.de with ESMTPSA
        id cUJxGYsFamNeLgAAMHmgww
        (envelope-from <jgross@suse.com>); Tue, 08 Nov 2022 07:30:19 +0000
Message-ID: <03e5624d-9e45-c51b-9ace-616a223ff092@suse.com>
Date:   Tue, 8 Nov 2022 08:30:19 +0100
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.4.0
Content-Language: en-US
To:     Borislav Petkov <bp@alien8.de>
Cc:     linux-kernel@vger.kernel.org, x86@kernel.org,
        linux-pm@vger.kernel.org, Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>,
        "Rafael J. Wysocki" <rafael@kernel.org>,
        Pavel Machek <pavel@ucw.cz>, Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>
References: <20221102074713.21493-1-jgross@suse.com>
 <Y2KxSGWllUPTikJv@zn.tnic> <a9c1ba97-340e-ed7b-ccdc-44a1aaff6d6d@suse.com>
 <Y2PpOGaiapd4twQR@zn.tnic> <Y2lbmYRWQvXn0nPe@zn.tnic>
From:   Juergen Gross <jgross@suse.com>
Subject: Re: [PATCH v5 00/16] x86: make PAT and MTRR independent from each
 other
In-Reply-To: <Y2lbmYRWQvXn0nPe@zn.tnic>
Content-Type: multipart/signed; micalg=pgp-sha256;
 protocol="application/pgp-signature";
 boundary="------------eOLXkV3TnoN0aGvz00t0fOg8"
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--------------eOLXkV3TnoN0aGvz00t0fOg8
Content-Type: multipart/mixed; boundary="------------APjrBc1NLW3aAcYvAn5CBfF6";
 protected-headers="v1"
From: Juergen Gross <jgross@suse.com>
To: Borislav Petkov <bp@alien8.de>
Cc: linux-kernel@vger.kernel.org, x86@kernel.org, linux-pm@vger.kernel.org,
 Thomas Gleixner <tglx@linutronix.de>, Ingo Molnar <mingo@redhat.com>,
 Dave Hansen <dave.hansen@linux.intel.com>, "H. Peter Anvin" <hpa@zytor.com>,
 "Rafael J. Wysocki" <rafael@kernel.org>, Pavel Machek <pavel@ucw.cz>,
 Andy Lutomirski <luto@kernel.org>, Peter Zijlstra <peterz@infradead.org>
Message-ID: <03e5624d-9e45-c51b-9ace-616a223ff092@suse.com>
Subject: Re: [PATCH v5 00/16] x86: make PAT and MTRR independent from each
 other
References: <20221102074713.21493-1-jgross@suse.com>
 <Y2KxSGWllUPTikJv@zn.tnic> <a9c1ba97-340e-ed7b-ccdc-44a1aaff6d6d@suse.com>
 <Y2PpOGaiapd4twQR@zn.tnic> <Y2lbmYRWQvXn0nPe@zn.tnic>
In-Reply-To: <Y2lbmYRWQvXn0nPe@zn.tnic>

--------------APjrBc1NLW3aAcYvAn5CBfF6
Content-Type: multipart/mixed; boundary="------------WaUMbipUjVJcx0IYFnfX6Oqr"

--------------WaUMbipUjVJcx0IYFnfX6Oqr
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: base64

T24gMDcuMTEuMjIgMjA6MjUsIEJvcmlzbGF2IFBldGtvdiB3cm90ZToNCj4gT24gVGh1LCBO
b3YgMDMsIDIwMjIgYXQgMDU6MTU6NTJQTSArMDEwMCwgQm9yaXNsYXYgUGV0a292IHdyb3Rl
Og0KPj4gTGVtbWUgdHJ5IHRvIGZpbmQgYSBzbWFsbGVyIGJveCB3aGljaCBzaG93cyB0aGF0
IHRvbyAtIHRoYXQgb25lIGlzIGENCj4+IHBhaW4gdG8gYmlzZWN0IG9uLg0KPiANCj4gT2ss
IGNvdWxkbid0IGZpbmQgYSBzbWFsbGVyIG9uZSAob3IgbWF5YmUgaXQgaGFkIHRvIGJlIGEg
YmlnIG9uZSB0bw0KPiB0aWNrbGUgdGhpcyBvdXQpLg0KPiANCj4gU28gSSB0aGluayBpdCBp
cyB0aGUgcGFyYWxsZWwgc2V0dXAgdGhpbmc6DQo+IA0KPiB4ODYvbXRycjogRG8gTVRSUi9Q
QVQgc2V0dXAgb24gYWxsIHNlY29uZGFyeSBDUFVzIGluIHBhcmFsbGVsDQo+IA0KPiBOb3Rl
IHRoYXQgYmVmb3JlIGl0LCBpdCB3b3VsZCBkbyB0aGUgY29uZmlndXJhdGlvbiBzZXF1ZW50
aWFsbHkgb24gZWFjaA0KPiBDUFU6DQo+IA0KPiBbICAgIDAuNzU5MjM5XSBNVFJSOiBwcmVw
YXJlX3NldDogQ1BVODMsIE1TUl9NVFJSZGVmVHlwZTogMHgwLCByZWFkOiAoMHhjMDA6MCkN
Cj4gWyAgICAwLjc1OTIzOV0gTVRSUjogc2V0X210cnJfc3RhdGU6IENQVTgzLCBtdHJyX2Rl
ZnR5cGVfbG86IDB4YzAwLCBtdHJyX3N0YXRlLmRlZl90eXBlOiAwLCBtdHJyX3N0YXRlLmVu
YWJsZWQ6IDMNCj4gWyAgICAwLjc2MDc5NF0gTVRSUjogcG9zdF9zZXQ6IENQVTgzLCBNU1Jf
TVRSUmRlZlR5cGUgd2lsbCB3cml0ZTogKDB4YzAwOjApDQo+IFsgICAgMC43NjExNTFdIE1U
UlI6IHByZXBhcmVfc2V0OiBDUFU3MCwgTVNSX01UUlJkZWZUeXBlOiAweDAsIHJlYWQ6ICgw
eGMwMDowKQ0KPiBbICAgIDAuNzYxMTUxXSBNVFJSOiBzZXRfbXRycl9zdGF0ZTogQ1BVNzAs
IG10cnJfZGVmdHlwZV9sbzogMHhjMDAsIG10cnJfc3RhdGUuZGVmX3R5cGU6IDAsIG10cnJf
c3RhdGUuZW5hYmxlZDogMw0KPiBbICAgIDAuNzYxMTUxXSBNVFJSOiBwb3N0X3NldDogQ1BV
NzAsIE1TUl9NVFJSZGVmVHlwZSB3aWxsIHdyaXRlOiAoMHhjMDA6MCkNCj4gLi4uDQo+IA0K
PiBhbmQgc28gb24uDQo+IA0KPiBOb3csIGl0IHdvdWxkIGRvIGl0IGFsbCBpbiBwYXJhbGxl
bDoNCj4gDQo+IFsgICAgMC43NjIwMDZdIE1UUlI6IG10cnJfZGlzYWJsZTogQ1BVNzAsIE1T
Ul9NVFJSZGVmVHlwZTogMHgwLCByZWFkOiAoMHhjMDA6MCkNCj4gWyAgICAwLjc2MTkxNl0g
TVRSUjogbXRycl9kaXNhYmxlOiBDUFUxOCwgTVNSX01UUlJkZWZUeXBlOiAweDAsIHJlYWQ6
ICgweGMwMDowKQ0KPiBbICAgIDAuNzYxODA4XSBNVFJSOiBtdHJyX2Rpc2FibGU6IENQVTgy
LCBNU1JfTVRSUmRlZlR5cGU6IDB4MCwgcmVhZDogKDB4YzAwOjApDQo+IFsgICAgMC43NjI1
OTNdIE1UUlI6IG10cnJfZGlzYWJsZTogQ1BVNiwgTVNSX01UUlJkZWZUeXBlOiAweDAsIHJl
YWQ6ICgweDA6MCkNCj4gCQkJCQkJCQkgICAgICBeXl5eXl4NCj4gDQo+IE5vdGUgdGhhdCBs
YXN0IHRoaW5nLiBUaGF0IGNvbWVzIGZyb20gKHdpdGggZGVidWcgb3V0cHV0IGFkZGVkKToN
Cj4gDQo+IHZvaWQgbXRycl9kaXNhYmxlKHN0cnVjdCBjYWNoZV9zdGF0ZSAqc3RhdGUpDQo+
IHsNCj4gICAgICAgICAgdW5zaWduZWQgaW50IGNwdSA9IHNtcF9wcm9jZXNzb3JfaWQoKTsN
Cj4gICAgICAgICAgdTY0IG1zcnZhbDsNCj4gDQo+ICAgICAgICAgIC8qIFNhdmUgTVRSUiBz
dGF0ZSAqLw0KPiAgICAgICAgICByZG1zcihNU1JfTVRSUmRlZlR5cGUsIHN0YXRlLT5tdHJy
X2RlZnR5cGVfbG8sIHN0YXRlLT5tdHJyX2RlZnR5cGVfaGkpOw0KPiANCj4gICAgICAgICAg
LyogRGlzYWJsZSBNVFJScywgYW5kIHNldCB0aGUgZGVmYXVsdCB0eXBlIHRvIHVuY2FjaGVk
ICovDQo+ICAgICAgICAgIG10cnJfd3Jtc3IoTVNSX01UUlJkZWZUeXBlLCBzdGF0ZS0+bXRy
cl9kZWZ0eXBlX2xvICYgfjB4Y2ZmLA0KPiAgICAgICAgICAgICAgICAgICAgIHN0YXRlLT5t
dHJyX2RlZnR5cGVfaGkpOw0KPiANCj4gICAgICAgICAgcmRtc3JsKE1TUl9NVFJSZGVmVHlw
ZSwgbXNydmFsKTsNCj4gDQo+ICAgICAgICAgIHByX2luZm8oIiVzOiBDUFUlZCwgTVNSX01U
UlJkZWZUeXBlOiAweCVsbHgsIHJlYWQ6ICgweCV4OiV4KVxuIiwNCj4gICAgICAgICAgICAg
ICAgICBfX2Z1bmNfXywgY3B1LCBtc3J2YWwsIHN0YXRlLT5tdHJyX2RlZnR5cGVfbG8sIHN0
YXRlLT5tdHJyX2RlZnR5cGVfaGkpOw0KPiB9DQo+IA0KPiBUaGUgInJlYWQ6ICgweDA6MCki
IGJhc2ljYWxseSBzYXlzIHRoYXQNCj4gDQo+IAlzdGF0ZS0+bXRycl9kZWZ0eXBlX2xvLCBz
dGF0ZS0+bXRycl9kZWZ0eXBlX2hpDQo+IA0KPiBhcmUgYm90aCAwIGFscmVhZHkuIEJVVCgh
KSwgdGhleSBzaG91bGQgTk9UIGJlLiBUaGUgbG93IHBpZWNlIGlzIDB4YzAwIG9uIG1vc3QN
Cj4gY29yZXMgZXhjZXB0IGEgaGFuZGZ1bCBhbmQgaXQgbWVhbnMgdGhhdCBNVFJScyBhbmQg
Rml4ZWQgUmFuZ2UgYXJlDQo+IGVuYWJsZWQuIEluIHRvdGFsLCB0aGV5J3JlIHRoZXNlIGNv
cmVzIGhlcmU6DQo+IA0KPiBbICAgIDAuNzYyNTkzXSBNVFJSOiBtdHJyX2Rpc2FibGU6IENQ
VTYsIE1TUl9NVFJSZGVmVHlwZTogMHgwLCByZWFkOiAoMHgwOjApDQo+IFsgICAgMC43NjIy
NDddIE1UUlI6IG10cnJfZGlzYWJsZTogQ1BVMjYsIE1TUl9NVFJSZGVmVHlwZTogMHgwLCBy
ZWFkOiAoMHgwOjApDQo+IFsgICAgMC43NjI2ODVdIE1UUlI6IG10cnJfZGlzYWJsZTogQ1BV
NjgsIE1TUl9NVFJSZGVmVHlwZTogMHgwLCByZWFkOiAoMHgwOjApDQo+IFsgICAgMC43NjI3
MjVdIE1UUlI6IG10cnJfZGlzYWJsZTogQ1BVMTcsIE1TUl9NVFJSZGVmVHlwZTogMHgwLCBy
ZWFkOiAoMHgwOjApDQo+IFsgICAgMC43NjI2ODVdIE1UUlI6IG10cnJfZGlzYWJsZTogQ1BV
NjksIE1TUl9NVFJSZGVmVHlwZTogMHgwLCByZWFkOiAoMHgwOjApDQo+IFsgICAgMC43NjI4
MDBdIE1UUlI6IG10cnJfZGlzYWJsZTogQ1BVMSwgTVNSX01UUlJkZWZUeXBlOiAweDAsIHJl
YWQ6ICgweDA6MCkNCj4gWyAgICAwLjc2MjczNF0gTVRSUjogbXRycl9kaXNhYmxlOiBDUFUx
MywgTVNSX01UUlJkZWZUeXBlOiAweDAsIHJlYWQ6ICgweDA6MCkNCj4gWyAgICAwLjc2Mjcy
MF0gTVRSUjogbXRycl9kaXNhYmxlOiBDUFUyNCwgTVNSX01UUlJkZWZUeXBlOiAweDAsIHJl
YWQ6ICgweDA6MCkNCj4gWyAgICAwLjc2MjY5Nl0gTVRSUjogbXRycl9kaXNhYmxlOiBDUFU2
NiwgTVNSX01UUlJkZWZUeXBlOiAweDAsIHJlYWQ6ICgweDA6MCkNCj4gWyAgICAwLjc2Mjcx
Nl0gTVRSUjogbXRycl9kaXNhYmxlOiBDUFU0OCwgTVNSX01UUlJkZWZUeXBlOiAweDAsIHJl
YWQ6ICgweDA6MCkNCj4gWyAgICAwLjc2MjY5M10gTVRSUjogbXRycl9kaXNhYmxlOiBDUFU1
NywgTVNSX01UUlJkZWZUeXBlOiAweDAsIHJlYWQ6ICgweDA6MCkNCj4gWyAgICAwLjc2MjUx
OV0gTVRSUjogbXRycl9kaXNhYmxlOiBDUFU4NywgTVNSX01UUlJkZWZUeXBlOiAweDAsIHJl
YWQ6ICgweDA6MCkNCj4gWyAgICAwLjc2MjUzMl0gTVRSUjogbXRycl9kaXNhYmxlOiBDUFU1
OCwgTVNSX01UUlJkZWZUeXBlOiAweDAsIHJlYWQ6ICgweDA6MCkNCj4gWyAgICAwLjc2Mjc1
NV0gTVRSUjogbXRycl9kaXNhYmxlOiBDUFUzMiwgTVNSX01UUlJkZWZUeXBlOiAweDAsIHJl
YWQ6ICgweDA6MCkNCj4gWyAgICAwLjc2MjY5M10gTVRSUjogbXRycl9kaXNhYmxlOiBDUFU1
MiwgTVNSX01UUlJkZWZUeXBlOiAweDAsIHJlYWQ6ICgweDA6MCkNCj4gWyAgICAwLjc2Mjg2
MV0gTVRSUjogbXRycl9kaXNhYmxlOiBDUFUwLCBNU1JfTVRSUmRlZlR5cGU6IDB4MCwgcmVh
ZDogKDB4MDowKQ0KPiBbICAgIDAuNzYyNzI0XSBNVFJSOiBtdHJyX2Rpc2FibGU6IENQVTIx
LCBNU1JfTVRSUmRlZlR5cGU6IDB4MCwgcmVhZDogKDB4MDowKQ0KPiBbICAgIDAuNzYyNjQw
XSBNVFJSOiBtdHJyX2Rpc2FibGU6IENQVTE1LCBNU1JfTVRSUmRlZlR5cGU6IDB4MCwgcmVh
ZDogKDB4MDowKQ0KPiBbICAgIDAuNzYyNjE1XSBNVFJSOiBtdHJyX2Rpc2FibGU6IENQVTUw
LCBNU1JfTVRSUmRlZlR5cGU6IDB4MCwgcmVhZDogKDB4MDowKQ0KPiBbICAgIDAuNzYyNzQx
XSBNVFJSOiBtdHJyX2Rpc2FibGU6IENQVTQwLCBNU1JfTVRSUmRlZlR5cGU6IDB4MCwgcmVh
ZDogKDB4MDowKQ0KPiBbICAgIDAuNzYyNzM4XSBNVFJSOiBtdHJyX2Rpc2FibGU6IENQVTM3
LCBNU1JfTVRSUmRlZlR5cGU6IDB4MCwgcmVhZDogKDB4MDowKQ0KPiBbICAgIDAuNzYyNzE2
XSBNVFJSOiBtdHJyX2Rpc2FibGU6IENQVTI1LCBNU1JfTVRSUmRlZlR5cGU6IDB4MCwgcmVh
ZDogKDB4MDowKQ0KPiBbICAgIDAuNzYyNTEyXSBNVFJSOiBtdHJyX2Rpc2FibGU6IENQVTU5
LCBNU1JfTVRSUmRlZlR5cGU6IDB4MCwgcmVhZDogKDB4MDowKQ0KPiBbICAgIDAuNzYyNzIx
XSBNVFJSOiBtdHJyX2Rpc2FibGU6IENQVTQ1LCBNU1JfTVRSUmRlZlR5cGU6IDB4MCwgcmVh
ZDogKDB4MDowKQ0KPiBbICAgIDAuNzYyNjgyXSBNVFJSOiBtdHJyX2Rpc2FibGU6IENQVTU2
LCBNU1JfTVRSUmRlZlR5cGU6IDB4MCwgcmVhZDogKDB4MDowKQ0KPiBbICAgIDAuNzYyNTgz
XSBNVFJSOiBtdHJyX2Rpc2FibGU6IENQVTEyNCwgTVNSX01UUlJkZWZUeXBlOiAweDAsIHJl
YWQ6ICgweDA6MCkNCj4gWyAgICAwLjc2Mjc1MV0gTVRSUjogbXRycl9kaXNhYmxlOiBDUFUx
MiwgTVNSX01UUlJkZWZUeXBlOiAweDAsIHJlYWQ6ICgweDA6MCkNCj4gWyAgICAwLjc2Mjc0
MV0gTVRSUjogbXRycl9kaXNhYmxlOiBDUFU5LCBNU1JfTVRSUmRlZlR5cGU6IDB4MCwgcmVh
ZDogKDB4MDowKQ0KPiBbICAgIDAuNzYyNTc1XSBNVFJSOiBtdHJyX2Rpc2FibGU6IENQVTUx
LCBNU1JfTVRSUmRlZlR5cGU6IDB4MCwgcmVhZDogKDB4MDowKQ0KPiBbICAgIDAuNzYyNjMy
XSBNVFJSOiBtdHJyX2Rpc2FibGU6IENQVTEwMCwgTVNSX01UUlJkZWZUeXBlOiAweDAsIHJl
YWQ6ICgweDA6MCkNCj4gWyAgICAwLjc2MjY4OF0gTVRSUjogbXRycl9kaXNhYmxlOiBDUFU2
MSwgTVNSX01UUlJkZWZUeXBlOiAweDAsIHJlYWQ6ICgweDA6MCkNCj4gWyAgICAwLjc2MjYx
MF0gTVRSUjogbXRycl9kaXNhYmxlOiBDUFUxMDUsIE1TUl9NVFJSZGVmVHlwZTogMHgwLCBy
ZWFkOiAoMHgwOjApDQo+IFsgICAgMC43NjI3MjFdIE1UUlI6IG10cnJfZGlzYWJsZTogQ1BV
MjAsIE1TUl9NVFJSZGVmVHlwZTogMHgwLCByZWFkOiAoMHgwOjApDQo+IFsgICAgMC43NjI1
ODNdIE1UUlI6IG10cnJfZGlzYWJsZTogQ1BVNDcsIE1TUl9NVFJSZGVmVHlwZTogMHgwLCBy
ZWFkOiAoMHgwOjApDQo+IA0KPiBOb3csIGlmIEkgYWRkIE1GRU5DRXMgYXJvdW5kIHRob3Nl
IFJETVNSczoNCj4gDQo+IHZvaWQgbXRycl9kaXNhYmxlKHN0cnVjdCBjYWNoZV9zdGF0ZSAq
c3RhdGUpDQo+IHsNCj4gICAgICAgICAgdW5zaWduZWQgaW50IGNwdSA9IHNtcF9wcm9jZXNz
b3JfaWQoKTsNCj4gICAgICAgICAgdTY0IG1zcnZhbDsNCj4gDQo+ICAgICAgICAgIC8qIFNh
dmUgTVRSUiBzdGF0ZSAqLw0KPiAgICAgICAgICByZG1zcihNU1JfTVRSUmRlZlR5cGUsIHN0
YXRlLT5tdHJyX2RlZnR5cGVfbG8sIHN0YXRlLT5tdHJyX2RlZnR5cGVfaGkpOw0KPiANCj4g
ICAgICAgICAgX19tYigpOw0KPiANCj4gICAgICAgICAgLyogRGlzYWJsZSBNVFJScywgYW5k
IHNldCB0aGUgZGVmYXVsdCB0eXBlIHRvIHVuY2FjaGVkICovDQo+ICAgICAgICAgIG10cnJf
d3Jtc3IoTVNSX01UUlJkZWZUeXBlLCBzdGF0ZS0+bXRycl9kZWZ0eXBlX2xvICYgfjB4Y2Zm
LA0KPiAgICAgICAgICAgICAgICAgICAgIHN0YXRlLT5tdHJyX2RlZnR5cGVfaGkpOw0KPiAN
Cj4gICAgICAgICAgX19tYigpOw0KPiANCj4gICAgICAgICAgcmRtc3JsKE1TUl9NVFJSZGVm
VHlwZSwgbXNydmFsKTsNCj4gDQo+ICAgICAgICAgIHByX2luZm8oIiVzOiBDUFUlZCwgTVNS
X01UUlJkZWZUeXBlOiAweCVsbHgsIHJlYWQ6ICgweCV4OiV4KVxuIiwNCj4gICAgICAgICAg
ICAgICAgICBfX2Z1bmNfXywgY3B1LCBtc3J2YWwsIHN0YXRlLT5tdHJyX2RlZnR5cGVfbG8s
IHN0YXRlLT5tdHJyX2RlZnR5cGVfaGkpOw0KPiANCj4gICAgICAgICAgX19tYigpOw0KPiB9
DQo+IA0KPiB0aGUgYW1vdW50IG9mIGNvcmVzIGJlY29tZXMgbGVzczoNCg0KUHJvYmFibHkg
bm90IGJlY2F1c2Ugb2YgdGhlIGZlbmNpbmcsIGJ1dCBiZWNhdXNlIG9mIHRoZSBkaWZmZXJl
bnQgdGltaW5nLg0KDQo+IA0KPiBbICAgIDAuNzY1MjYwXSBNVFJSOiBtdHJyX2Rpc2FibGU6
IENQVTYsIE1TUl9NVFJSZGVmVHlwZTogMHgwLCByZWFkOiAoMHgwOjApDQo+IFsgICAgMC43
NjU0NjJdIE1UUlI6IG10cnJfZGlzYWJsZTogQ1BVNSwgTVNSX01UUlJkZWZUeXBlOiAweDAs
IHJlYWQ6ICgweDA6MCkNCj4gWyAgICAwLjc2NTI0Ml0gTVRSUjogbXRycl9kaXNhYmxlOiBD
UFUyMiwgTVNSX01UUlJkZWZUeXBlOiAweDAsIHJlYWQ6ICgweDA6MCkNCj4gWyAgICAwLjc2
NTUyMl0gTVRSUjogbXRycl9kaXNhYmxlOiBDUFUwLCBNU1JfTVRSUmRlZlR5cGU6IDB4MCwg
cmVhZDogKDB4MDowKQ0KPiBbICAgIDAuNzY1NDc0XSBNVFJSOiBtdHJyX2Rpc2FibGU6IENQ
VTEsIE1TUl9NVFJSZGVmVHlwZTogMHgwLCByZWFkOiAoMHgwOjApDQo+IFsgICAgMC43NjUy
MDddIE1UUlI6IG10cnJfZGlzYWJsZTogQ1BVNTQsIE1TUl9NVFJSZGVmVHlwZTogMHgwLCBy
ZWFkOiAoMHgwOjApDQo+IFsgICAgMC43NjUyMjVdIE1UUlI6IG10cnJfZGlzYWJsZTogQ1BV
OCwgTVNSX01UUlJkZWZUeXBlOiAweDAsIHJlYWQ6ICgweDA6MCkNCj4gWyAgICAwLjc2NTI4
Ml0gTVRSUjogbXRycl9kaXNhYmxlOiBDUFU4OCwgTVNSX01UUlJkZWZUeXBlOiAweDAsIHJl
YWQ6ICgweDA6MCkNCj4gWyAgICAwLjc2NTE1MF0gTVRSUjogbXRycl9kaXNhYmxlOiBDUFUx
MTksIE1TUl9NVFJSZGVmVHlwZTogMHgwLCByZWFkOiAoMHgwOjApDQo+IFsgICAgMC43NjUz
NzBdIE1UUlI6IG10cnJfZGlzYWJsZTogQ1BVNDksIE1TUl9NVFJSZGVmVHlwZTogMHgwLCBy
ZWFkOiAoMHgwOjApDQo+IFsgICAgMC43NjUzOTVdIE1UUlI6IG10cnJfZGlzYWJsZTogQ1BV
MTYsIE1TUl9NVFJSZGVmVHlwZTogMHgwLCByZWFkOiAoMHgwOjApDQo+IFsgICAgMC43NjUz
NDhdIE1UUlI6IG10cnJfZGlzYWJsZTogQ1BVNTIsIE1TUl9NVFJSZGVmVHlwZTogMHgwLCBy
ZWFkOiAoMHgwOjApDQo+IFsgICAgMC43NjUyNzBdIE1UUlI6IG10cnJfZGlzYWJsZTogQ1BV
NTgsIE1TUl9NVFJSZGVmVHlwZTogMHgwLCByZWFkOiAoMHgwOjApDQo+IA0KPiB3aGljaCBi
YXNpY2FsbHkgaGludHMgYXQgc29tZSBzcGVjdWxhdGl2ZSBmdW4gd2hlcmUgd2UgZW5kIHVw
IHJlYWRpbmcNCj4gdGhlIE1TUiAqYWZ0ZXIqIHRoZSB3cml0ZSB0byBpdCBoYXMgYWxyZWFk
eSBoYXBwZW5lZC4gQWZ0ZXIgdGhpcyB0aGluZzoNCj4gDQo+ICAgICAgICAgIC8qIERpc2Fi
bGUgTVRSUnMsIGFuZCBzZXQgdGhlIGRlZmF1bHQgdHlwZSB0byB1bmNhY2hlZCAqLw0KPiAg
ICAgICAgICBtdHJyX3dybXNyKE1TUl9NVFJSZGVmVHlwZSwgc3RhdGUtPm10cnJfZGVmdHlw
ZV9sbyAmIH4weGNmZiwNCj4gICAgICAgICAgICAgICAgICAgICBzdGF0ZS0+bXRycl9kZWZ0
eXBlX2hpKTsNCj4gDQo+IGFuZCB0aHVzIHdoZW4gd2UgcmVhZCBpdCwgd2UgYWxyZWFkeSBy
ZWFkIHRoZSBkaXNhYmxlZCBzdGF0ZS4gQnV0IHRoaXMNCj4gaXMgb25seSBhIGNvbmplY3R1
cmUgYmVjYXVzZSBJIHN0aWxsIGhhdmUgbm8gY2xlYXIgaWRlYSBob3cgVEYgd291bGQNCj4g
dGhhdCBldmVuIGhhcHBlbj8hPw0KDQpZZWFoLCBhbmQgd2h5IGRvZXNuJ3QgaXQgaGFwcGVu
IHdoZW4gd2UgaGFuZGxlIG9ubHkgb25lIGNwdSBhdCBhIHRpbWU/DQoNClRoZXJlIG1pZ2h0
IGJlIHNvbWUgaW50ZXJhY3Rpb24gYmV0d2VlbiB0aGUgY3B1cyAuLi4NCg0KPiANCj4gTmVl
ZGxlc3MgdG8gc2F5LCB0aGlzIGZpeGVzIGl0LCBvZmM6DQo+IA0KPiBkaWZmIC0tZ2l0IGEv
YXJjaC94ODYva2VybmVsL2NwdS9jYWNoZWluZm8uYyBiL2FyY2gveDg2L2tlcm5lbC9jcHUv
Y2FjaGVpbmZvLmMNCj4gaW5kZXggMzgwNWE2ZDMyZDM3Li40YTY4NTg5OGNhZjMgMTAwNjQ0
DQo+IC0tLSBhL2FyY2gveDg2L2tlcm5lbC9jcHUvY2FjaGVpbmZvLmMNCj4gKysrIGIvYXJj
aC94ODYva2VybmVsL2NwdS9jYWNoZWluZm8uYw0KPiBAQCAtMTExNiwxMiArMTExNiwxNCBA
QCB2b2lkIGNhY2hlX2VuYWJsZShzdHJ1Y3QgY2FjaGVfc3RhdGUgKnN0YXRlKQ0KPiAgICAg
ICAgICAgICAgICAgIF9fd3JpdGVfY3I0KHN0YXRlLT5jcjQpOw0KPiAgIH0NCj4gICANCj4g
K3N0YXRpYyBERUZJTkVfUkFXX1NQSU5MT0NLKHNldF9hdG9taWNpdHlfbG9jayk7DQo+ICsN
Cj4gICBzdGF0aWMgdm9pZCBjYWNoZV9jcHVfaW5pdCh2b2lkKQ0KPiAgIHsNCj4gICAgICAg
ICAgdW5zaWduZWQgbG9uZyBmbGFnczsNCj4gICAgICAgICAgc3RydWN0IGNhY2hlX3N0YXRl
IHN0YXRlID0geyB9Ow0KPiAgIA0KPiAtICAgICAgIGxvY2FsX2lycV9zYXZlKGZsYWdzKTsN
Cj4gKyAgICAgICByYXdfc3Bpbl9sb2NrX2lycXNhdmUoJnNldF9hdG9taWNpdHlfbG9jaywg
ZmxhZ3MpOw0KPiAgICAgICAgICBjYWNoZV9kaXNhYmxlKCZzdGF0ZSk7DQo+ICAgDQo+ICAg
ICAgICAgIGlmIChtZW1vcnlfY2FjaGluZ19jb250cm9sICYgQ0FDSEVfTVRSUikNCj4gQEAg
LTExMzEsNyArMTEzMyw3IEBAIHN0YXRpYyB2b2lkIGNhY2hlX2NwdV9pbml0KHZvaWQpDQo+
ICAgICAgICAgICAgICAgICAgcGF0X2NwdV9pbml0KCk7DQo+ICAgDQo+ICAgICAgICAgIGNh
Y2hlX2VuYWJsZSgmc3RhdGUpOw0KPiAtICAgICAgIGxvY2FsX2lycV9yZXN0b3JlKGZsYWdz
KTsNCj4gKyAgICAgICByYXdfc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmc2V0X2F0b21pY2l0
eV9sb2NrLCBmbGFncyk7DQo+ICAgfQ0KPiAgIA0KPiAgIHN0YXRpYyBib29sIGNhY2hlX2Fw
c19kZWxheWVkX2luaXQgPSB0cnVlOw0KPiANCj4gLS0tDQo+IA0KPiBhbmQgZnJhbmtseSwg
Y29uc2lkZXJpbmcgaG93IHdlIGhhdmUgYmlnZ2VyIGZpc2ggdG8gZnJ5LCBJJ2Qgc2F5IHdl
IGRvDQo+IGl0IHRoZSBvbGQgd2F5IGFuZCBsZWF2ZSB0aGF0IGNhbidvJ3dvcm1zIGhhbGYt
b3BlbmVkLg0KDQpJIGFncmVlIHRvIGtlZXAgdGhpcyBwYXRjaCBvdXQgb2YgdGhlIHNlcmll
cyBmb3Igbm93Lg0KDQo+IA0KPiBVbmxlc3MgeW91IHdhbm5hIGNvbnRpbnVlIHBva2luZyBh
dCBpdC4gSSBjYW4gZ2l2ZSB5b3UgYWNjZXNzIHRvIHRoYXQNCj4gYm94IGF0IHdvcmsuLi4N
Cg0KWWVzLCBwbGVhc2UuIEkgc3VzcGVjdCB0aGVyZSBhcmUgc29tZSBhZGRpdGlvbmFsIHJl
cXVpcmVtZW50cyBmb3IgdXBkYXRpbmcNCk1UUlIgaW4gcGFyYWxsZWwsIG9yIHRoaXMgaXMg
Imp1c3QiIGEgY3B1IGJ1Zy4NCg0KDQpKdWVyZ2VuDQoNCg==
--------------WaUMbipUjVJcx0IYFnfX6Oqr
Content-Type: application/pgp-keys; name="OpenPGP_0xB0DE9DD628BF132F.asc"
Content-Disposition: attachment; filename="OpenPGP_0xB0DE9DD628BF132F.asc"
Content-Description: OpenPGP public key
Content-Transfer-Encoding: quoted-printable

-----BEGIN PGP PUBLIC KEY BLOCK-----

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
jR/i1DG86lem3iBDXzXsZDn8R38=3D
=3D2wuH
-----END PGP PUBLIC KEY BLOCK-----

--------------WaUMbipUjVJcx0IYFnfX6Oqr--

--------------APjrBc1NLW3aAcYvAn5CBfF6--

--------------eOLXkV3TnoN0aGvz00t0fOg8
Content-Type: application/pgp-signature; name="OpenPGP_signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="OpenPGP_signature"

-----BEGIN PGP SIGNATURE-----

wsB5BAABCAAjFiEEhRJncuj2BJSl0Jf3sN6d1ii/Ey8FAmNqBYsFAwAAAAAACgkQsN6d1ii/Ey8a
Agf+N7qANeqX/OyIInAC/i3miQ7uYrNm3G1bhNlBIiZXAJf1UYNkfZ5wGZHyCQCKuw7zgCisc3Hs
cf9r+hEPmv3i9NWSwmOoJSD+e+3mGg2mPdDC4flTrwyfH44n5uGucK4XjtAGO4bKEiK4SjFr0ZJZ
j4Jz+YOnWJ52yX2dfKLhF56jAjIDJI66sgwTo3BBGYhDV7Y8Oi36isPfrgGVokct+/pVCNSJeDFN
4lBgdRoXywANqi4fYKGwZSLGLWxidbDQJWevebZ3OKp2u6BgzQ583Ii/nX2i9E8Pm+b0hPbmCUXY
pECkdGOS4SLrzmW3FRiwSzWr4EGrboefk5nf3a1ijA==
=y07V
-----END PGP SIGNATURE-----

--------------eOLXkV3TnoN0aGvz00t0fOg8--

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id E5810C433FE
	for <linux-kernel@archiver.kernel.org>; Thu, 10 Nov 2022 12:21:55 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230382AbiKJMVy (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 10 Nov 2022 07:21:54 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:36990 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229560AbiKJMVu (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 10 Nov 2022 07:21:50 -0500
Received: from galois.linutronix.de (Galois.linutronix.de [IPv6:2a0a:51c0:0:12e:550::1])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 26D082AE03;
        Thu, 10 Nov 2022 04:21:49 -0800 (PST)
Date:   Thu, 10 Nov 2022 12:21:45 -0000
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020; t=1668082907;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=K1OT911XdDs3yG/pnNaK+K8I2VvLnvr5ImbIi7GuHWM=;
        b=TwSSAyvPfLB0av9i5FzmubMOho7bvU7Bat/LInHwaTMZoFOzr/iyurpbsAnjn6hIBkv779
        axUSfrstzOo93h6Re6X++VSrdW83GdHgiVLm5qRhpH8/vhhLO6tGxcziFcm44uaHqBe8PI
        4LtBJ6RlkbEYxQsllvi7I7cDy5JF9gIEPV0Kbi5/fLUXNSSxXvFyY/Cgxrgjt2NAZqUZkN
        4ZKEv2S13b4dRkT/Wegxv+EQusQYDNPvn2e7yV++nDshfVu19x43eaAuvKFVAuOQzFXv8I
        VxNpLT++rLtttAyDjgNxEFMtjcwL57VfcFmOM4O5EVbMZFSe4/Vkm/5aFvDjgQ==
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020e; t=1668082907;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=K1OT911XdDs3yG/pnNaK+K8I2VvLnvr5ImbIi7GuHWM=;
        b=kCYd9lTcM1AJDV4SLBAzLnPjsMsRXVFlFNLKIofw+ERSe33PCfhpV/dw7/nBTUe7ng839Q
        LljFAd3ULPh//RCg==
From:   "tip-bot2 for Juergen Gross" <tip-bot2@linutronix.de>
Sender: tip-bot2@linutronix.de
Reply-to: linux-kernel@vger.kernel.org
To:     linux-tip-commits@vger.kernel.org
Subject: [tip: x86/cpu] x86/mtrr: Simplify mtrr_ops initialization
Cc:     Juergen Gross <jgross@suse.com>, Borislav Petkov <bp@suse.de>,
        x86@kernel.org, linux-kernel@vger.kernel.org
In-Reply-To: <20221102074713.21493-17-jgross@suse.com>
References: <20221102074713.21493-17-jgross@suse.com>
MIME-Version: 1.0
Message-ID: <166808290573.4906.10004430702775497703.tip-bot2@tip-bot2>
Robot-ID: <tip-bot2@linutronix.de>
Robot-Unsubscribe: Contact <mailto:tglx@linutronix.de> to get blacklisted from these emails
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The following commit has been merged into the x86/cpu branch of tip:

Commit-ID:     f8bd9f25c9815161a39886fdd96d110b536a6074
Gitweb:        https://git.kernel.org/tip/f8bd9f25c9815161a39886fdd96d110b536a6074
Author:        Juergen Gross <jgross@suse.com>
AuthorDate:    Wed, 02 Nov 2022 08:47:13 +01:00
Committer:     Borislav Petkov <bp@suse.de>
CommitterDate: Thu, 10 Nov 2022 13:12:45 +01:00

x86/mtrr: Simplify mtrr_ops initialization

The way mtrr_if is initialized with the correct mtrr_ops structure is
quite weird.

Simplify that by dropping the vendor specific init functions and the
mtrr_ops[] array. Replace those with direct assignments of the related
vendor specific ops array to mtrr_if.

Note that a direct assignment is okay even for 64-bit builds, where the
symbol isn't present, as the related code will be subject to "dead code
elimination" due to how cpu_feature_enabled() is implemented.

Signed-off-by: Juergen Gross <jgross@suse.com>
Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lore.kernel.org/r/20221102074713.21493-17-jgross@suse.com
Signed-off-by: Borislav Petkov <bp@suse.de>
---
 arch/x86/kernel/cpu/mtrr/amd.c     |  8 +-------
 arch/x86/kernel/cpu/mtrr/centaur.c |  8 +-------
 arch/x86/kernel/cpu/mtrr/cyrix.c   |  8 +-------
 arch/x86/kernel/cpu/mtrr/mtrr.c    | 30 ++---------------------------
 arch/x86/kernel/cpu/mtrr/mtrr.h    | 10 ++++------
 5 files changed, 10 insertions(+), 54 deletions(-)

diff --git a/arch/x86/kernel/cpu/mtrr/amd.c b/arch/x86/kernel/cpu/mtrr/amd.c
index a65a027..eff6ac6 100644
--- a/arch/x86/kernel/cpu/mtrr/amd.c
+++ b/arch/x86/kernel/cpu/mtrr/amd.c
@@ -109,7 +109,7 @@ amd_validate_add_page(unsigned long base, unsigned long size, unsigned int type)
 	return 0;
 }
 
-static const struct mtrr_ops amd_mtrr_ops = {
+const struct mtrr_ops amd_mtrr_ops = {
 	.vendor            = X86_VENDOR_AMD,
 	.set               = amd_set_mtrr,
 	.get               = amd_get_mtrr,
@@ -117,9 +117,3 @@ static const struct mtrr_ops amd_mtrr_ops = {
 	.validate_add_page = amd_validate_add_page,
 	.have_wrcomb       = positive_have_wrcomb,
 };
-
-int __init amd_init_mtrr(void)
-{
-	set_mtrr_ops(&amd_mtrr_ops);
-	return 0;
-}
diff --git a/arch/x86/kernel/cpu/mtrr/centaur.c b/arch/x86/kernel/cpu/mtrr/centaur.c
index f271778..b8a74ed 100644
--- a/arch/x86/kernel/cpu/mtrr/centaur.c
+++ b/arch/x86/kernel/cpu/mtrr/centaur.c
@@ -111,7 +111,7 @@ centaur_validate_add_page(unsigned long base, unsigned long size, unsigned int t
 	return 0;
 }
 
-static const struct mtrr_ops centaur_mtrr_ops = {
+const struct mtrr_ops centaur_mtrr_ops = {
 	.vendor            = X86_VENDOR_CENTAUR,
 	.set               = centaur_set_mcr,
 	.get               = centaur_get_mcr,
@@ -119,9 +119,3 @@ static const struct mtrr_ops centaur_mtrr_ops = {
 	.validate_add_page = centaur_validate_add_page,
 	.have_wrcomb       = positive_have_wrcomb,
 };
-
-int __init centaur_init_mtrr(void)
-{
-	set_mtrr_ops(&centaur_mtrr_ops);
-	return 0;
-}
diff --git a/arch/x86/kernel/cpu/mtrr/cyrix.c b/arch/x86/kernel/cpu/mtrr/cyrix.c
index c77d3b0..173b9e0 100644
--- a/arch/x86/kernel/cpu/mtrr/cyrix.c
+++ b/arch/x86/kernel/cpu/mtrr/cyrix.c
@@ -234,7 +234,7 @@ static void cyrix_set_arr(unsigned int reg, unsigned long base,
 	post_set();
 }
 
-static const struct mtrr_ops cyrix_mtrr_ops = {
+const struct mtrr_ops cyrix_mtrr_ops = {
 	.vendor            = X86_VENDOR_CYRIX,
 	.set               = cyrix_set_arr,
 	.get               = cyrix_get_arr,
@@ -242,9 +242,3 @@ static const struct mtrr_ops cyrix_mtrr_ops = {
 	.validate_add_page = generic_validate_add_page,
 	.have_wrcomb       = positive_have_wrcomb,
 };
-
-int __init cyrix_init_mtrr(void)
-{
-	set_mtrr_ops(&cyrix_mtrr_ops);
-	return 0;
-}
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.c b/arch/x86/kernel/cpu/mtrr/mtrr.c
index 8403daf..6432abc 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.c
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.c
@@ -69,16 +69,8 @@ static DEFINE_MUTEX(mtrr_mutex);
 
 u64 size_or_mask, size_and_mask;
 
-static const struct mtrr_ops *mtrr_ops[X86_VENDOR_NUM] __ro_after_init;
-
 const struct mtrr_ops *mtrr_if;
 
-void __init set_mtrr_ops(const struct mtrr_ops *ops)
-{
-	if (ops->vendor && ops->vendor < X86_VENDOR_NUM)
-		mtrr_ops[ops->vendor] = ops;
-}
-
 /*  Returns non-zero if we have the write-combining memory type  */
 static int have_wrcomb(void)
 {
@@ -582,20 +574,6 @@ int arch_phys_wc_index(int handle)
 }
 EXPORT_SYMBOL_GPL(arch_phys_wc_index);
 
-/*
- * HACK ALERT!
- * These should be called implicitly, but we can't yet until all the initcall
- * stuff is done...
- */
-static void __init init_ifs(void)
-{
-#ifndef CONFIG_X86_64
-	amd_init_mtrr();
-	cyrix_init_mtrr();
-	centaur_init_mtrr();
-#endif
-}
-
 /* The suspend/resume methods are only for CPU without MTRR. CPU using generic
  * MTRR driver doesn't require this
  */
@@ -653,8 +631,6 @@ void __init mtrr_bp_init(void)
 {
 	u32 phys_addr;
 
-	init_ifs();
-
 	phys_addr = 32;
 
 	if (boot_cpu_has(X86_FEATURE_MTRR)) {
@@ -695,21 +671,21 @@ void __init mtrr_bp_init(void)
 		case X86_VENDOR_AMD:
 			if (cpu_feature_enabled(X86_FEATURE_K6_MTRR)) {
 				/* Pre-Athlon (K6) AMD CPU MTRRs */
-				mtrr_if = mtrr_ops[X86_VENDOR_AMD];
+				mtrr_if = &amd_mtrr_ops;
 				size_or_mask = SIZE_OR_MASK_BITS(32);
 				size_and_mask = 0;
 			}
 			break;
 		case X86_VENDOR_CENTAUR:
 			if (cpu_feature_enabled(X86_FEATURE_CENTAUR_MCR)) {
-				mtrr_if = mtrr_ops[X86_VENDOR_CENTAUR];
+				mtrr_if = &centaur_mtrr_ops;
 				size_or_mask = SIZE_OR_MASK_BITS(32);
 				size_and_mask = 0;
 			}
 			break;
 		case X86_VENDOR_CYRIX:
 			if (cpu_feature_enabled(X86_FEATURE_CYRIX_ARR)) {
-				mtrr_if = mtrr_ops[X86_VENDOR_CYRIX];
+				mtrr_if = &cyrix_mtrr_ops;
 				size_or_mask = SIZE_OR_MASK_BITS(32);
 				size_and_mask = 0;
 			}
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.h b/arch/x86/kernel/cpu/mtrr/mtrr.h
index c98928c..02eb587 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.h
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.h
@@ -51,8 +51,6 @@ void fill_mtrr_var_range(unsigned int index,
 		u32 base_lo, u32 base_hi, u32 mask_lo, u32 mask_hi);
 bool get_mtrr_state(void);
 
-extern void __init set_mtrr_ops(const struct mtrr_ops *ops);
-
 extern u64 size_or_mask, size_and_mask;
 extern const struct mtrr_ops *mtrr_if;
 
@@ -66,10 +64,10 @@ void mtrr_state_warn(void);
 const char *mtrr_attrib_to_str(int x);
 void mtrr_wrmsr(unsigned, unsigned, unsigned);
 
-/* CPU specific mtrr init functions */
-int amd_init_mtrr(void);
-int cyrix_init_mtrr(void);
-int centaur_init_mtrr(void);
+/* CPU specific mtrr_ops vectors. */
+extern const struct mtrr_ops amd_mtrr_ops;
+extern const struct mtrr_ops cyrix_mtrr_ops;
+extern const struct mtrr_ops centaur_mtrr_ops;
 
 extern int changed_by_mtrr_cleanup;
 extern int mtrr_cleanup(unsigned address_bits);

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 569F6C433FE
	for <linux-kernel@archiver.kernel.org>; Thu, 10 Nov 2022 12:22:03 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S231151AbiKJMWA (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 10 Nov 2022 07:22:00 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:37002 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230266AbiKJMVw (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 10 Nov 2022 07:21:52 -0500
Received: from galois.linutronix.de (Galois.linutronix.de [193.142.43.55])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id D20966CA0D;
        Thu, 10 Nov 2022 04:21:50 -0800 (PST)
Date:   Thu, 10 Nov 2022 12:21:48 -0000
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020; t=1668082909;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=78b1088US8rujCnbgfiPCf4trk06P/JOFUYrMtVUufw=;
        b=fO08zahsTMngj32AnurFl0pMLDSUJA6YtxyqMT3bEReWZI1OSUn2C5hDM9cIdpLMSH3+eW
        GO9EL1tl1+tC/cgnJSWItcpaArjLx5VHA0Kt32uiPYzPxMSOVoawVwd4XCWqeKoMpPisBa
        W2lKw8F8dqFn48809m+66lR9JORaOrjlqtgnJW0KjYoHXOy0TVUa3XheGBijbcinNF7xad
        Lp2w/zCD1/qimelFCJ6ClT1L9mbJIRrXMoWKuPS6HCfSgzSmRy33bUp4dtk+WyO85SwEml
        B01Ffd8N8Idw+6pyLy0fH8L1seZ7o3ot0XwBbC4URuEWtIuKhaxW4v9W78eICQ==
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020e; t=1668082909;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=78b1088US8rujCnbgfiPCf4trk06P/JOFUYrMtVUufw=;
        b=hB3WzlPKbnlbVopbzLmE+jxerleFxeoX328ZIEcZ8sjSplAFynxH3Qhq1DaBj1JELOJsYH
        oo7BM+mTgC9n5fAA==
From:   "tip-bot2 for Juergen Gross" <tip-bot2@linutronix.de>
Sender: tip-bot2@linutronix.de
Reply-to: linux-kernel@vger.kernel.org
To:     linux-tip-commits@vger.kernel.org
Subject: [tip: x86/cpu] x86: Decouple PAT and MTRR handling
Cc:     Juergen Gross <jgross@suse.com>, Borislav Petkov <bp@suse.de>,
        x86@kernel.org, linux-kernel@vger.kernel.org
In-Reply-To: <20221102074713.21493-14-jgross@suse.com>
References: <20221102074713.21493-14-jgross@suse.com>
MIME-Version: 1.0
Message-ID: <166808290807.4906.5390493917864297840.tip-bot2@tip-bot2>
Robot-ID: <tip-bot2@linutronix.de>
Robot-Unsubscribe: Contact <mailto:tglx@linutronix.de> to get blacklisted from these emails
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The following commit has been merged into the x86/cpu branch of tip:

Commit-ID:     adfe7512e1d0b2e83215b0ec56337d2df9f1032d
Gitweb:        https://git.kernel.org/tip/adfe7512e1d0b2e83215b0ec56337d2df9f1032d
Author:        Juergen Gross <jgross@suse.com>
AuthorDate:    Wed, 02 Nov 2022 08:47:10 +01:00
Committer:     Borislav Petkov <bp@suse.de>
CommitterDate: Thu, 10 Nov 2022 13:12:45 +01:00

x86: Decouple PAT and MTRR handling

Today, PAT is usable only with MTRR being active, with some nasty tweaks
to make PAT usable when running as a Xen PV guest which doesn't support
MTRR.

The reason for this coupling is that both PAT MSR changes and MTRR
changes require a similar sequence and so full PAT support was added
using the already available MTRR handling.

Xen PV PAT handling can work without MTRR, as it just needs to consume
the PAT MSR setting done by the hypervisor without the ability and need
to change it. This in turn has resulted in a convoluted initialization
sequence and wrong decisions regarding cache mode availability due to
misguiding PAT availability flags.

Fix all of that by allowing to use PAT without MTRR and by reworking
the current PAT initialization sequence to match better with the newly
introduced generic cache initialization.

This removes the need of the recently added pat_force_disabled flag, so
remove the remnants of the patch adding it.

Signed-off-by: Juergen Gross <jgross@suse.com>
Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lore.kernel.org/r/20221102074713.21493-14-jgross@suse.com
Signed-off-by: Borislav Petkov <bp@suse.de>
---
 arch/x86/include/asm/memtype.h  |   5 +-
 arch/x86/kernel/cpu/cacheinfo.c |   3 +-
 arch/x86/kernel/cpu/mtrr/mtrr.c |  12 +--
 arch/x86/kernel/setup.c         |  13 +---
 arch/x86/mm/pat/memtype.c       | 152 ++++++++++---------------------
 5 files changed, 57 insertions(+), 128 deletions(-)

diff --git a/arch/x86/include/asm/memtype.h b/arch/x86/include/asm/memtype.h
index 9ca760e..113b2fa 100644
--- a/arch/x86/include/asm/memtype.h
+++ b/arch/x86/include/asm/memtype.h
@@ -6,9 +6,8 @@
 #include <asm/pgtable_types.h>
 
 extern bool pat_enabled(void);
-extern void pat_disable(const char *reason);
-extern void pat_init(void);
-extern void init_cache_modes(void);
+extern void pat_bp_init(void);
+extern void pat_cpu_init(void);
 
 extern int memtype_reserve(u64 start, u64 end,
 		enum page_cache_mode req_pcm, enum page_cache_mode *ret_pcm);
diff --git a/arch/x86/kernel/cpu/cacheinfo.c b/arch/x86/kernel/cpu/cacheinfo.c
index 4e155bd..c830f85 100644
--- a/arch/x86/kernel/cpu/cacheinfo.c
+++ b/arch/x86/kernel/cpu/cacheinfo.c
@@ -1133,7 +1133,7 @@ static void cache_cpu_init(void)
 		mtrr_generic_set_state();
 
 	if (memory_caching_control & CACHE_PAT)
-		pat_init();
+		pat_cpu_init();
 
 	cache_enable();
 	local_irq_restore(flags);
@@ -1162,6 +1162,7 @@ static int cache_rendezvous_handler(void *unused)
 void __init cache_bp_init(void)
 {
 	mtrr_bp_init();
+	pat_bp_init();
 
 	if (memory_caching_control)
 		cache_cpu_init();
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.c b/arch/x86/kernel/cpu/mtrr/mtrr.c
index 99b6973..8403daf 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.c
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.c
@@ -725,7 +725,7 @@ void __init mtrr_bp_init(void)
 		if (mtrr_if == &generic_mtrr_ops) {
 			/* BIOS may override */
 			if (get_mtrr_state()) {
-				memory_caching_control |= CACHE_MTRR | CACHE_PAT;
+				memory_caching_control |= CACHE_MTRR;
 				changed_by_mtrr_cleanup = mtrr_cleanup(phys_addr);
 			} else {
 				mtrr_if = NULL;
@@ -733,16 +733,8 @@ void __init mtrr_bp_init(void)
 		}
 	}
 
-	if (!mtrr_enabled()) {
+	if (!mtrr_enabled())
 		pr_info("Disabled\n");
-
-		/*
-		 * PAT initialization relies on MTRR's rendezvous handler.
-		 * Skip PAT init until the handler can initialize both
-		 * features independently.
-		 */
-		pat_disable("MTRRs disabled, skipping PAT initialization too.");
-	}
 }
 
 /**
diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c
index e0e185e..aacaa96 100644
--- a/arch/x86/kernel/setup.c
+++ b/arch/x86/kernel/setup.c
@@ -1075,24 +1075,13 @@ void __init setup_arch(char **cmdline_p)
 	max_pfn = e820__end_of_ram_pfn();
 
 	/* update e820 for memory not covered by WB MTRRs */
-	if (IS_ENABLED(CONFIG_MTRR))
-		cache_bp_init();
-	else
-		pat_disable("PAT support disabled because CONFIG_MTRR is disabled in the kernel.");
-
+	cache_bp_init();
 	if (mtrr_trim_uncached_memory(max_pfn))
 		max_pfn = e820__end_of_ram_pfn();
 
 	max_possible_pfn = max_pfn;
 
 	/*
-	 * This call is required when the CPU does not support PAT. If
-	 * mtrr_bp_init() invoked it already via pat_init() the call has no
-	 * effect.
-	 */
-	init_cache_modes();
-
-	/*
 	 * Define random base addresses for memory sections after max_pfn is
 	 * defined and before each memory section base is used.
 	 */
diff --git a/arch/x86/mm/pat/memtype.c b/arch/x86/mm/pat/memtype.c
index 66a209f..9aab17d 100644
--- a/arch/x86/mm/pat/memtype.c
+++ b/arch/x86/mm/pat/memtype.c
@@ -43,6 +43,7 @@
 #include <linux/rbtree.h>
 
 #include <asm/cacheflush.h>
+#include <asm/cacheinfo.h>
 #include <asm/processor.h>
 #include <asm/tlbflush.h>
 #include <asm/x86_init.h>
@@ -60,41 +61,34 @@
 #undef pr_fmt
 #define pr_fmt(fmt) "" fmt
 
-static bool __read_mostly pat_bp_initialized;
 static bool __read_mostly pat_disabled = !IS_ENABLED(CONFIG_X86_PAT);
-static bool __initdata pat_force_disabled = !IS_ENABLED(CONFIG_X86_PAT);
-static bool __read_mostly pat_bp_enabled;
-static bool __read_mostly pat_cm_initialized;
+static u64 __ro_after_init pat_msr_val;
 
 /*
  * PAT support is enabled by default, but can be disabled for
  * various user-requested or hardware-forced reasons:
  */
-void pat_disable(const char *msg_reason)
+static void __init pat_disable(const char *msg_reason)
 {
 	if (pat_disabled)
 		return;
 
-	if (pat_bp_initialized) {
-		WARN_ONCE(1, "x86/PAT: PAT cannot be disabled after initialization\n");
-		return;
-	}
-
 	pat_disabled = true;
 	pr_info("x86/PAT: %s\n", msg_reason);
+
+	memory_caching_control &= ~CACHE_PAT;
 }
 
 static int __init nopat(char *str)
 {
 	pat_disable("PAT support disabled via boot option.");
-	pat_force_disabled = true;
 	return 0;
 }
 early_param("nopat", nopat);
 
 bool pat_enabled(void)
 {
-	return pat_bp_enabled;
+	return !pat_disabled;
 }
 EXPORT_SYMBOL_GPL(pat_enabled);
 
@@ -192,7 +186,8 @@ enum {
 
 #define CM(c) (_PAGE_CACHE_MODE_ ## c)
 
-static enum page_cache_mode pat_get_cache_mode(unsigned pat_val, char *msg)
+static enum page_cache_mode __init pat_get_cache_mode(unsigned int pat_val,
+						      char *msg)
 {
 	enum page_cache_mode cache;
 	char *cache_mode;
@@ -219,14 +214,12 @@ static enum page_cache_mode pat_get_cache_mode(unsigned pat_val, char *msg)
  * configuration.
  * Using lower indices is preferred, so we start with highest index.
  */
-static void __init_cache_modes(u64 pat)
+static void __init init_cache_modes(u64 pat)
 {
 	enum page_cache_mode cache;
 	char pat_msg[33];
 	int i;
 
-	WARN_ON_ONCE(pat_cm_initialized);
-
 	pat_msg[32] = 0;
 	for (i = 7; i >= 0; i--) {
 		cache = pat_get_cache_mode((pat >> (i * 8)) & 7,
@@ -234,34 +227,9 @@ static void __init_cache_modes(u64 pat)
 		update_cache_mode_entry(i, cache);
 	}
 	pr_info("x86/PAT: Configuration [0-7]: %s\n", pat_msg);
-
-	pat_cm_initialized = true;
 }
 
-#define PAT(x, y)	((u64)PAT_ ## y << ((x)*8))
-
-static void pat_bp_init(u64 pat)
-{
-	u64 tmp_pat;
-
-	if (!boot_cpu_has(X86_FEATURE_PAT)) {
-		pat_disable("PAT not supported by the CPU.");
-		return;
-	}
-
-	rdmsrl(MSR_IA32_CR_PAT, tmp_pat);
-	if (!tmp_pat) {
-		pat_disable("PAT support disabled by the firmware.");
-		return;
-	}
-
-	wrmsrl(MSR_IA32_CR_PAT, pat);
-	pat_bp_enabled = true;
-
-	__init_cache_modes(pat);
-}
-
-static void pat_ap_init(u64 pat)
+void pat_cpu_init(void)
 {
 	if (!boot_cpu_has(X86_FEATURE_PAT)) {
 		/*
@@ -271,30 +239,39 @@ static void pat_ap_init(u64 pat)
 		panic("x86/PAT: PAT enabled, but not supported by secondary CPU\n");
 	}
 
-	wrmsrl(MSR_IA32_CR_PAT, pat);
+	wrmsrl(MSR_IA32_CR_PAT, pat_msr_val);
 }
 
-void __init init_cache_modes(void)
+/**
+ * pat_bp_init - Initialize the PAT MSR value and PAT table
+ *
+ * This function initializes PAT MSR value and PAT table with an OS-defined
+ * value to enable additional cache attributes, WC, WT and WP.
+ *
+ * This function prepares the calls of pat_cpu_init() via cache_cpu_init()
+ * on all CPUs.
+ */
+void __init pat_bp_init(void)
 {
-	u64 pat = 0;
+	struct cpuinfo_x86 *c = &boot_cpu_data;
+#define PAT(p0, p1, p2, p3, p4, p5, p6, p7)			\
+	(((u64)PAT_ ## p0) | ((u64)PAT_ ## p1 << 8) |		\
+	((u64)PAT_ ## p2 << 16) | ((u64)PAT_ ## p3 << 24) |	\
+	((u64)PAT_ ## p4 << 32) | ((u64)PAT_ ## p5 << 40) |	\
+	((u64)PAT_ ## p6 << 48) | ((u64)PAT_ ## p7 << 56))
 
-	if (pat_cm_initialized)
-		return;
 
-	if (boot_cpu_has(X86_FEATURE_PAT)) {
-		/*
-		 * CPU supports PAT. Set PAT table to be consistent with
-		 * PAT MSR. This case supports "nopat" boot option, and
-		 * virtual machine environments which support PAT without
-		 * MTRRs. In specific, Xen has unique setup to PAT MSR.
-		 *
-		 * If PAT MSR returns 0, it is considered invalid and emulates
-		 * as No PAT.
-		 */
-		rdmsrl(MSR_IA32_CR_PAT, pat);
-	}
+	if (!IS_ENABLED(CONFIG_X86_PAT))
+		pr_info_once("x86/PAT: PAT support disabled because CONFIG_X86_PAT is disabled in the kernel.\n");
+
+	if (!cpu_feature_enabled(X86_FEATURE_PAT))
+		pat_disable("PAT not supported by the CPU.");
+	else
+		rdmsrl(MSR_IA32_CR_PAT, pat_msr_val);
+
+	if (!pat_msr_val) {
+		pat_disable("PAT support disabled by the firmware.");
 
-	if (!pat) {
 		/*
 		 * No PAT. Emulate the PAT table that corresponds to the two
 		 * cache bits, PWT (Write Through) and PCD (Cache Disable).
@@ -313,40 +290,17 @@ void __init init_cache_modes(void)
 		 * NOTE: When WC or WP is used, it is redirected to UC- per
 		 * the default setup in __cachemode2pte_tbl[].
 		 */
-		pat = PAT(0, WB) | PAT(1, WT) | PAT(2, UC_MINUS) | PAT(3, UC) |
-		      PAT(4, WB) | PAT(5, WT) | PAT(6, UC_MINUS) | PAT(7, UC);
-	} else if (!pat_force_disabled && cpu_feature_enabled(X86_FEATURE_HYPERVISOR)) {
-		/*
-		 * Clearly PAT is enabled underneath. Allow pat_enabled() to
-		 * reflect this.
-		 */
-		pat_bp_enabled = true;
+		pat_msr_val = PAT(WB, WT, UC_MINUS, UC, WB, WT, UC_MINUS, UC);
 	}
 
-	__init_cache_modes(pat);
-}
-
-/**
- * pat_init - Initialize the PAT MSR and PAT table on the current CPU
- *
- * This function initializes PAT MSR and PAT table with an OS-defined value
- * to enable additional cache attributes, WC, WT and WP.
- *
- * This function must be called on all CPUs using the specific sequence of
- * operations defined in Intel SDM. mtrr_rendezvous_handler() provides this
- * procedure for PAT.
- */
-void pat_init(void)
-{
-	u64 pat;
-	struct cpuinfo_x86 *c = &boot_cpu_data;
-
-#ifndef CONFIG_X86_PAT
-	pr_info_once("x86/PAT: PAT support disabled because CONFIG_X86_PAT is disabled in the kernel.\n");
-#endif
-
-	if (pat_disabled)
+	/*
+	 * Xen PV doesn't allow to set PAT MSR, but all cache modes are
+	 * supported.
+	 */
+	if (pat_disabled || cpu_feature_enabled(X86_FEATURE_XENPV)) {
+		init_cache_modes(pat_msr_val);
 		return;
+	}
 
 	if ((c->x86_vendor == X86_VENDOR_INTEL) &&
 	    (((c->x86 == 0x6) && (c->x86_model <= 0xd)) ||
@@ -371,8 +325,7 @@ void pat_init(void)
 		 * NOTE: When WT or WP is used, it is redirected to UC- per
 		 * the default setup in __cachemode2pte_tbl[].
 		 */
-		pat = PAT(0, WB) | PAT(1, WC) | PAT(2, UC_MINUS) | PAT(3, UC) |
-		      PAT(4, WB) | PAT(5, WC) | PAT(6, UC_MINUS) | PAT(7, UC);
+		pat_msr_val = PAT(WB, WC, UC_MINUS, UC, WB, WC, UC_MINUS, UC);
 	} else {
 		/*
 		 * Full PAT support.  We put WT in slot 7 to improve
@@ -400,19 +353,14 @@ void pat_init(void)
 		 * The reserved slots are unused, but mapped to their
 		 * corresponding types in the presence of PAT errata.
 		 */
-		pat = PAT(0, WB) | PAT(1, WC) | PAT(2, UC_MINUS) | PAT(3, UC) |
-		      PAT(4, WB) | PAT(5, WP) | PAT(6, UC_MINUS) | PAT(7, WT);
+		pat_msr_val = PAT(WB, WC, UC_MINUS, UC, WB, WP, UC_MINUS, WT);
 	}
 
-	if (!pat_bp_initialized) {
-		pat_bp_init(pat);
-		pat_bp_initialized = true;
-	} else {
-		pat_ap_init(pat);
-	}
-}
+	memory_caching_control |= CACHE_PAT;
 
+	init_cache_modes(pat_msr_val);
 #undef PAT
+}
 
 static DEFINE_SPINLOCK(memtype_lock);	/* protects memtype accesses */
 

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 17CAFC4332F
	for <linux-kernel@archiver.kernel.org>; Thu, 10 Nov 2022 12:22:03 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230521AbiKJMV5 (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 10 Nov 2022 07:21:57 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:36992 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229788AbiKJMVu (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 10 Nov 2022 07:21:50 -0500
Received: from galois.linutronix.de (Galois.linutronix.de [IPv6:2a0a:51c0:0:12e:550::1])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id B4EEC71F2B;
        Thu, 10 Nov 2022 04:21:49 -0800 (PST)
Date:   Thu, 10 Nov 2022 12:21:46 -0000
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020; t=1668082908;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=xG/9a6H6NEua6gewILu/XAdkJNWyOE+MgdGKSbBLNCA=;
        b=BBQGl5Oqsopv35OV7GkuHsZaXiQ2SGD572zmJpaN80Qzv8Xp/4x/JMsynv3t7zTDsaJilg
        b0UMsRIxD2r+nERQEIT3O3rXIdcuCHhHlHkDw3I+O6OEDsqzbl62cVCtwOHDrXHtnmtx9a
        kUA917fHCcixMWmlTCMwHj9c+qSyG5uhLreVgTx72UBFPYC7g48YoR7xO1xK346+0dgF02
        6x7MFiEXcC2YE9A1LzXas3BT0BrNEnL1kTuXFUAiAqOym7jrwuHctyhtlnKb8gS7L5xPYX
        A/9czB7kjtMfi5o7657WqN7pkv9xRxkQGYIXzo8QiefmyfGscdvoqHdTV/mQTA==
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020e; t=1668082908;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=xG/9a6H6NEua6gewILu/XAdkJNWyOE+MgdGKSbBLNCA=;
        b=dz9wxP/Mp9nI2mtFR7Yf8dlrdhW6Sv4bGugw5sVyr56T9YpDysCMi/vBWO3jEXLWvmZBEr
        CrKMvvkwu6CeKkAw==
From:   "tip-bot2 for Juergen Gross" <tip-bot2@linutronix.de>
Sender: tip-bot2@linutronix.de
Reply-to: linux-kernel@vger.kernel.org
To:     linux-tip-commits@vger.kernel.org
Subject: [tip: x86/cpu] x86/cacheinfo: Switch cache_ap_init() to hotplug callback
Cc:     Borislav Petkov <bp@alien8.de>, Juergen Gross <jgross@suse.com>,
        Borislav Petkov <bp@suse.de>, x86@kernel.org,
        linux-kernel@vger.kernel.org
In-Reply-To: <20221102074713.21493-15-jgross@suse.com>
References: <20221102074713.21493-15-jgross@suse.com>
MIME-Version: 1.0
Message-ID: <166808290694.4906.14728095964138728478.tip-bot2@tip-bot2>
Robot-ID: <tip-bot2@linutronix.de>
Robot-Unsubscribe: Contact <mailto:tglx@linutronix.de> to get blacklisted from these emails
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The following commit has been merged into the x86/cpu branch of tip:

Commit-ID:     30f89e524becdbaa483b34902b079c9d4dfaa4a3
Gitweb:        https://git.kernel.org/tip/30f89e524becdbaa483b34902b079c9d4dfaa4a3
Author:        Juergen Gross <jgross@suse.com>
AuthorDate:    Wed, 02 Nov 2022 08:47:11 +01:00
Committer:     Borislav Petkov <bp@suse.de>
CommitterDate: Thu, 10 Nov 2022 13:12:45 +01:00

x86/cacheinfo: Switch cache_ap_init() to hotplug callback

Instead of explicitly calling cache_ap_init() in
identify_secondary_cpu() use a CPU hotplug callback instead. By
registering the callback only after having started the non-boot CPUs
and initializing cache_aps_delayed_init with "true", calling
set_cache_aps_delayed_init() at boot time can be dropped.

It should be noted that this change results in cache_ap_init() being
called a little bit later when hotplugging CPUs. By using a new
hotplug slot right at the start of the low level bringup this is not
problematic, as no operations requiring a specific caching mode are
performed that early in CPU initialization.

Suggested-by: Borislav Petkov <bp@alien8.de>
Signed-off-by: Juergen Gross <jgross@suse.com>
Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lore.kernel.org/r/20221102074713.21493-15-jgross@suse.com
Signed-off-by: Borislav Petkov <bp@suse.de>
---
 arch/x86/include/asm/cacheinfo.h |  1 -
 arch/x86/kernel/cpu/cacheinfo.c  | 18 +++++++++++++++---
 arch/x86/kernel/cpu/common.c     |  1 -
 arch/x86/kernel/smpboot.c        |  2 --
 include/linux/cpuhotplug.h       |  1 +
 5 files changed, 16 insertions(+), 7 deletions(-)

diff --git a/arch/x86/include/asm/cacheinfo.h b/arch/x86/include/asm/cacheinfo.h
index a0ef46e..ce9685f 100644
--- a/arch/x86/include/asm/cacheinfo.h
+++ b/arch/x86/include/asm/cacheinfo.h
@@ -16,7 +16,6 @@ void set_cache_aps_delayed_init(bool val);
 bool get_cache_aps_delayed_init(void);
 void cache_bp_init(void);
 void cache_bp_restore(void);
-void cache_ap_init(void);
 void cache_aps_init(void);
 
 #endif /* _ASM_X86_CACHEINFO_H */
diff --git a/arch/x86/kernel/cpu/cacheinfo.c b/arch/x86/kernel/cpu/cacheinfo.c
index c830f85..f4e5aa2 100644
--- a/arch/x86/kernel/cpu/cacheinfo.c
+++ b/arch/x86/kernel/cpu/cacheinfo.c
@@ -11,6 +11,7 @@
 #include <linux/slab.h>
 #include <linux/cacheinfo.h>
 #include <linux/cpu.h>
+#include <linux/cpuhotplug.h>
 #include <linux/sched.h>
 #include <linux/capability.h>
 #include <linux/sysfs.h>
@@ -1139,7 +1140,7 @@ static void cache_cpu_init(void)
 	local_irq_restore(flags);
 }
 
-static bool cache_aps_delayed_init;
+static bool cache_aps_delayed_init = true;
 
 void set_cache_aps_delayed_init(bool val)
 {
@@ -1174,10 +1175,10 @@ void cache_bp_restore(void)
 		cache_cpu_init();
 }
 
-void cache_ap_init(void)
+static int cache_ap_init(unsigned int cpu)
 {
 	if (!memory_caching_control || get_cache_aps_delayed_init())
-		return;
+		return 0;
 
 	/*
 	 * Ideally we should hold mtrr_mutex here to avoid MTRR entries
@@ -1194,6 +1195,8 @@ void cache_ap_init(void)
 	 */
 	stop_machine_from_inactive_cpu(cache_rendezvous_handler, NULL,
 				       cpu_callout_mask);
+
+	return 0;
 }
 
 /*
@@ -1207,3 +1210,12 @@ void cache_aps_init(void)
 	stop_machine(cache_rendezvous_handler, NULL, cpu_online_mask);
 	set_cache_aps_delayed_init(false);
 }
+
+static int __init cache_ap_register(void)
+{
+	cpuhp_setup_state_nocalls(CPUHP_AP_CACHECTRL_STARTING,
+				  "x86/cachectrl:starting",
+				  cache_ap_init, NULL);
+	return 0;
+}
+core_initcall(cache_ap_register);
diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c
index fd058b5..bf4ac1c 100644
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@ -1949,7 +1949,6 @@ void identify_secondary_cpu(struct cpuinfo_x86 *c)
 #ifdef CONFIG_X86_32
 	enable_sep_cpu();
 #endif
-	cache_ap_init();
 	validate_apic_and_package_id(c);
 	x86_spec_ctrl_setup_ap();
 	update_srbds_msr();
diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c
index 1b61a48..82b311c 100644
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@ -1429,8 +1429,6 @@ void __init native_smp_prepare_cpus(unsigned int max_cpus)
 
 	uv_system_init();
 
-	set_cache_aps_delayed_init(true);
-
 	smp_quirk_init_udelay();
 
 	speculative_store_bypass_ht_init();
diff --git a/include/linux/cpuhotplug.h b/include/linux/cpuhotplug.h
index f614479..0d277b4 100644
--- a/include/linux/cpuhotplug.h
+++ b/include/linux/cpuhotplug.h
@@ -140,6 +140,7 @@ enum cpuhp_state {
 	 */
 	CPUHP_AP_IDLE_DEAD,
 	CPUHP_AP_OFFLINE,
+	CPUHP_AP_CACHECTRL_STARTING,
 	CPUHP_AP_SCHED_STARTING,
 	CPUHP_AP_RCUTREE_DYING,
 	CPUHP_AP_CPU_PM_STARTING,

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 7F725C433FE
	for <linux-kernel@archiver.kernel.org>; Thu, 10 Nov 2022 12:22:06 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S231179AbiKJMWD (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 10 Nov 2022 07:22:03 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:37014 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229697AbiKJMVx (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 10 Nov 2022 07:21:53 -0500
Received: from galois.linutronix.de (Galois.linutronix.de [193.142.43.55])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id CCE022AE03;
        Thu, 10 Nov 2022 04:21:51 -0800 (PST)
Date:   Thu, 10 Nov 2022 12:21:49 -0000
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020; t=1668082910;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=fx8BolJ4Db1/lxoA9sH+WI4/m5NkYmQd8BF12q2o7HI=;
        b=AtfMu3b9yUTxT2kigQSeATWqp1cdfoSYcxWavPE43XeIM0WwjjoZc+HX7L1/q/II3cZiY6
        Kq4ZMBzy++/iazZVEe4WlitxbgweC/nlBYmfdx2Mlo3Nic8hNIfG0fp/BxLgedfJsFUIeT
        n4wDayW9gRBp4QQ2tKN/IxMJtLeCVNAhvHihAxTlQ5+oWfFQCVsvhiXCc1He+sl9cr6vsM
        SHF0PhFOuM7xRjP+Ch6hBBucEqs7F/fzztRiZ3jxZbY0DwgJ/OhrJ3PXZMNqygQw9+2Xrf
        1I/JeruXXy8vcK0pH8ghxf1dJpqQSMrvI1zb9Re/yKgFWIqhkf04Zh4tVdNeVg==
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020e; t=1668082910;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=fx8BolJ4Db1/lxoA9sH+WI4/m5NkYmQd8BF12q2o7HI=;
        b=CvM6sTvtys7pzI49yiMO9bG/EYxl1dGUYr2+RRMXZagLJL5iGdBV4UnrqOUsSuSJV1atzk
        1kcDcF08n2EVZ9AA==
From:   "tip-bot2 for Juergen Gross" <tip-bot2@linutronix.de>
Sender: tip-bot2@linutronix.de
Reply-to: linux-kernel@vger.kernel.org
To:     linux-tip-commits@vger.kernel.org
Subject: [tip: x86/cpu] x86/mtrr: Add a stop_machine() handler calling only
 cache_cpu_init()
Cc:     Juergen Gross <jgross@suse.com>, Borislav Petkov <bp@suse.de>,
        x86@kernel.org, linux-kernel@vger.kernel.org
In-Reply-To: <20221102074713.21493-13-jgross@suse.com>
References: <20221102074713.21493-13-jgross@suse.com>
MIME-Version: 1.0
Message-ID: <166808290920.4906.1225943810635030819.tip-bot2@tip-bot2>
Robot-ID: <tip-bot2@linutronix.de>
Robot-Unsubscribe: Contact <mailto:tglx@linutronix.de> to get blacklisted from these emails
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The following commit has been merged into the x86/cpu branch of tip:

Commit-ID:     0b9a6a8bedbfb38e7c6be4d119a267e6277307cc
Gitweb:        https://git.kernel.org/tip/0b9a6a8bedbfb38e7c6be4d119a267e6277307cc
Author:        Juergen Gross <jgross@suse.com>
AuthorDate:    Wed, 02 Nov 2022 08:47:09 +01:00
Committer:     Borislav Petkov <bp@suse.de>
CommitterDate: Thu, 10 Nov 2022 13:12:45 +01:00

x86/mtrr: Add a stop_machine() handler calling only cache_cpu_init()

Instead of having a stop_machine() handler for either a specific
MTRR register or all state at once, add a handler just for calling
cache_cpu_init() if appropriate.

Add functions for calling stop_machine() with this handler as well.

Add a generic replacement for mtrr_bp_restore() and a wrapper for
mtrr_bp_init().

Signed-off-by: Juergen Gross <jgross@suse.com>
Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lore.kernel.org/r/20221102074713.21493-13-jgross@suse.com
Signed-off-by: Borislav Petkov <bp@suse.de>
---
 arch/x86/include/asm/cacheinfo.h |  5 +-
 arch/x86/include/asm/mtrr.h      |  8 +---
 arch/x86/kernel/cpu/cacheinfo.c  | 59 ++++++++++++++++++++-
 arch/x86/kernel/cpu/common.c     |  3 +-
 arch/x86/kernel/cpu/mtrr/mtrr.c  | 88 +-------------------------------
 arch/x86/kernel/setup.c          |  3 +-
 arch/x86/kernel/smpboot.c        |  4 +-
 arch/x86/power/cpu.c             |  3 +-
 8 files changed, 74 insertions(+), 99 deletions(-)

diff --git a/arch/x86/include/asm/cacheinfo.h b/arch/x86/include/asm/cacheinfo.h
index e443fcc..a0ef46e 100644
--- a/arch/x86/include/asm/cacheinfo.h
+++ b/arch/x86/include/asm/cacheinfo.h
@@ -12,8 +12,11 @@ void cacheinfo_hygon_init_llc_id(struct cpuinfo_x86 *c, int cpu);
 
 void cache_disable(void);
 void cache_enable(void);
-void cache_cpu_init(void);
 void set_cache_aps_delayed_init(bool val);
 bool get_cache_aps_delayed_init(void);
+void cache_bp_init(void);
+void cache_bp_restore(void);
+void cache_ap_init(void);
+void cache_aps_init(void);
 
 #endif /* _ASM_X86_CACHEINFO_H */
diff --git a/arch/x86/include/asm/mtrr.h b/arch/x86/include/asm/mtrr.h
index 5d31219..f0eeaf6 100644
--- a/arch/x86/include/asm/mtrr.h
+++ b/arch/x86/include/asm/mtrr.h
@@ -25,13 +25,12 @@
 
 #include <uapi/asm/mtrr.h>
 
-void mtrr_bp_init(void);
-
 /*
  * The following functions are for use by other drivers that cannot use
  * arch_phys_wc_add and arch_phys_wc_del.
  */
 # ifdef CONFIG_MTRR
+void mtrr_bp_init(void);
 extern u8 mtrr_type_lookup(u64 addr, u64 end, u8 *uniform);
 extern void mtrr_save_fixed_ranges(void *);
 extern void mtrr_save_state(void);
@@ -42,8 +41,6 @@ extern int mtrr_add_page(unsigned long base, unsigned long size,
 extern int mtrr_del(int reg, unsigned long base, unsigned long size);
 extern int mtrr_del_page(int reg, unsigned long base, unsigned long size);
 extern void mtrr_centaur_report_mcr(int mcr, u32 lo, u32 hi);
-extern void mtrr_ap_init(void);
-extern void mtrr_aps_init(void);
 extern void mtrr_bp_restore(void);
 extern int mtrr_trim_uncached_memory(unsigned long end_pfn);
 extern int amd_special_default_mtrr(void);
@@ -85,8 +82,7 @@ static inline int mtrr_trim_uncached_memory(unsigned long end_pfn)
 static inline void mtrr_centaur_report_mcr(int mcr, u32 lo, u32 hi)
 {
 }
-#define mtrr_ap_init() do {} while (0)
-#define mtrr_aps_init() do {} while (0)
+#define mtrr_bp_init() do {} while (0)
 #define mtrr_bp_restore() do {} while (0)
 #define mtrr_disable() do {} while (0)
 #define mtrr_enable() do {} while (0)
diff --git a/arch/x86/kernel/cpu/cacheinfo.c b/arch/x86/kernel/cpu/cacheinfo.c
index 063d556..4e155bd 100644
--- a/arch/x86/kernel/cpu/cacheinfo.c
+++ b/arch/x86/kernel/cpu/cacheinfo.c
@@ -15,6 +15,7 @@
 #include <linux/capability.h>
 #include <linux/sysfs.h>
 #include <linux/pci.h>
+#include <linux/stop_machine.h>
 
 #include <asm/cpufeature.h>
 #include <asm/cacheinfo.h>
@@ -1121,7 +1122,7 @@ void cache_enable(void) __releases(cache_disable_lock)
 	raw_spin_unlock(&cache_disable_lock);
 }
 
-void cache_cpu_init(void)
+static void cache_cpu_init(void)
 {
 	unsigned long flags;
 
@@ -1149,3 +1150,59 @@ bool get_cache_aps_delayed_init(void)
 {
 	return cache_aps_delayed_init;
 }
+
+static int cache_rendezvous_handler(void *unused)
+{
+	if (get_cache_aps_delayed_init() || !cpu_online(smp_processor_id()))
+		cache_cpu_init();
+
+	return 0;
+}
+
+void __init cache_bp_init(void)
+{
+	mtrr_bp_init();
+
+	if (memory_caching_control)
+		cache_cpu_init();
+}
+
+void cache_bp_restore(void)
+{
+	if (memory_caching_control)
+		cache_cpu_init();
+}
+
+void cache_ap_init(void)
+{
+	if (!memory_caching_control || get_cache_aps_delayed_init())
+		return;
+
+	/*
+	 * Ideally we should hold mtrr_mutex here to avoid MTRR entries
+	 * changed, but this routine will be called in CPU boot time,
+	 * holding the lock breaks it.
+	 *
+	 * This routine is called in two cases:
+	 *
+	 *   1. very early time of software resume, when there absolutely
+	 *      isn't MTRR entry changes;
+	 *
+	 *   2. CPU hotadd time. We let mtrr_add/del_page hold cpuhotplug
+	 *      lock to prevent MTRR entry changes
+	 */
+	stop_machine_from_inactive_cpu(cache_rendezvous_handler, NULL,
+				       cpu_callout_mask);
+}
+
+/*
+ * Delayed cache initialization for all AP's
+ */
+void cache_aps_init(void)
+{
+	if (!memory_caching_control || !get_cache_aps_delayed_init())
+		return;
+
+	stop_machine(cache_rendezvous_handler, NULL, cpu_online_mask);
+	set_cache_aps_delayed_init(false);
+}
diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c
index 3e508f2..fd058b5 100644
--- a/arch/x86/kernel/cpu/common.c
+++ b/arch/x86/kernel/cpu/common.c
@@ -52,6 +52,7 @@
 #include <asm/cpu.h>
 #include <asm/mce.h>
 #include <asm/msr.h>
+#include <asm/cacheinfo.h>
 #include <asm/memtype.h>
 #include <asm/microcode.h>
 #include <asm/microcode_intel.h>
@@ -1948,7 +1949,7 @@ void identify_secondary_cpu(struct cpuinfo_x86 *c)
 #ifdef CONFIG_X86_32
 	enable_sep_cpu();
 #endif
-	mtrr_ap_init();
+	cache_ap_init();
 	validate_apic_and_package_id(c);
 	x86_spec_ctrl_setup_ap();
 	update_srbds_msr();
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.c b/arch/x86/kernel/cpu/mtrr/mtrr.c
index 15ee6d7..99b6973 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.c
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.c
@@ -73,9 +73,6 @@ static const struct mtrr_ops *mtrr_ops[X86_VENDOR_NUM] __ro_after_init;
 
 const struct mtrr_ops *mtrr_if;
 
-static void set_mtrr(unsigned int reg, unsigned long base,
-		     unsigned long size, mtrr_type type);
-
 void __init set_mtrr_ops(const struct mtrr_ops *ops)
 {
 	if (ops->vendor && ops->vendor < X86_VENDOR_NUM)
@@ -158,26 +155,8 @@ static int mtrr_rendezvous_handler(void *info)
 {
 	struct set_mtrr_data *data = info;
 
-	/*
-	 * We use this same function to initialize the mtrrs during boot,
-	 * resume, runtime cpu online and on an explicit request to set a
-	 * specific MTRR.
-	 *
-	 * During boot or suspend, the state of the boot cpu's mtrrs has been
-	 * saved, and we want to replicate that across all the cpus that come
-	 * online (either at the end of boot or resume or during a runtime cpu
-	 * online). If we're doing that, @reg is set to something special and on
-	 * all the CPUs we do cache_cpu_init() (On the logical CPU that
-	 * started the boot/resume sequence, this might be a duplicate
-	 * cache_cpu_init()).
-	 */
-	if (data->smp_reg != ~0U) {
-		mtrr_if->set(data->smp_reg, data->smp_base,
-			     data->smp_size, data->smp_type);
-	} else if (get_cache_aps_delayed_init() ||
-		   !cpu_online(smp_processor_id())) {
-		cache_cpu_init();
-	}
+	mtrr_if->set(data->smp_reg, data->smp_base,
+		     data->smp_size, data->smp_type);
 	return 0;
 }
 
@@ -247,19 +226,6 @@ static void set_mtrr_cpuslocked(unsigned int reg, unsigned long base,
 	stop_machine_cpuslocked(mtrr_rendezvous_handler, &data, cpu_online_mask);
 }
 
-static void set_mtrr_from_inactive_cpu(unsigned int reg, unsigned long base,
-				      unsigned long size, mtrr_type type)
-{
-	struct set_mtrr_data data = { .smp_reg = reg,
-				      .smp_base = base,
-				      .smp_size = size,
-				      .smp_type = type
-				    };
-
-	stop_machine_from_inactive_cpu(mtrr_rendezvous_handler, &data,
-				       cpu_callout_mask);
-}
-
 /**
  * mtrr_add_page - Add a memory type region
  * @base: Physical base address of region in pages (in units of 4 kB!)
@@ -761,7 +727,6 @@ void __init mtrr_bp_init(void)
 			if (get_mtrr_state()) {
 				memory_caching_control |= CACHE_MTRR | CACHE_PAT;
 				changed_by_mtrr_cleanup = mtrr_cleanup(phys_addr);
-				cache_cpu_init();
 			} else {
 				mtrr_if = NULL;
 			}
@@ -780,27 +745,6 @@ void __init mtrr_bp_init(void)
 	}
 }
 
-void mtrr_ap_init(void)
-{
-	if (!memory_caching_control || get_cache_aps_delayed_init())
-		return;
-
-	/*
-	 * Ideally we should hold mtrr_mutex here to avoid mtrr entries
-	 * changed, but this routine will be called in cpu boot time,
-	 * holding the lock breaks it.
-	 *
-	 * This routine is called in two cases:
-	 *
-	 *   1. very early time of software resume, when there absolutely
-	 *      isn't mtrr entry changes;
-	 *
-	 *   2. cpu hotadd time. We let mtrr_add/del_page hold cpuhotplug
-	 *      lock to prevent mtrr entry changes
-	 */
-	set_mtrr_from_inactive_cpu(~0U, 0, 0, 0);
-}
-
 /**
  * mtrr_save_state - Save current fixed-range MTRR state of the first
  *	cpu in cpu_online_mask.
@@ -816,34 +760,6 @@ void mtrr_save_state(void)
 	smp_call_function_single(first_cpu, mtrr_save_fixed_ranges, NULL, 1);
 }
 
-/*
- * Delayed MTRR initialization for all AP's
- */
-void mtrr_aps_init(void)
-{
-	if (!memory_caching_control)
-		return;
-
-	/*
-	 * Check if someone has requested the delay of AP MTRR initialization,
-	 * by doing set_mtrr_aps_delayed_init(), prior to this point. If not,
-	 * then we are done.
-	 */
-	if (!get_cache_aps_delayed_init())
-		return;
-
-	set_mtrr(~0U, 0, 0, 0);
-	set_cache_aps_delayed_init(false);
-}
-
-void mtrr_bp_restore(void)
-{
-	if (!memory_caching_control)
-		return;
-
-	cache_cpu_init();
-}
-
 static int __init mtrr_init_finialize(void)
 {
 	if (!mtrr_enabled())
diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c
index 216fee7..e0e185e 100644
--- a/arch/x86/kernel/setup.c
+++ b/arch/x86/kernel/setup.c
@@ -34,6 +34,7 @@
 #include <asm/numa.h>
 #include <asm/bios_ebda.h>
 #include <asm/bugs.h>
+#include <asm/cacheinfo.h>
 #include <asm/cpu.h>
 #include <asm/efi.h>
 #include <asm/gart.h>
@@ -1075,7 +1076,7 @@ void __init setup_arch(char **cmdline_p)
 
 	/* update e820 for memory not covered by WB MTRRs */
 	if (IS_ENABLED(CONFIG_MTRR))
-		mtrr_bp_init();
+		cache_bp_init();
 	else
 		pat_disable("PAT support disabled because CONFIG_MTRR is disabled in the kernel.");
 
diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c
index 13c71ab..1b61a48 100644
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@ -1445,7 +1445,7 @@ void arch_thaw_secondary_cpus_begin(void)
 
 void arch_thaw_secondary_cpus_end(void)
 {
-	mtrr_aps_init();
+	cache_aps_init();
 }
 
 /*
@@ -1488,7 +1488,7 @@ void __init native_smp_cpus_done(unsigned int max_cpus)
 
 	nmi_selftest();
 	impress_friends();
-	mtrr_aps_init();
+	cache_aps_init();
 }
 
 static int __initdata setup_possible_cpus = -1;
diff --git a/arch/x86/power/cpu.c b/arch/x86/power/cpu.c
index bb176c7..754221c 100644
--- a/arch/x86/power/cpu.c
+++ b/arch/x86/power/cpu.c
@@ -23,6 +23,7 @@
 #include <asm/fpu/api.h>
 #include <asm/debugreg.h>
 #include <asm/cpu.h>
+#include <asm/cacheinfo.h>
 #include <asm/mmu_context.h>
 #include <asm/cpu_device_id.h>
 #include <asm/microcode.h>
@@ -261,7 +262,7 @@ static void notrace __restore_processor_state(struct saved_context *ctxt)
 	do_fpu_end();
 	tsc_verify_tsc_adjust(true);
 	x86_platform.restore_sched_clock_state();
-	mtrr_bp_restore();
+	cache_bp_restore();
 	perf_restore_debug_store();
 
 	c = &cpu_data(smp_processor_id());

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 85F0CC433FE
	for <linux-kernel@archiver.kernel.org>; Thu, 10 Nov 2022 12:22:10 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229735AbiKJMWI (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 10 Nov 2022 07:22:08 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:37024 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230156AbiKJMVx (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 10 Nov 2022 07:21:53 -0500
Received: from galois.linutronix.de (Galois.linutronix.de [193.142.43.55])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id DFFE171F30;
        Thu, 10 Nov 2022 04:21:52 -0800 (PST)
Date:   Thu, 10 Nov 2022 12:21:50 -0000
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020; t=1668082911;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=JYme4y0NdY1CFBDiAkYLwqCEg2kqXX9VkyPt73hmCKM=;
        b=rjXl5id+SbTBLA4a1dW9CU2jXH3C03fyzlVvENQVPPj2aUJyAR0szdpHF8tnxwSuF4xBUW
        rQeR4WYA16bUFy1fUK8P7g7EEz8SVFiyCcpYAYtpOjB574HeR7EeJCalCsARiAlrM4hemc
        HB7miVUyd+pKesOAPhynhdMajH1jizN8nB8dGvMSeFSIHI2EvNN7gUoUymWWZsZ0EE4nxn
        Jj7TSNa2RQEBsvvWB729k80Ugye3emZFvkDrlrhPz66QDObzDh4ziseOvJ++VBH2M1ZWuS
        NkUnM8G1w6MwqHm+CkQAClBkRw6TYVJ2VVxuw/BQmBIJhmSa1Vy9+V6MdP3gFA==
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020e; t=1668082911;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=JYme4y0NdY1CFBDiAkYLwqCEg2kqXX9VkyPt73hmCKM=;
        b=yVGhYbTWKE9AURUpKMkhTriiEiOyjOsT/qGBkgBpWnMsQTN/ITQt4lZaHcSC6qykf1RM9U
        vY2uX2OLcSsifdAw==
From:   "tip-bot2 for Juergen Gross" <tip-bot2@linutronix.de>
Sender: tip-bot2@linutronix.de
Reply-to: linux-kernel@vger.kernel.org
To:     linux-tip-commits@vger.kernel.org
Subject: [tip: x86/cpu] x86/mtrr: Let cache_aps_delayed_init replace
 mtrr_aps_delayed_init
Cc:     Juergen Gross <jgross@suse.com>, Borislav Petkov <bp@suse.de>,
        x86@kernel.org, linux-kernel@vger.kernel.org
In-Reply-To: <20221102074713.21493-12-jgross@suse.com>
References: <20221102074713.21493-12-jgross@suse.com>
MIME-Version: 1.0
Message-ID: <166808291032.4906.11200342657381640879.tip-bot2@tip-bot2>
Robot-ID: <tip-bot2@linutronix.de>
Robot-Unsubscribe: Contact <mailto:tglx@linutronix.de> to get blacklisted from these emails
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The following commit has been merged into the x86/cpu branch of tip:

Commit-ID:     955d0e0805912641230fb46c380aa625f78ecaca
Gitweb:        https://git.kernel.org/tip/955d0e0805912641230fb46c380aa625f78ecaca
Author:        Juergen Gross <jgross@suse.com>
AuthorDate:    Wed, 02 Nov 2022 08:47:08 +01:00
Committer:     Borislav Petkov <bp@suse.de>
CommitterDate: Thu, 10 Nov 2022 13:12:45 +01:00

x86/mtrr: Let cache_aps_delayed_init replace mtrr_aps_delayed_init

In order to prepare decoupling MTRR and PAT replace the MTRR-specific
mtrr_aps_delayed_init flag with a more generic cache_aps_delayed_init
one.

Signed-off-by: Juergen Gross <jgross@suse.com>
Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lore.kernel.org/r/20221102074713.21493-12-jgross@suse.com
Signed-off-by: Borislav Petkov <bp@suse.de>
---
 arch/x86/include/asm/cacheinfo.h |  2 ++
 arch/x86/include/asm/mtrr.h      |  2 --
 arch/x86/kernel/cpu/cacheinfo.c  | 12 ++++++++++++
 arch/x86/kernel/cpu/mtrr/mtrr.c  | 18 +++++-------------
 arch/x86/kernel/smpboot.c        |  5 +++--
 5 files changed, 22 insertions(+), 17 deletions(-)

diff --git a/arch/x86/include/asm/cacheinfo.h b/arch/x86/include/asm/cacheinfo.h
index 978bac7..e443fcc 100644
--- a/arch/x86/include/asm/cacheinfo.h
+++ b/arch/x86/include/asm/cacheinfo.h
@@ -13,5 +13,7 @@ void cacheinfo_hygon_init_llc_id(struct cpuinfo_x86 *c, int cpu);
 void cache_disable(void);
 void cache_enable(void);
 void cache_cpu_init(void);
+void set_cache_aps_delayed_init(bool val);
+bool get_cache_aps_delayed_init(void);
 
 #endif /* _ASM_X86_CACHEINFO_H */
diff --git a/arch/x86/include/asm/mtrr.h b/arch/x86/include/asm/mtrr.h
index 986249a..5d31219 100644
--- a/arch/x86/include/asm/mtrr.h
+++ b/arch/x86/include/asm/mtrr.h
@@ -43,7 +43,6 @@ extern int mtrr_del(int reg, unsigned long base, unsigned long size);
 extern int mtrr_del_page(int reg, unsigned long base, unsigned long size);
 extern void mtrr_centaur_report_mcr(int mcr, u32 lo, u32 hi);
 extern void mtrr_ap_init(void);
-extern void set_mtrr_aps_delayed_init(void);
 extern void mtrr_aps_init(void);
 extern void mtrr_bp_restore(void);
 extern int mtrr_trim_uncached_memory(unsigned long end_pfn);
@@ -87,7 +86,6 @@ static inline void mtrr_centaur_report_mcr(int mcr, u32 lo, u32 hi)
 {
 }
 #define mtrr_ap_init() do {} while (0)
-#define set_mtrr_aps_delayed_init() do {} while (0)
 #define mtrr_aps_init() do {} while (0)
 #define mtrr_bp_restore() do {} while (0)
 #define mtrr_disable() do {} while (0)
diff --git a/arch/x86/kernel/cpu/cacheinfo.c b/arch/x86/kernel/cpu/cacheinfo.c
index 31684bf..063d556 100644
--- a/arch/x86/kernel/cpu/cacheinfo.c
+++ b/arch/x86/kernel/cpu/cacheinfo.c
@@ -1137,3 +1137,15 @@ void cache_cpu_init(void)
 	cache_enable();
 	local_irq_restore(flags);
 }
+
+static bool cache_aps_delayed_init;
+
+void set_cache_aps_delayed_init(bool val)
+{
+	cache_aps_delayed_init = val;
+}
+
+bool get_cache_aps_delayed_init(void)
+{
+	return cache_aps_delayed_init;
+}
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.c b/arch/x86/kernel/cpu/mtrr/mtrr.c
index f671be9..15ee6d7 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.c
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.c
@@ -68,7 +68,6 @@ unsigned int mtrr_usage_table[MTRR_MAX_VAR_RANGES];
 static DEFINE_MUTEX(mtrr_mutex);
 
 u64 size_or_mask, size_and_mask;
-static bool mtrr_aps_delayed_init;
 
 static const struct mtrr_ops *mtrr_ops[X86_VENDOR_NUM] __ro_after_init;
 
@@ -175,7 +174,8 @@ static int mtrr_rendezvous_handler(void *info)
 	if (data->smp_reg != ~0U) {
 		mtrr_if->set(data->smp_reg, data->smp_base,
 			     data->smp_size, data->smp_type);
-	} else if (mtrr_aps_delayed_init || !cpu_online(smp_processor_id())) {
+	} else if (get_cache_aps_delayed_init() ||
+		   !cpu_online(smp_processor_id())) {
 		cache_cpu_init();
 	}
 	return 0;
@@ -782,7 +782,7 @@ void __init mtrr_bp_init(void)
 
 void mtrr_ap_init(void)
 {
-	if (!memory_caching_control || mtrr_aps_delayed_init)
+	if (!memory_caching_control || get_cache_aps_delayed_init())
 		return;
 
 	/*
@@ -816,14 +816,6 @@ void mtrr_save_state(void)
 	smp_call_function_single(first_cpu, mtrr_save_fixed_ranges, NULL, 1);
 }
 
-void set_mtrr_aps_delayed_init(void)
-{
-	if (!memory_caching_control)
-		return;
-
-	mtrr_aps_delayed_init = true;
-}
-
 /*
  * Delayed MTRR initialization for all AP's
  */
@@ -837,11 +829,11 @@ void mtrr_aps_init(void)
 	 * by doing set_mtrr_aps_delayed_init(), prior to this point. If not,
 	 * then we are done.
 	 */
-	if (!mtrr_aps_delayed_init)
+	if (!get_cache_aps_delayed_init())
 		return;
 
 	set_mtrr(~0U, 0, 0, 0);
-	mtrr_aps_delayed_init = false;
+	set_cache_aps_delayed_init(false);
 }
 
 void mtrr_bp_restore(void)
diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c
index 3f3ea02..13c71ab 100644
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@ -58,6 +58,7 @@
 #include <linux/overflow.h>
 
 #include <asm/acpi.h>
+#include <asm/cacheinfo.h>
 #include <asm/desc.h>
 #include <asm/nmi.h>
 #include <asm/irq.h>
@@ -1428,7 +1429,7 @@ void __init native_smp_prepare_cpus(unsigned int max_cpus)
 
 	uv_system_init();
 
-	set_mtrr_aps_delayed_init();
+	set_cache_aps_delayed_init(true);
 
 	smp_quirk_init_udelay();
 
@@ -1439,7 +1440,7 @@ void __init native_smp_prepare_cpus(unsigned int max_cpus)
 
 void arch_thaw_secondary_cpus_begin(void)
 {
-	set_mtrr_aps_delayed_init();
+	set_cache_aps_delayed_init(true);
 }
 
 void arch_thaw_secondary_cpus_end(void)

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 94012C433FE
	for <linux-kernel@archiver.kernel.org>; Thu, 10 Nov 2022 12:22:16 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229788AbiKJMWO (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 10 Nov 2022 07:22:14 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:37044 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230511AbiKJMVz (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 10 Nov 2022 07:21:55 -0500
Received: from galois.linutronix.de (Galois.linutronix.de [IPv6:2a0a:51c0:0:12e:550::1])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 6388671F39;
        Thu, 10 Nov 2022 04:21:54 -0800 (PST)
Date:   Thu, 10 Nov 2022 12:21:51 -0000
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020; t=1668082912;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=FXUGUmHVztvXiUFfSp49JyGGH77rTqfAQ5M+mn70WN0=;
        b=LzFXk6Ds37LC6Na+1TnUv8xQ+mmNLtP6bvkrpMet29roROd6uK1UZ2eDSwOMbvc7g/Vtt5
        qc9bPe3WpzRhOJknumC2O6ruixMsu6PXOL8OYAQwDCiF43wTQPe+dMHbpYDa66zKzl3g4c
        FNAsePdDLGi/rFRNBMDcDrVZLSsvTWf4ohXW00XGu61BQuraXhG7/1ezjmN2Er2kB8ZjQL
        7S/dnb0pQwQ4DG7VQfMdRWb64akuaDYStXTXtI+T/vaw6ovHWbRG9BVeuHouLOlclXbI7F
        1WTg6RVp5aelEHPu6xt50TImqIiPh2354iAEBLANeJ6kq547Kn42O4GKFkTIpA==
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020e; t=1668082912;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=FXUGUmHVztvXiUFfSp49JyGGH77rTqfAQ5M+mn70WN0=;
        b=31r5zjYQW8oC1rn5Dm2YDyoJOS/4M9QwidvlDxdDkWzWk5eC8i/uqV/Dl6Y83uAoVGw4c7
        a2cjm2JmM/Imp+AA==
From:   "tip-bot2 for Juergen Gross" <tip-bot2@linutronix.de>
Sender: tip-bot2@linutronix.de
Reply-to: linux-kernel@vger.kernel.org
To:     linux-tip-commits@vger.kernel.org
Subject: [tip: x86/cpu] x86/mtrr: Get rid of __mtrr_enabled bool
Cc:     Juergen Gross <jgross@suse.com>, Borislav Petkov <bp@suse.de>,
        x86@kernel.org, linux-kernel@vger.kernel.org
In-Reply-To: <20221102074713.21493-11-jgross@suse.com>
References: <20221102074713.21493-11-jgross@suse.com>
MIME-Version: 1.0
Message-ID: <166808291144.4906.5479534942233014334.tip-bot2@tip-bot2>
Robot-ID: <tip-bot2@linutronix.de>
Robot-Unsubscribe: Contact <mailto:tglx@linutronix.de> to get blacklisted from these emails
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The following commit has been merged into the x86/cpu branch of tip:

Commit-ID:     2c15679e8687d5934e1a70fe50ce409bb8a2aba1
Gitweb:        https://git.kernel.org/tip/2c15679e8687d5934e1a70fe50ce409bb8a2aba1
Author:        Juergen Gross <jgross@suse.com>
AuthorDate:    Wed, 02 Nov 2022 08:47:07 +01:00
Committer:     Borislav Petkov <bp@suse.de>
CommitterDate: Thu, 10 Nov 2022 13:12:45 +01:00

x86/mtrr: Get rid of __mtrr_enabled bool

There is no need for keeping __mtrr_enabled as it can easily be replaced
by testing mtrr_if to be not NULL.

Signed-off-by: Juergen Gross <jgross@suse.com>
Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lore.kernel.org/r/20221102074713.21493-11-jgross@suse.com
Signed-off-by: Borislav Petkov <bp@suse.de>
---
 arch/x86/kernel/cpu/mtrr/mtrr.c | 13 +++++--------
 1 file changed, 5 insertions(+), 8 deletions(-)

diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.c b/arch/x86/kernel/cpu/mtrr/mtrr.c
index a468be5..f671be9 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.c
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.c
@@ -59,11 +59,9 @@
 #define MTRR_TO_PHYS_WC_OFFSET 1000
 
 u32 num_var_ranges;
-static bool __mtrr_enabled;
-
 static bool mtrr_enabled(void)
 {
-	return __mtrr_enabled;
+	return !!mtrr_if;
 }
 
 unsigned int mtrr_usage_table[MTRR_MAX_VAR_RANGES];
@@ -755,18 +753,17 @@ void __init mtrr_bp_init(void)
 		}
 	}
 
-	if (mtrr_if) {
-		__mtrr_enabled = true;
+	if (mtrr_enabled()) {
 		set_num_var_ranges(mtrr_if == &generic_mtrr_ops);
 		init_table();
 		if (mtrr_if == &generic_mtrr_ops) {
 			/* BIOS may override */
-			__mtrr_enabled = get_mtrr_state();
-
-			if (mtrr_enabled()) {
+			if (get_mtrr_state()) {
 				memory_caching_control |= CACHE_MTRR | CACHE_PAT;
 				changed_by_mtrr_cleanup = mtrr_cleanup(phys_addr);
 				cache_cpu_init();
+			} else {
+				mtrr_if = NULL;
 			}
 		}
 	}

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 9D1E3C433FE
	for <linux-kernel@archiver.kernel.org>; Thu, 10 Nov 2022 12:22:20 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230308AbiKJMWS (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 10 Nov 2022 07:22:18 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:37072 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230507AbiKJMV4 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 10 Nov 2022 07:21:56 -0500
Received: from galois.linutronix.de (Galois.linutronix.de [IPv6:2a0a:51c0:0:12e:550::1])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 3B53B71F37;
        Thu, 10 Nov 2022 04:21:55 -0800 (PST)
Date:   Thu, 10 Nov 2022 12:21:52 -0000
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020; t=1668082913;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=HYDzanxKQjmi8wx6Qn4rdJZe7wl+OGuY2TVEzdipu+s=;
        b=etPRhA7WPabGVd8z2DvG1xDfjWd3Gn0TUgEHFuHRBTUw8TudNpWYH5ApY+mid5fciaZAgO
        pP3VsF7wtJ9xm6wRz+Kxl9dkxbvse5XvEvyjMp/zPkQth7F7wzafE4mLImbIxsX0RE1K7K
        MTy4xJLONj5q4eQiW15paTsCc+vJndz4MG5foyz5+J00T9dRQJtKR5es0WYWyoKSzifcS4
        A+DEIeXixXWDhYQBIpWH71jLHjvu5eO6aCiQHbLXIVuI75dsyzr0HEBPjxnshzHNwg8hC/
        bzi8XxQI9V1ZryAqKGg5ydgxsVXWMbIvOoH/dn5MYKrUo+D0OrdBF+r7AZltMQ==
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020e; t=1668082913;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=HYDzanxKQjmi8wx6Qn4rdJZe7wl+OGuY2TVEzdipu+s=;
        b=KlpF9aIhLQuSVe1HPqHEEJs6cCFK+Dl1OTQiR3aIPi0LA2khl2ZkFWgCFRmwZmV1trcq/4
        klPPoGBD32wXnXCQ==
From:   "tip-bot2 for Juergen Gross" <tip-bot2@linutronix.de>
Sender: tip-bot2@linutronix.de
Reply-to: linux-kernel@vger.kernel.org
To:     linux-tip-commits@vger.kernel.org
Subject: [tip: x86/cpu] x86/mtrr: Simplify mtrr_bp_init()
Cc:     Juergen Gross <jgross@suse.com>, Borislav Petkov <bp@suse.de>,
        x86@kernel.org, linux-kernel@vger.kernel.org
In-Reply-To: <20221102074713.21493-10-jgross@suse.com>
References: <20221102074713.21493-10-jgross@suse.com>
MIME-Version: 1.0
Message-ID: <166808291254.4906.17364603944285454166.tip-bot2@tip-bot2>
Robot-ID: <tip-bot2@linutronix.de>
Robot-Unsubscribe: Contact <mailto:tglx@linutronix.de> to get blacklisted from these emails
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The following commit has been merged into the x86/cpu branch of tip:

Commit-ID:     74069135f09c4600ab2985939c305ebef57ac34f
Gitweb:        https://git.kernel.org/tip/74069135f09c4600ab2985939c305ebef57ac34f
Author:        Juergen Gross <jgross@suse.com>
AuthorDate:    Wed, 02 Nov 2022 08:47:06 +01:00
Committer:     Borislav Petkov <bp@suse.de>
CommitterDate: Thu, 10 Nov 2022 13:12:44 +01:00

x86/mtrr: Simplify mtrr_bp_init()

In case of the generic cache interface being used (Intel CPUs or a
64-bit system), the initialization sequence of the boot CPU is more
complicated than necessary:

- check if MTRR enabled, if yes, call mtrr_bp_pat_init() which will
  disable caching, set the PAT MSR, and reenable caching

- call mtrr_cleanup(), in case that changed anything, call
  cache_cpu_init() doing the same caching disable/enable dance as
  above, but this time with setting the (modified) MTRR state (even
  if MTRR was disabled) AND setting the PAT MSR (again even with
  disabled MTRR)

The sequence can be simplified a lot while removing potential
inconsistencies:

- check if MTRR enabled, if yes, call mtrr_cleanup() and then
  cache_cpu_init()

This ensures to:

- no longer disable/enable caching more than once

- avoid to set MTRRs and/or the PAT MSR on the boot processor in case
  of MTRR cleanups even if MTRRs meant to be disabled

With that mtrr_bp_pat_init() can be removed.

Signed-off-by: Juergen Gross <jgross@suse.com>
Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lore.kernel.org/r/20221102074713.21493-10-jgross@suse.com
Signed-off-by: Borislav Petkov <bp@suse.de>
---
 arch/x86/kernel/cpu/mtrr/generic.c | 14 --------------
 arch/x86/kernel/cpu/mtrr/mtrr.c    |  6 +-----
 arch/x86/kernel/cpu/mtrr/mtrr.h    |  1 -
 3 files changed, 1 insertion(+), 20 deletions(-)

diff --git a/arch/x86/kernel/cpu/mtrr/generic.c b/arch/x86/kernel/cpu/mtrr/generic.c
index 9d4d2bc..ee09d35 100644
--- a/arch/x86/kernel/cpu/mtrr/generic.c
+++ b/arch/x86/kernel/cpu/mtrr/generic.c
@@ -442,20 +442,6 @@ static void __init print_mtrr_state(void)
 		pr_debug("TOM2: %016llx aka %lldM\n", mtrr_tom2, mtrr_tom2>>20);
 }
 
-/* PAT setup for BP. We need to go through sync steps here */
-void __init mtrr_bp_pat_init(void)
-{
-	unsigned long flags;
-
-	local_irq_save(flags);
-	cache_disable();
-
-	pat_init();
-
-	cache_enable();
-	local_irq_restore(flags);
-}
-
 /* Grab all of the MTRR state for this CPU into *state */
 bool __init get_mtrr_state(void)
 {
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.c b/arch/x86/kernel/cpu/mtrr/mtrr.c
index a44b510..a468be5 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.c
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.c
@@ -764,12 +764,8 @@ void __init mtrr_bp_init(void)
 			__mtrr_enabled = get_mtrr_state();
 
 			if (mtrr_enabled()) {
-				mtrr_bp_pat_init();
 				memory_caching_control |= CACHE_MTRR | CACHE_PAT;
-			}
-
-			if (mtrr_cleanup(phys_addr)) {
-				changed_by_mtrr_cleanup = 1;
+				changed_by_mtrr_cleanup = mtrr_cleanup(phys_addr);
 				cache_cpu_init();
 			}
 		}
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.h b/arch/x86/kernel/cpu/mtrr/mtrr.h
index 3b18831..c98928c 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.h
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.h
@@ -50,7 +50,6 @@ void set_mtrr_prepare_save(struct set_mtrr_context *ctxt);
 void fill_mtrr_var_range(unsigned int index,
 		u32 base_lo, u32 base_hi, u32 mask_lo, u32 mask_hi);
 bool get_mtrr_state(void);
-void mtrr_bp_pat_init(void);
 
 extern void __init set_mtrr_ops(const struct mtrr_ops *ops);
 

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 2BA95C43217
	for <linux-kernel@archiver.kernel.org>; Thu, 10 Nov 2022 12:22:23 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230374AbiKJMWW (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 10 Nov 2022 07:22:22 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:37122 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S231143AbiKJMWA (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 10 Nov 2022 07:22:00 -0500
Received: from galois.linutronix.de (Galois.linutronix.de [193.142.43.55])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 8074E71F2B;
        Thu, 10 Nov 2022 04:21:58 -0800 (PST)
Date:   Thu, 10 Nov 2022 12:21:55 -0000
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020; t=1668082917;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=0tgjSmAqkmz1bY9leLt7VCkU4La83/t2RRyVSCo4MU8=;
        b=mKreb+lJPPYkbzjt1TZbgfPZdyvl0Mv5LqnV9b8ayjQwu+rbniXNOk2GHWSvqbu/NqUVMN
        4uy4AJ55TkU8wLOm4LLOHXDXl+IX7YhCpFsqNkcs4GSskCzWKw/JM/q+BTorJOO9Dzt+Wt
        uf6PkeLNGxCk3gIMlxI3sPdhq73PvYtxfJrSIlUN6p7pdF0elazhRwBviOoYhc2U7wBiWs
        gdDVCPRSBI2k+PEQ6RdYpEv8AWJ8sFYNolKTiij8sXVkExIToo3Vf6DimoddtqtnQkcyUC
        /CdCzHvcfduygbM9BQL4IXravTeVvqZmKQvGP0JPiMx6aO451YzTBz9xhrxJ+w==
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020e; t=1668082917;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=0tgjSmAqkmz1bY9leLt7VCkU4La83/t2RRyVSCo4MU8=;
        b=ICl8pvECo2gGCtKu31lS22cgFRXS//t8LM55jXx7K8vtJkbuh9r6twb+Adp8BGpRJ+o4rQ
        pni6l/WEPHUCdHDA==
From:   "tip-bot2 for Juergen Gross" <tip-bot2@linutronix.de>
Sender: tip-bot2@linutronix.de
Reply-to: linux-kernel@vger.kernel.org
To:     linux-tip-commits@vger.kernel.org
Subject: [tip: x86/cpu] x86/mtrr: Move cache control code to cacheinfo.c
Cc:     Juergen Gross <jgross@suse.com>, Borislav Petkov <bp@suse.de>,
        x86@kernel.org, linux-kernel@vger.kernel.org
In-Reply-To: <20221102074713.21493-7-jgross@suse.com>
References: <20221102074713.21493-7-jgross@suse.com>
MIME-Version: 1.0
Message-ID: <166808291596.4906.2150865566545766620.tip-bot2@tip-bot2>
Robot-ID: <tip-bot2@linutronix.de>
Robot-Unsubscribe: Contact <mailto:tglx@linutronix.de> to get blacklisted from these emails
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The following commit has been merged into the x86/cpu branch of tip:

Commit-ID:     23a63e369098a8503550d1df80f4b4801af32c19
Gitweb:        https://git.kernel.org/tip/23a63e369098a8503550d1df80f4b4801af32c19
Author:        Juergen Gross <jgross@suse.com>
AuthorDate:    Wed, 02 Nov 2022 08:47:03 +01:00
Committer:     Borislav Petkov <bp@suse.de>
CommitterDate: Thu, 10 Nov 2022 13:12:44 +01:00

x86/mtrr: Move cache control code to cacheinfo.c

Prepare making PAT and MTRR support independent from each other by
moving some code needed by both out of the MTRR-specific sources.

  [ bp: Massage commit message. ]

Signed-off-by: Juergen Gross <jgross@suse.com>
Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lore.kernel.org/r/20221102074713.21493-7-jgross@suse.com
Signed-off-by: Borislav Petkov <bp@suse.de>
---
 arch/x86/kernel/cpu/cacheinfo.c    | 77 +++++++++++++++++++++++++++++-
 arch/x86/kernel/cpu/mtrr/generic.c | 74 +----------------------------
 2 files changed, 77 insertions(+), 74 deletions(-)

diff --git a/arch/x86/kernel/cpu/cacheinfo.c b/arch/x86/kernel/cpu/cacheinfo.c
index 32fb049..0cbacec 100644
--- a/arch/x86/kernel/cpu/cacheinfo.c
+++ b/arch/x86/kernel/cpu/cacheinfo.c
@@ -20,6 +20,8 @@
 #include <asm/cacheinfo.h>
 #include <asm/amd_nb.h>
 #include <asm/smp.h>
+#include <asm/mtrr.h>
+#include <asm/tlbflush.h>
 
 #include "cpu.h"
 
@@ -1043,3 +1045,78 @@ int populate_cache_leaves(unsigned int cpu)
 
 	return 0;
 }
+
+/*
+ * Disable and enable caches. Needed for changing MTRRs and the PAT MSR.
+ *
+ * Since we are disabling the cache don't allow any interrupts,
+ * they would run extremely slow and would only increase the pain.
+ *
+ * The caller must ensure that local interrupts are disabled and
+ * are reenabled after cache_enable() has been called.
+ */
+static unsigned long saved_cr4;
+static DEFINE_RAW_SPINLOCK(cache_disable_lock);
+
+void cache_disable(void) __acquires(cache_disable_lock)
+{
+	unsigned long cr0;
+
+	/*
+	 * Note that this is not ideal
+	 * since the cache is only flushed/disabled for this CPU while the
+	 * MTRRs are changed, but changing this requires more invasive
+	 * changes to the way the kernel boots
+	 */
+
+	raw_spin_lock(&cache_disable_lock);
+
+	/* Enter the no-fill (CD=1, NW=0) cache mode and flush caches. */
+	cr0 = read_cr0() | X86_CR0_CD;
+	write_cr0(cr0);
+
+	/*
+	 * Cache flushing is the most time-consuming step when programming
+	 * the MTRRs. Fortunately, as per the Intel Software Development
+	 * Manual, we can skip it if the processor supports cache self-
+	 * snooping.
+	 */
+	if (!static_cpu_has(X86_FEATURE_SELFSNOOP))
+		wbinvd();
+
+	/* Save value of CR4 and clear Page Global Enable (bit 7) */
+	if (cpu_feature_enabled(X86_FEATURE_PGE)) {
+		saved_cr4 = __read_cr4();
+		__write_cr4(saved_cr4 & ~X86_CR4_PGE);
+	}
+
+	/* Flush all TLBs via a mov %cr3, %reg; mov %reg, %cr3 */
+	count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);
+	flush_tlb_local();
+
+	if (cpu_feature_enabled(X86_FEATURE_MTRR))
+		mtrr_disable();
+
+	/* Again, only flush caches if we have to. */
+	if (!static_cpu_has(X86_FEATURE_SELFSNOOP))
+		wbinvd();
+}
+
+void cache_enable(void) __releases(cache_disable_lock)
+{
+	/* Flush TLBs (no need to flush caches - they are disabled) */
+	count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);
+	flush_tlb_local();
+
+	if (cpu_feature_enabled(X86_FEATURE_MTRR))
+		mtrr_enable();
+
+	/* Enable caches */
+	write_cr0(read_cr0() & ~X86_CR0_CD);
+
+	/* Restore value of CR4 */
+	if (cpu_feature_enabled(X86_FEATURE_PGE))
+		__write_cr4(saved_cr4);
+
+	raw_spin_unlock(&cache_disable_lock);
+}
diff --git a/arch/x86/kernel/cpu/mtrr/generic.c b/arch/x86/kernel/cpu/mtrr/generic.c
index 0db0770..396cb1e 100644
--- a/arch/x86/kernel/cpu/mtrr/generic.c
+++ b/arch/x86/kernel/cpu/mtrr/generic.c
@@ -731,80 +731,6 @@ void mtrr_enable(void)
 	mtrr_wrmsr(MSR_MTRRdefType, deftype_lo, deftype_hi);
 }
 
-/*
- * Disable and enable caches. Needed for changing MTRRs and the PAT MSR.
- *
- * Since we are disabling the cache don't allow any interrupts,
- * they would run extremely slow and would only increase the pain.
- *
- * The caller must ensure that local interrupts are disabled and
- * are reenabled after cache_enable() has been called.
- */
-static unsigned long saved_cr4;
-static DEFINE_RAW_SPINLOCK(cache_disable_lock);
-
-void cache_disable(void) __acquires(cache_disable_lock)
-{
-	unsigned long cr0;
-
-	/*
-	 * Note that this is not ideal
-	 * since the cache is only flushed/disabled for this CPU while the
-	 * MTRRs are changed, but changing this requires more invasive
-	 * changes to the way the kernel boots
-	 */
-
-	raw_spin_lock(&cache_disable_lock);
-
-	/* Enter the no-fill (CD=1, NW=0) cache mode and flush caches. */
-	cr0 = read_cr0() | X86_CR0_CD;
-	write_cr0(cr0);
-
-	/*
-	 * Cache flushing is the most time-consuming step when programming
-	 * the MTRRs. Fortunately, as per the Intel Software Development
-	 * Manual, we can skip it if the processor supports cache self-
-	 * snooping.
-	 */
-	if (!static_cpu_has(X86_FEATURE_SELFSNOOP))
-		wbinvd();
-
-	/* Save value of CR4 and clear Page Global Enable (bit 7) */
-	if (boot_cpu_has(X86_FEATURE_PGE)) {
-		saved_cr4 = __read_cr4();
-		__write_cr4(saved_cr4 & ~X86_CR4_PGE);
-	}
-
-	/* Flush all TLBs via a mov %cr3, %reg; mov %reg, %cr3 */
-	count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);
-	flush_tlb_local();
-
-	if (cpu_feature_enabled(X86_FEATURE_MTRR))
-		mtrr_disable();
-
-	/* Again, only flush caches if we have to. */
-	if (!static_cpu_has(X86_FEATURE_SELFSNOOP))
-		wbinvd();
-}
-
-void cache_enable(void) __releases(cache_disable_lock)
-{
-	/* Flush TLBs (no need to flush caches - they are disabled) */
-	count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);
-	flush_tlb_local();
-
-	if (cpu_feature_enabled(X86_FEATURE_MTRR))
-		mtrr_enable();
-
-	/* Enable caches */
-	write_cr0(read_cr0() & ~X86_CR0_CD);
-
-	/* Restore value of CR4 */
-	if (boot_cpu_has(X86_FEATURE_PGE))
-		__write_cr4(saved_cr4);
-	raw_spin_unlock(&cache_disable_lock);
-}
-
 static void generic_set_all(void)
 {
 	unsigned long mask, count;

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 84900C4332F
	for <linux-kernel@archiver.kernel.org>; Thu, 10 Nov 2022 12:22:26 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229508AbiKJMWY (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 10 Nov 2022 07:22:24 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:37110 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S231133AbiKJMV7 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 10 Nov 2022 07:21:59 -0500
Received: from galois.linutronix.de (Galois.linutronix.de [193.142.43.55])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 7E975725C5;
        Thu, 10 Nov 2022 04:21:57 -0800 (PST)
Date:   Thu, 10 Nov 2022 12:21:54 -0000
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020; t=1668082916;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=tV/NJzlD6MkwFiPfqG2D/PJiggHs2S5WYz2H+Qe/tIY=;
        b=pUYvnudY6tYMZscuYBWcP9vK9hGq265zJuyf1KBESwjcfMldIkGfcvEEnIam684CQO+eUh
        xC1h6b+Yy+FiRXywumZxocuH3TsPYbHxDFCzgKvthKpcHPaRt8aI0Tx96JQEzROGl0X3ND
        J6wLXnuOC45yGp6auiAJcfzifM0zvSFtywp4TLGIDsdK37x0iDMqQ2sA28GBJwcF5Z+p8T
        BEW8uqKCxGE340heSmxoQmeEl6p72NOogXDyrTcNYM5BLKQGO7hkaVMv+2w2on/0yUzum6
        wT/s9KHXTsCAVGyySV1N0EX2R+Swzrt+MHzKDby2m8ncpkZ25Ayyh19TKCabbA==
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020e; t=1668082916;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=tV/NJzlD6MkwFiPfqG2D/PJiggHs2S5WYz2H+Qe/tIY=;
        b=NOxV4IZdZmZSGS4vNmA+POuk/GVqlGjpvhu2cTXK5/LgH5BG1Wc//aIqiYJmgnGyzPkXOD
        eui8THs4PXl1q5AQ==
From:   "tip-bot2 for Juergen Gross" <tip-bot2@linutronix.de>
Sender: tip-bot2@linutronix.de
Reply-to: linux-kernel@vger.kernel.org
To:     linux-tip-commits@vger.kernel.org
Subject: [tip: x86/cpu] x86/mtrr: Disentangle MTRR init from PAT init
Cc:     Juergen Gross <jgross@suse.com>, Borislav Petkov <bp@suse.de>,
        x86@kernel.org, linux-kernel@vger.kernel.org
In-Reply-To: <20221102074713.21493-8-jgross@suse.com>
References: <20221102074713.21493-8-jgross@suse.com>
MIME-Version: 1.0
Message-ID: <166808291487.4906.17792517900400429986.tip-bot2@tip-bot2>
Robot-ID: <tip-bot2@linutronix.de>
Robot-Unsubscribe: Contact <mailto:tglx@linutronix.de> to get blacklisted from these emails
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The following commit has been merged into the x86/cpu branch of tip:

Commit-ID:     7d71db537b01a6beadbe45a4e6e302272110c2c0
Gitweb:        https://git.kernel.org/tip/7d71db537b01a6beadbe45a4e6e302272110c2c0
Author:        Juergen Gross <jgross@suse.com>
AuthorDate:    Wed, 02 Nov 2022 08:47:04 +01:00
Committer:     Borislav Petkov <bp@suse.de>
CommitterDate: Thu, 10 Nov 2022 13:12:44 +01:00

x86/mtrr: Disentangle MTRR init from PAT init

Add a main cache_cpu_init() init routine which initializes MTRR and/or
PAT support depending on what has been detected on the system.

Leave the MTRR-specific initialization in a MTRR-specific init function
where the smp_changes_mask setting happens now with caches disabled.

This global mask update was done with caches enabled before probably
because atomic operations while running uncached might have been quite
expensive.

But since only systems with a broken BIOS should ever require to set any
bit in smp_changes_mask, hurting those devices with a penalty of a few
microseconds during boot shouldn't be a real issue.

Signed-off-by: Juergen Gross <jgross@suse.com>
Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lore.kernel.org/r/20221102074713.21493-8-jgross@suse.com
Signed-off-by: Borislav Petkov <bp@suse.de>
---
 arch/x86/include/asm/cacheinfo.h   |  1 +
 arch/x86/include/asm/mtrr.h        |  2 ++
 arch/x86/kernel/cpu/cacheinfo.c    | 17 +++++++++++++++++
 arch/x86/kernel/cpu/mtrr/generic.c | 15 ++-------------
 4 files changed, 22 insertions(+), 13 deletions(-)

diff --git a/arch/x86/include/asm/cacheinfo.h b/arch/x86/include/asm/cacheinfo.h
index 6159874..978bac7 100644
--- a/arch/x86/include/asm/cacheinfo.h
+++ b/arch/x86/include/asm/cacheinfo.h
@@ -12,5 +12,6 @@ void cacheinfo_hygon_init_llc_id(struct cpuinfo_x86 *c, int cpu);
 
 void cache_disable(void);
 void cache_enable(void);
+void cache_cpu_init(void);
 
 #endif /* _ASM_X86_CACHEINFO_H */
diff --git a/arch/x86/include/asm/mtrr.h b/arch/x86/include/asm/mtrr.h
index 12a16ca..986249a 100644
--- a/arch/x86/include/asm/mtrr.h
+++ b/arch/x86/include/asm/mtrr.h
@@ -50,6 +50,7 @@ extern int mtrr_trim_uncached_memory(unsigned long end_pfn);
 extern int amd_special_default_mtrr(void);
 void mtrr_disable(void);
 void mtrr_enable(void);
+void mtrr_generic_set_state(void);
 #  else
 static inline u8 mtrr_type_lookup(u64 addr, u64 end, u8 *uniform)
 {
@@ -91,6 +92,7 @@ static inline void mtrr_centaur_report_mcr(int mcr, u32 lo, u32 hi)
 #define mtrr_bp_restore() do {} while (0)
 #define mtrr_disable() do {} while (0)
 #define mtrr_enable() do {} while (0)
+#define mtrr_generic_set_state() do {} while (0)
 #  endif
 
 #ifdef CONFIG_COMPAT
diff --git a/arch/x86/kernel/cpu/cacheinfo.c b/arch/x86/kernel/cpu/cacheinfo.c
index 0cbacec..31684bf 100644
--- a/arch/x86/kernel/cpu/cacheinfo.c
+++ b/arch/x86/kernel/cpu/cacheinfo.c
@@ -1120,3 +1120,20 @@ void cache_enable(void) __releases(cache_disable_lock)
 
 	raw_spin_unlock(&cache_disable_lock);
 }
+
+void cache_cpu_init(void)
+{
+	unsigned long flags;
+
+	local_irq_save(flags);
+	cache_disable();
+
+	if (memory_caching_control & CACHE_MTRR)
+		mtrr_generic_set_state();
+
+	if (memory_caching_control & CACHE_PAT)
+		pat_init();
+
+	cache_enable();
+	local_irq_restore(flags);
+}
diff --git a/arch/x86/kernel/cpu/mtrr/generic.c b/arch/x86/kernel/cpu/mtrr/generic.c
index 396cb1e..d409c38 100644
--- a/arch/x86/kernel/cpu/mtrr/generic.c
+++ b/arch/x86/kernel/cpu/mtrr/generic.c
@@ -731,30 +731,19 @@ void mtrr_enable(void)
 	mtrr_wrmsr(MSR_MTRRdefType, deftype_lo, deftype_hi);
 }
 
-static void generic_set_all(void)
+void mtrr_generic_set_state(void)
 {
 	unsigned long mask, count;
-	unsigned long flags;
-
-	local_irq_save(flags);
-	cache_disable();
 
 	/* Actually set the state */
 	mask = set_mtrr_state();
 
-	/* also set PAT */
-	pat_init();
-
-	cache_enable();
-	local_irq_restore(flags);
-
 	/* Use the atomic bitops to update the global mask */
 	for (count = 0; count < sizeof(mask) * 8; ++count) {
 		if (mask & 0x01)
 			set_bit(count, &smp_changes_mask);
 		mask >>= 1;
 	}
-
 }
 
 /**
@@ -854,7 +843,7 @@ int positive_have_wrcomb(void)
  * Generic structure...
  */
 const struct mtrr_ops generic_mtrr_ops = {
-	.set_all		= generic_set_all,
+	.set_all		= cache_cpu_init,
 	.get			= generic_get_mtrr,
 	.get_free_region	= generic_get_free_region,
 	.set			= generic_set_mtrr,

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 783C9C4332F
	for <linux-kernel@archiver.kernel.org>; Thu, 10 Nov 2022 12:22:31 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230200AbiKJMW3 (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 10 Nov 2022 07:22:29 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:37080 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230516AbiKJMV5 (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 10 Nov 2022 07:21:57 -0500
Received: from galois.linutronix.de (Galois.linutronix.de [IPv6:2a0a:51c0:0:12e:550::1])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 808BA725C3;
        Thu, 10 Nov 2022 04:21:56 -0800 (PST)
Date:   Thu, 10 Nov 2022 12:21:53 -0000
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020; t=1668082915;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=I/ooRQd7DtbG1LBSqmKVac3D5nhkiEo2hB1nYAv8Qiw=;
        b=3/tVNhIY78PMw3ujzvv7wveHgXC31dbLl1jLfopWyLCx07LUSCkaHQ/Q3808r1qag3Lr4R
        Com3kM5c6cC/q2YhfyQ1vOMXWsZuTgwzXFSkOPBqRksFwuxvxqjgry/6RUfbLW79vNv0Si
        EQnHTThXnJ7Rblh30L/d9h5TvoVDjIDdgp2Uoazo86z9cZXYIUQIvT/q99OxS3IzeZsn4G
        ybvWRmkzIt8ncT3JilzLziQq1NZkd9zuP4Zwabk1E6m9MR6uOJrBzW9d2G9UpgAmZINhMM
        0zdHDJe0BzlpfBKbW3nZVizLG1JGMBkzYD8aWDu5hW0tIogI51n0Gurr6xGTcw==
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020e; t=1668082915;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=I/ooRQd7DtbG1LBSqmKVac3D5nhkiEo2hB1nYAv8Qiw=;
        b=KUeOrMzY1o88sjuRzue5H0br2T/CmwsUovt2t5eVKRyYRy2Y4bBsvzUnt1YeBvtRFATjFN
        4SbeRV9RBUs2P6Bw==
From:   "tip-bot2 for Juergen Gross" <tip-bot2@linutronix.de>
Sender: tip-bot2@linutronix.de
Reply-to: linux-kernel@vger.kernel.org
To:     linux-tip-commits@vger.kernel.org
Subject: [tip: x86/cpu] x86/mtrr: Remove set_all callback from struct mtrr_ops
Cc:     Juergen Gross <jgross@suse.com>, Borislav Petkov <bp@suse.de>,
        x86@kernel.org, linux-kernel@vger.kernel.org
In-Reply-To: <20221102074713.21493-9-jgross@suse.com>
References: <20221102074713.21493-9-jgross@suse.com>
MIME-Version: 1.0
Message-ID: <166808291380.4906.4322463496092665408.tip-bot2@tip-bot2>
Robot-ID: <tip-bot2@linutronix.de>
Robot-Unsubscribe: Contact <mailto:tglx@linutronix.de> to get blacklisted from these emails
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The following commit has been merged into the x86/cpu branch of tip:

Commit-ID:     57df636cd336a1929c7ddc5fb48ed124d24cd7b2
Gitweb:        https://git.kernel.org/tip/57df636cd336a1929c7ddc5fb48ed124d24cd7b2
Author:        Juergen Gross <jgross@suse.com>
AuthorDate:    Wed, 02 Nov 2022 08:47:05 +01:00
Committer:     Borislav Petkov <bp@suse.de>
CommitterDate: Thu, 10 Nov 2022 13:12:44 +01:00

x86/mtrr: Remove set_all callback from struct mtrr_ops

Instead of using an indirect call to mtrr_if->set_all just call the only
possible target cache_cpu_init() directly. Remove the set_all function
pointer from struct mtrr_ops.

Signed-off-by: Juergen Gross <jgross@suse.com>
Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lore.kernel.org/r/20221102074713.21493-9-jgross@suse.com
Signed-off-by: Borislav Petkov <bp@suse.de>
---
 arch/x86/kernel/cpu/mtrr/generic.c |  1 -
 arch/x86/kernel/cpu/mtrr/mtrr.c    | 10 +++++-----
 arch/x86/kernel/cpu/mtrr/mtrr.h    |  2 --
 3 files changed, 5 insertions(+), 8 deletions(-)

diff --git a/arch/x86/kernel/cpu/mtrr/generic.c b/arch/x86/kernel/cpu/mtrr/generic.c
index d409c38..9d4d2bc 100644
--- a/arch/x86/kernel/cpu/mtrr/generic.c
+++ b/arch/x86/kernel/cpu/mtrr/generic.c
@@ -843,7 +843,6 @@ int positive_have_wrcomb(void)
  * Generic structure...
  */
 const struct mtrr_ops generic_mtrr_ops = {
-	.set_all		= cache_cpu_init,
 	.get			= generic_get_mtrr,
 	.get_free_region	= generic_get_free_region,
 	.set			= generic_set_mtrr,
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.c b/arch/x86/kernel/cpu/mtrr/mtrr.c
index 4209945..a44b510 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.c
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.c
@@ -170,15 +170,15 @@ static int mtrr_rendezvous_handler(void *info)
 	 * saved, and we want to replicate that across all the cpus that come
 	 * online (either at the end of boot or resume or during a runtime cpu
 	 * online). If we're doing that, @reg is set to something special and on
-	 * all the cpu's we do mtrr_if->set_all() (On the logical cpu that
+	 * all the CPUs we do cache_cpu_init() (On the logical CPU that
 	 * started the boot/resume sequence, this might be a duplicate
-	 * set_all()).
+	 * cache_cpu_init()).
 	 */
 	if (data->smp_reg != ~0U) {
 		mtrr_if->set(data->smp_reg, data->smp_base,
 			     data->smp_size, data->smp_type);
 	} else if (mtrr_aps_delayed_init || !cpu_online(smp_processor_id())) {
-		mtrr_if->set_all();
+		cache_cpu_init();
 	}
 	return 0;
 }
@@ -770,7 +770,7 @@ void __init mtrr_bp_init(void)
 
 			if (mtrr_cleanup(phys_addr)) {
 				changed_by_mtrr_cleanup = 1;
-				mtrr_if->set_all();
+				cache_cpu_init();
 			}
 		}
 	}
@@ -856,7 +856,7 @@ void mtrr_bp_restore(void)
 	if (!memory_caching_control)
 		return;
 
-	mtrr_if->set_all();
+	cache_cpu_init();
 }
 
 static int __init mtrr_init_finialize(void)
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.h b/arch/x86/kernel/cpu/mtrr/mtrr.h
index 88b1c4b..3b18831 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.h
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.h
@@ -16,8 +16,6 @@ struct mtrr_ops {
 	u32	vendor;
 	void	(*set)(unsigned int reg, unsigned long base,
 		       unsigned long size, mtrr_type type);
-	void	(*set_all)(void);
-
 	void	(*get)(unsigned int reg, unsigned long *base,
 		       unsigned long *size, mtrr_type *type);
 	int	(*get_free_region)(unsigned long base, unsigned long size,

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 90074C4332F
	for <linux-kernel@archiver.kernel.org>; Thu, 10 Nov 2022 12:22:34 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229838AbiKJMWc (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 10 Nov 2022 07:22:32 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:37140 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S231163AbiKJMWC (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 10 Nov 2022 07:22:02 -0500
Received: from galois.linutronix.de (Galois.linutronix.de [IPv6:2a0a:51c0:0:12e:550::1])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id C9866725C1;
        Thu, 10 Nov 2022 04:22:00 -0800 (PST)
Date:   Thu, 10 Nov 2022 12:21:58 -0000
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020; t=1668082919;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=fjQJS5f93wLG/tWeWmV/ra8od2ybqaIhClDun19QQFs=;
        b=m9gAR3O89MkcO2X4NTCvFuBbvp8AKRIPQw3BEIzYvLHqaqHH6awGXaTffo37U5kxOCoMmV
        5jRgTHkUpMXKzYD46ts7zgVOoRIJ0OgozhW5mdus3blD1pv25QgiA157b3uT76LpjT68Mk
        eIEkY/5OznEMVqaBAnXnnT27xrj9Qm3nr2/O2nJj6YOT1ZPb0gd4KEfroJYLb2oIIb4u9R
        GOl0bbRHOwHDw+YIMNWS3Hqkno05UOm4VLsuL8dFuNUvXVR09/45urMjH+7OBhWeJS61/6
        jdMQ9CTn+sCSsdv6BHxdOKYlIEpez0zGmnuACUYfu4Abn2gTrDysg9qrbuTzSw==
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020e; t=1668082919;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=fjQJS5f93wLG/tWeWmV/ra8od2ybqaIhClDun19QQFs=;
        b=CdjyMuoA5lEauYGxiCxHzOSrP+txf3D0HUG9aENSKHMM/FEl4XK/RCZS1unFyI1zlc3erZ
        xNBdcMc64Q2gU+DA==
From:   "tip-bot2 for Juergen Gross" <tip-bot2@linutronix.de>
Sender: tip-bot2@linutronix.de
Reply-to: linux-kernel@vger.kernel.org
To:     linux-tip-commits@vger.kernel.org
Subject: [tip: x86/cpu] x86/mtrr: Rename prepare_set() and post_set()
Cc:     Juergen Gross <jgross@suse.com>, Borislav Petkov <bp@suse.de>,
        x86@kernel.org, linux-kernel@vger.kernel.org
In-Reply-To: <20221102074713.21493-5-jgross@suse.com>
References: <20221102074713.21493-5-jgross@suse.com>
MIME-Version: 1.0
Message-ID: <166808291816.4906.2479732754463397288.tip-bot2@tip-bot2>
Robot-ID: <tip-bot2@linutronix.de>
Robot-Unsubscribe: Contact <mailto:tglx@linutronix.de> to get blacklisted from these emails
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The following commit has been merged into the x86/cpu branch of tip:

Commit-ID:     d5f66d5d10611978c3a93cc94a811d74e0cf6cbc
Gitweb:        https://git.kernel.org/tip/d5f66d5d10611978c3a93cc94a811d74e0cf6cbc
Author:        Juergen Gross <jgross@suse.com>
AuthorDate:    Wed, 02 Nov 2022 08:47:01 +01:00
Committer:     Borislav Petkov <bp@suse.de>
CommitterDate: Thu, 10 Nov 2022 13:12:44 +01:00

x86/mtrr: Rename prepare_set() and post_set()

Rename the currently MTRR-specific functions prepare_set() and
post_set() in preparation to move them. Make them non-static and put
their prototypes into cacheinfo.h, where they will end after moving them
to their final position anyway.

Expand the comment before the functions with an introductory line and
rename two related static variables, too.

  [ bp: Massage commit message. ]

Signed-off-by: Juergen Gross <jgross@suse.com>
Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lore.kernel.org/r/20221102074713.21493-5-jgross@suse.com
Signed-off-by: Borislav Petkov <bp@suse.de>
---
 arch/x86/include/asm/cacheinfo.h   |  3 ++-
 arch/x86/kernel/cpu/mtrr/generic.c | 43 ++++++++++++++---------------
 2 files changed, 24 insertions(+), 22 deletions(-)

diff --git a/arch/x86/include/asm/cacheinfo.h b/arch/x86/include/asm/cacheinfo.h
index c387396..6159874 100644
--- a/arch/x86/include/asm/cacheinfo.h
+++ b/arch/x86/include/asm/cacheinfo.h
@@ -10,4 +10,7 @@ extern unsigned int memory_caching_control;
 void cacheinfo_amd_init_llc_id(struct cpuinfo_x86 *c, int cpu);
 void cacheinfo_hygon_init_llc_id(struct cpuinfo_x86 *c, int cpu);
 
+void cache_disable(void);
+void cache_enable(void);
+
 #endif /* _ASM_X86_CACHEINFO_H */
diff --git a/arch/x86/kernel/cpu/mtrr/generic.c b/arch/x86/kernel/cpu/mtrr/generic.c
index 7bbaba4..2f3fc28 100644
--- a/arch/x86/kernel/cpu/mtrr/generic.c
+++ b/arch/x86/kernel/cpu/mtrr/generic.c
@@ -10,6 +10,7 @@
 #include <linux/mm.h>
 
 #include <asm/processor-flags.h>
+#include <asm/cacheinfo.h>
 #include <asm/cpufeature.h>
 #include <asm/tlbflush.h>
 #include <asm/mtrr.h>
@@ -396,9 +397,6 @@ print_fixed(unsigned base, unsigned step, const mtrr_type *types)
 	}
 }
 
-static void prepare_set(void);
-static void post_set(void);
-
 static void __init print_mtrr_state(void)
 {
 	unsigned int i;
@@ -450,11 +448,11 @@ void __init mtrr_bp_pat_init(void)
 	unsigned long flags;
 
 	local_irq_save(flags);
-	prepare_set();
+	cache_disable();
 
 	pat_init();
 
-	post_set();
+	cache_enable();
 	local_irq_restore(flags);
 }
 
@@ -687,7 +685,7 @@ static u32 deftype_lo, deftype_hi;
  * NOTE: The CPU must already be in a safe state for MTRR changes, including
  *       measures that only a single CPU can be active in set_mtrr_state() in
  *       order to not be subject to races for usage of deftype_lo. This is
- *       accomplished by taking set_atomicity_lock.
+ *       accomplished by taking cache_disable_lock.
  * RETURNS: 0 if no changes made, else a mask indicating what was changed.
  */
 static unsigned long set_mtrr_state(void)
@@ -718,18 +716,19 @@ static unsigned long set_mtrr_state(void)
 	return change_mask;
 }
 
-
-static unsigned long cr4;
-static DEFINE_RAW_SPINLOCK(set_atomicity_lock);
-
 /*
+ * Disable and enable caches. Needed for changing MTRRs and the PAT MSR.
+ *
  * Since we are disabling the cache don't allow any interrupts,
  * they would run extremely slow and would only increase the pain.
  *
  * The caller must ensure that local interrupts are disabled and
- * are reenabled after post_set() has been called.
+ * are reenabled after cache_enable() has been called.
  */
-static void prepare_set(void) __acquires(set_atomicity_lock)
+static unsigned long saved_cr4;
+static DEFINE_RAW_SPINLOCK(cache_disable_lock);
+
+void cache_disable(void) __acquires(cache_disable_lock)
 {
 	unsigned long cr0;
 
@@ -740,7 +739,7 @@ static void prepare_set(void) __acquires(set_atomicity_lock)
 	 * changes to the way the kernel boots
 	 */
 
-	raw_spin_lock(&set_atomicity_lock);
+	raw_spin_lock(&cache_disable_lock);
 
 	/* Enter the no-fill (CD=1, NW=0) cache mode and flush caches. */
 	cr0 = read_cr0() | X86_CR0_CD;
@@ -757,8 +756,8 @@ static void prepare_set(void) __acquires(set_atomicity_lock)
 
 	/* Save value of CR4 and clear Page Global Enable (bit 7) */
 	if (boot_cpu_has(X86_FEATURE_PGE)) {
-		cr4 = __read_cr4();
-		__write_cr4(cr4 & ~X86_CR4_PGE);
+		saved_cr4 = __read_cr4();
+		__write_cr4(saved_cr4 & ~X86_CR4_PGE);
 	}
 
 	/* Flush all TLBs via a mov %cr3, %reg; mov %reg, %cr3 */
@@ -776,7 +775,7 @@ static void prepare_set(void) __acquires(set_atomicity_lock)
 		wbinvd();
 }
 
-static void post_set(void) __releases(set_atomicity_lock)
+void cache_enable(void) __releases(cache_disable_lock)
 {
 	/* Flush TLBs (no need to flush caches - they are disabled) */
 	count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);
@@ -790,8 +789,8 @@ static void post_set(void) __releases(set_atomicity_lock)
 
 	/* Restore value of CR4 */
 	if (boot_cpu_has(X86_FEATURE_PGE))
-		__write_cr4(cr4);
-	raw_spin_unlock(&set_atomicity_lock);
+		__write_cr4(saved_cr4);
+	raw_spin_unlock(&cache_disable_lock);
 }
 
 static void generic_set_all(void)
@@ -800,7 +799,7 @@ static void generic_set_all(void)
 	unsigned long flags;
 
 	local_irq_save(flags);
-	prepare_set();
+	cache_disable();
 
 	/* Actually set the state */
 	mask = set_mtrr_state();
@@ -808,7 +807,7 @@ static void generic_set_all(void)
 	/* also set PAT */
 	pat_init();
 
-	post_set();
+	cache_enable();
 	local_irq_restore(flags);
 
 	/* Use the atomic bitops to update the global mask */
@@ -839,7 +838,7 @@ static void generic_set_mtrr(unsigned int reg, unsigned long base,
 	vr = &mtrr_state.var_ranges[reg];
 
 	local_irq_save(flags);
-	prepare_set();
+	cache_disable();
 
 	if (size == 0) {
 		/*
@@ -858,7 +857,7 @@ static void generic_set_mtrr(unsigned int reg, unsigned long base,
 		mtrr_wrmsr(MTRRphysMask_MSR(reg), vr->mask_lo, vr->mask_hi);
 	}
 
-	post_set();
+	cache_enable();
 	local_irq_restore(flags);
 }
 

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 3972EC433FE
	for <linux-kernel@archiver.kernel.org>; Thu, 10 Nov 2022 12:22:37 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229971AbiKJMWf (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 10 Nov 2022 07:22:35 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:37136 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S231150AbiKJMWA (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 10 Nov 2022 07:22:00 -0500
Received: from galois.linutronix.de (Galois.linutronix.de [193.142.43.55])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id A9BC071F39;
        Thu, 10 Nov 2022 04:21:59 -0800 (PST)
Date:   Thu, 10 Nov 2022 12:21:57 -0000
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020; t=1668082918;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=aLcUelJ2A0i8y7/IOu2BtBIP0gHvDvi3R6Me7UncgnA=;
        b=scZwJADqttdDQB9jffBstrgW81K6mAgWff7VZKY1fWj+5384ZOhuNC4rTEcy0lvZjmdS6L
        96FkYdlUF1cbInbsFHNfe/hnqrSiNPsVIEUY4kDgT5nlBkqEmMw1Ege7rwOIp5CnX7iv7f
        WWeO0fbpg20OxoZom+c+5oNaeG+YgjC2BN2QE2myB1ynjAul0FrOFIs8CNoechn7D8y+te
        ot7+manaS4h7ZnmtwCQORfdp9SKoaav/hiFY0zD508mTyW0KHLAtujEGX3alhF7mp0BEX1
        uxG6dHEbKdz6FbOZUJ9RjOikDDbboaz50CqpW0JB2IW4xlCd42cU/5c/txA2tg==
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020e; t=1668082918;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=aLcUelJ2A0i8y7/IOu2BtBIP0gHvDvi3R6Me7UncgnA=;
        b=NgEPCkQ0BgAQ7ue9reic0Tlgpp3jX/A13kmYg8NpnBEn2nHKYfxrWQi5X0bYOwGtIBfJ5i
        8t/LOCprNybL26Dg==
From:   "tip-bot2 for Juergen Gross" <tip-bot2@linutronix.de>
Sender: tip-bot2@linutronix.de
Reply-to: linux-kernel@vger.kernel.org
To:     linux-tip-commits@vger.kernel.org
Subject: [tip: x86/cpu] x86/mtrr: Split MTRR-specific handling from cache dis/enabling
Cc:     Juergen Gross <jgross@suse.com>, Borislav Petkov <bp@suse.de>,
        x86@kernel.org, linux-kernel@vger.kernel.org
In-Reply-To: <20221102074713.21493-6-jgross@suse.com>
References: <20221102074713.21493-6-jgross@suse.com>
MIME-Version: 1.0
Message-ID: <166808291702.4906.9360364596007729426.tip-bot2@tip-bot2>
Robot-ID: <tip-bot2@linutronix.de>
Robot-Unsubscribe: Contact <mailto:tglx@linutronix.de> to get blacklisted from these emails
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The following commit has been merged into the x86/cpu branch of tip:

Commit-ID:     4ad7149e46d048d3a543c96d35c1d255208dd33a
Gitweb:        https://git.kernel.org/tip/4ad7149e46d048d3a543c96d35c1d255208dd33a
Author:        Juergen Gross <jgross@suse.com>
AuthorDate:    Wed, 02 Nov 2022 08:47:02 +01:00
Committer:     Borislav Petkov <bp@suse.de>
CommitterDate: Thu, 10 Nov 2022 13:12:44 +01:00

x86/mtrr: Split MTRR-specific handling from cache dis/enabling

Split the MTRR-specific actions from cache_disable() and cache_enable()
into new functions mtrr_disable() and mtrr_enable().

Signed-off-by: Juergen Gross <jgross@suse.com>
Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lore.kernel.org/r/20221102074713.21493-6-jgross@suse.com
Signed-off-by: Borislav Petkov <bp@suse.de>
---
 arch/x86/include/asm/mtrr.h        |  4 ++++
 arch/x86/kernel/cpu/mtrr/generic.c | 26 +++++++++++++++++++-------
 2 files changed, 23 insertions(+), 7 deletions(-)

diff --git a/arch/x86/include/asm/mtrr.h b/arch/x86/include/asm/mtrr.h
index 76d7260..12a16ca 100644
--- a/arch/x86/include/asm/mtrr.h
+++ b/arch/x86/include/asm/mtrr.h
@@ -48,6 +48,8 @@ extern void mtrr_aps_init(void);
 extern void mtrr_bp_restore(void);
 extern int mtrr_trim_uncached_memory(unsigned long end_pfn);
 extern int amd_special_default_mtrr(void);
+void mtrr_disable(void);
+void mtrr_enable(void);
 #  else
 static inline u8 mtrr_type_lookup(u64 addr, u64 end, u8 *uniform)
 {
@@ -87,6 +89,8 @@ static inline void mtrr_centaur_report_mcr(int mcr, u32 lo, u32 hi)
 #define set_mtrr_aps_delayed_init() do {} while (0)
 #define mtrr_aps_init() do {} while (0)
 #define mtrr_bp_restore() do {} while (0)
+#define mtrr_disable() do {} while (0)
+#define mtrr_enable() do {} while (0)
 #  endif
 
 #ifdef CONFIG_COMPAT
diff --git a/arch/x86/kernel/cpu/mtrr/generic.c b/arch/x86/kernel/cpu/mtrr/generic.c
index 2f3fc28..0db0770 100644
--- a/arch/x86/kernel/cpu/mtrr/generic.c
+++ b/arch/x86/kernel/cpu/mtrr/generic.c
@@ -716,6 +716,21 @@ static unsigned long set_mtrr_state(void)
 	return change_mask;
 }
 
+void mtrr_disable(void)
+{
+	/* Save MTRR state */
+	rdmsr(MSR_MTRRdefType, deftype_lo, deftype_hi);
+
+	/* Disable MTRRs, and set the default type to uncached */
+	mtrr_wrmsr(MSR_MTRRdefType, deftype_lo & ~0xcff, deftype_hi);
+}
+
+void mtrr_enable(void)
+{
+	/* Intel (P6) standard MTRRs */
+	mtrr_wrmsr(MSR_MTRRdefType, deftype_lo, deftype_hi);
+}
+
 /*
  * Disable and enable caches. Needed for changing MTRRs and the PAT MSR.
  *
@@ -764,11 +779,8 @@ void cache_disable(void) __acquires(cache_disable_lock)
 	count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);
 	flush_tlb_local();
 
-	/* Save MTRR state */
-	rdmsr(MSR_MTRRdefType, deftype_lo, deftype_hi);
-
-	/* Disable MTRRs, and set the default type to uncached */
-	mtrr_wrmsr(MSR_MTRRdefType, deftype_lo & ~0xcff, deftype_hi);
+	if (cpu_feature_enabled(X86_FEATURE_MTRR))
+		mtrr_disable();
 
 	/* Again, only flush caches if we have to. */
 	if (!static_cpu_has(X86_FEATURE_SELFSNOOP))
@@ -781,8 +793,8 @@ void cache_enable(void) __releases(cache_disable_lock)
 	count_vm_tlb_event(NR_TLB_LOCAL_FLUSH_ALL);
 	flush_tlb_local();
 
-	/* Intel (P6) standard MTRRs */
-	mtrr_wrmsr(MSR_MTRRdefType, deftype_lo, deftype_hi);
+	if (cpu_feature_enabled(X86_FEATURE_MTRR))
+		mtrr_enable();
 
 	/* Enable caches */
 	write_cr0(read_cr0() & ~X86_CR0_CD);

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 655BEC4332F
	for <linux-kernel@archiver.kernel.org>; Thu, 10 Nov 2022 12:22:42 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229893AbiKJMWl (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 10 Nov 2022 07:22:41 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:37248 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229920AbiKJMWE (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 10 Nov 2022 07:22:04 -0500
Received: from galois.linutronix.de (Galois.linutronix.de [193.142.43.55])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id DB57C71F37;
        Thu, 10 Nov 2022 04:22:01 -0800 (PST)
Date:   Thu, 10 Nov 2022 12:21:59 -0000
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020; t=1668082920;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=YWlPPt79KZVQ4iVF+rQ2uLTDqlEKiYXb05/erd5wIAc=;
        b=VpwwBNHRpHnNA4BGE4NdGw8XWqeKb1REdhKei2LYNiXafcuX/ADrPCCgjCADUn5TgwTZyx
        VgbGZcIePDLD5QbTO1a8JkHzNzZGKPGXwE+js61QXWi7PMD05oA7auFF86+xqWNMDOb8YP
        HqRQoLxIswSUVia9rDnk6TczEtTDIEhWSB+T/meWlVWoRYYInmKR0Z/TILUudQDrHFmzSI
        1EN4VD7bjtHjZgomJsmcjO4snKVyxTagznI2VYpXkNLlMqvgx7QcmCyHhR7Cb2BjOCtH/X
        49uM+hlHHTkQG4x9X+BvyuEPFXtU9B8Bft0fiCvVopNz4HRw6AMZwXYJwV+TQw==
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=linutronix.de;
        s=2020e; t=1668082920;
        h=from:from:sender:sender:reply-to:reply-to:subject:subject:date:date:
         message-id:message-id:to:to:cc:cc:mime-version:mime-version:
         content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=YWlPPt79KZVQ4iVF+rQ2uLTDqlEKiYXb05/erd5wIAc=;
        b=We81QvbcApQDduVHkfkDX2V5FHfEgUDy/l34TPBbG5nTAvZI2MIDh2Dq6IAG/G2Kflr8Be
        +ws0lJP8llLPf+AA==
From:   "tip-bot2 for Juergen Gross" <tip-bot2@linutronix.de>
Sender: tip-bot2@linutronix.de
Reply-to: linux-kernel@vger.kernel.org
To:     linux-tip-commits@vger.kernel.org
Subject: [tip: x86/cpu] x86/mtrr: Replace use_intel() with a local flag
Cc:     Juergen Gross <jgross@suse.com>, Borislav Petkov <bp@suse.de>,
        x86@kernel.org, linux-kernel@vger.kernel.org
In-Reply-To: <20221102074713.21493-4-jgross@suse.com>
References: <20221102074713.21493-4-jgross@suse.com>
MIME-Version: 1.0
Message-ID: <166808291924.4906.14811957457604547770.tip-bot2@tip-bot2>
Robot-ID: <tip-bot2@linutronix.de>
Robot-Unsubscribe: Contact <mailto:tglx@linutronix.de> to get blacklisted from these emails
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The following commit has been merged into the x86/cpu branch of tip:

Commit-ID:     45fa71f19a2d73f157d6892a8d677a738a0414fd
Gitweb:        https://git.kernel.org/tip/45fa71f19a2d73f157d6892a8d677a738a0414fd
Author:        Juergen Gross <jgross@suse.com>
AuthorDate:    Wed, 02 Nov 2022 08:47:00 +01:00
Committer:     Borislav Petkov <bp@suse.de>
CommitterDate: Thu, 10 Nov 2022 13:12:44 +01:00

x86/mtrr: Replace use_intel() with a local flag

In MTRR code use_intel() is only used in one source file, and the
relevant use_intel_if member of struct mtrr_ops is set only in
generic_mtrr_ops.

Replace use_intel() with a single flag in cacheinfo.c which can be
set when assigning generic_mtrr_ops to mtrr_if. This allows to drop
use_intel_if from mtrr_ops, while preparing to decouple PAT from MTRR.
As another preparation for the PAT/MTRR decoupling use a bit for MTRR
control and one for PAT control. For now set both bits together, this
can be changed later.

As the new flag will be set only if mtrr_enabled is set, the test for
mtrr_enabled can be dropped at some places.

  [ bp: Massage commit message. ]

Signed-off-by: Juergen Gross <jgross@suse.com>
Signed-off-by: Borislav Petkov <bp@suse.de>
Link: https://lore.kernel.org/r/20221102074713.21493-4-jgross@suse.com
Signed-off-by: Borislav Petkov <bp@suse.de>
---
 arch/x86/include/asm/cacheinfo.h   |  5 +++++
 arch/x86/kernel/cpu/cacheinfo.c    |  3 +++
 arch/x86/kernel/cpu/mtrr/generic.c |  1 -
 arch/x86/kernel/cpu/mtrr/mtrr.c    | 28 +++++++++++++---------------
 arch/x86/kernel/cpu/mtrr/mtrr.h    |  2 --
 5 files changed, 21 insertions(+), 18 deletions(-)

diff --git a/arch/x86/include/asm/cacheinfo.h b/arch/x86/include/asm/cacheinfo.h
index 86b2e0d..c387396 100644
--- a/arch/x86/include/asm/cacheinfo.h
+++ b/arch/x86/include/asm/cacheinfo.h
@@ -2,6 +2,11 @@
 #ifndef _ASM_X86_CACHEINFO_H
 #define _ASM_X86_CACHEINFO_H
 
+/* Kernel controls MTRR and/or PAT MSRs. */
+extern unsigned int memory_caching_control;
+#define CACHE_MTRR 0x01
+#define CACHE_PAT  0x02
+
 void cacheinfo_amd_init_llc_id(struct cpuinfo_x86 *c, int cpu);
 void cacheinfo_hygon_init_llc_id(struct cpuinfo_x86 *c, int cpu);
 
diff --git a/arch/x86/kernel/cpu/cacheinfo.c b/arch/x86/kernel/cpu/cacheinfo.c
index 6655683..32fb049 100644
--- a/arch/x86/kernel/cpu/cacheinfo.c
+++ b/arch/x86/kernel/cpu/cacheinfo.c
@@ -35,6 +35,9 @@ DEFINE_PER_CPU_READ_MOSTLY(cpumask_var_t, cpu_llc_shared_map);
 /* Shared L2 cache maps */
 DEFINE_PER_CPU_READ_MOSTLY(cpumask_var_t, cpu_l2c_shared_map);
 
+/* Kernel controls MTRR and/or PAT MSRs. */
+unsigned int memory_caching_control __ro_after_init;
+
 struct _cache_table {
 	unsigned char descriptor;
 	char cache_type;
diff --git a/arch/x86/kernel/cpu/mtrr/generic.c b/arch/x86/kernel/cpu/mtrr/generic.c
index c8f8951..7bbaba4 100644
--- a/arch/x86/kernel/cpu/mtrr/generic.c
+++ b/arch/x86/kernel/cpu/mtrr/generic.c
@@ -917,7 +917,6 @@ int positive_have_wrcomb(void)
  * Generic structure...
  */
 const struct mtrr_ops generic_mtrr_ops = {
-	.use_intel_if		= 1,
 	.set_all		= generic_set_all,
 	.get			= generic_get_mtrr,
 	.get_free_region	= generic_get_free_region,
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.c b/arch/x86/kernel/cpu/mtrr/mtrr.c
index 2746cac..4209945 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.c
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.c
@@ -46,6 +46,7 @@
 #include <linux/syscore_ops.h>
 #include <linux/rcupdate.h>
 
+#include <asm/cacheinfo.h>
 #include <asm/cpufeature.h>
 #include <asm/e820/api.h>
 #include <asm/mtrr.h>
@@ -119,11 +120,11 @@ static int have_wrcomb(void)
 }
 
 /*  This function returns the number of variable MTRRs  */
-static void __init set_num_var_ranges(void)
+static void __init set_num_var_ranges(bool use_generic)
 {
 	unsigned long config = 0, dummy;
 
-	if (use_intel())
+	if (use_generic)
 		rdmsr(MSR_MTRRcap, config, dummy);
 	else if (is_cpu(AMD) || is_cpu(HYGON))
 		config = 2;
@@ -756,14 +757,16 @@ void __init mtrr_bp_init(void)
 
 	if (mtrr_if) {
 		__mtrr_enabled = true;
-		set_num_var_ranges();
+		set_num_var_ranges(mtrr_if == &generic_mtrr_ops);
 		init_table();
-		if (use_intel()) {
+		if (mtrr_if == &generic_mtrr_ops) {
 			/* BIOS may override */
 			__mtrr_enabled = get_mtrr_state();
 
-			if (mtrr_enabled())
+			if (mtrr_enabled()) {
 				mtrr_bp_pat_init();
+				memory_caching_control |= CACHE_MTRR | CACHE_PAT;
+			}
 
 			if (mtrr_cleanup(phys_addr)) {
 				changed_by_mtrr_cleanup = 1;
@@ -786,10 +789,7 @@ void __init mtrr_bp_init(void)
 
 void mtrr_ap_init(void)
 {
-	if (!mtrr_enabled())
-		return;
-
-	if (!use_intel() || mtrr_aps_delayed_init)
+	if (!memory_caching_control || mtrr_aps_delayed_init)
 		return;
 
 	/*
@@ -825,9 +825,7 @@ void mtrr_save_state(void)
 
 void set_mtrr_aps_delayed_init(void)
 {
-	if (!mtrr_enabled())
-		return;
-	if (!use_intel())
+	if (!memory_caching_control)
 		return;
 
 	mtrr_aps_delayed_init = true;
@@ -838,7 +836,7 @@ void set_mtrr_aps_delayed_init(void)
  */
 void mtrr_aps_init(void)
 {
-	if (!use_intel() || !mtrr_enabled())
+	if (!memory_caching_control)
 		return;
 
 	/*
@@ -855,7 +853,7 @@ void mtrr_aps_init(void)
 
 void mtrr_bp_restore(void)
 {
-	if (!use_intel() || !mtrr_enabled())
+	if (!memory_caching_control)
 		return;
 
 	mtrr_if->set_all();
@@ -866,7 +864,7 @@ static int __init mtrr_init_finialize(void)
 	if (!mtrr_enabled())
 		return 0;
 
-	if (use_intel()) {
+	if (memory_caching_control & CACHE_MTRR) {
 		if (!changed_by_mtrr_cleanup)
 			mtrr_state_warn();
 		return 0;
diff --git a/arch/x86/kernel/cpu/mtrr/mtrr.h b/arch/x86/kernel/cpu/mtrr/mtrr.h
index 2ac99e5..88b1c4b 100644
--- a/arch/x86/kernel/cpu/mtrr/mtrr.h
+++ b/arch/x86/kernel/cpu/mtrr/mtrr.h
@@ -14,7 +14,6 @@ extern unsigned int mtrr_usage_table[MTRR_MAX_VAR_RANGES];
 
 struct mtrr_ops {
 	u32	vendor;
-	u32	use_intel_if;
 	void	(*set)(unsigned int reg, unsigned long base,
 		       unsigned long size, mtrr_type type);
 	void	(*set_all)(void);
@@ -61,7 +60,6 @@ extern u64 size_or_mask, size_and_mask;
 extern const struct mtrr_ops *mtrr_if;
 
 #define is_cpu(vnd)	(mtrr_if && mtrr_if->vendor == X86_VENDOR_##vnd)
-#define use_intel()	(mtrr_if && mtrr_if->use_intel_if == 1)
 
 extern unsigned int num_var_ranges;
 extern u64 mtrr_tom2;

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id AE993C43217
	for <linux-kernel@archiver.kernel.org>; Thu,  1 Dec 2022 16:26:50 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232215AbiLAQ0t (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 1 Dec 2022 11:26:49 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:43870 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S231727AbiLAQ0q (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 1 Dec 2022 11:26:46 -0500
Received: from out3-smtp.messagingengine.com (out3-smtp.messagingengine.com [66.111.4.27])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id E59309C637
        for <linux-kernel@vger.kernel.org>; Thu,  1 Dec 2022 08:26:45 -0800 (PST)
Received: from compute1.internal (compute1.nyi.internal [10.202.2.41])
        by mailout.nyi.internal (Postfix) with ESMTP id 50E605C005C;
        Thu,  1 Dec 2022 11:26:44 -0500 (EST)
Received: from mailfrontend1 ([10.202.2.162])
  by compute1.internal (MEProxy); Thu, 01 Dec 2022 11:26:44 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=shutemov.name;
         h=cc:cc:content-type:date:date:from:from:in-reply-to
        :in-reply-to:message-id:mime-version:references:reply-to:sender
        :subject:subject:to:to; s=fm3; t=1669912004; x=1669998404; bh=kK
        8tjfIpX7xXRH9wAV/NGprqCcNFpZBgtzVaZrvKOcQ=; b=AiTIC5dWBp2wSd+Fnl
        1jnJl3iAOWM2utMe00NeTzGV5y+oqpjxngq7X6E1mGEHbdMTgJ0sInHMkOMR+eVh
        mcZdXi7RQ6PinLl3mxoYSQaoJ4SZkdux7AHa7zzaELISN22zwT7k+Yzb2xzctTef
        +/iAgqLiaMNO/dyliTGss8SveDmPLR22y0XjARBk6y+KkUoxan6RsNmUGeBl05wo
        s+RPJJJTOA7TeZUBPlSX+pQj+gz7qhmXGAker7seoJZ5F0JH2VsQ1jPYl2caSd7w
        ZkSnq1VmEAv/WxgMODIH2zt73ATKf7BTrSaISZ1ZEcD2taoC42CaXNR2fskofejL
        M2Vw==
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=
        messagingengine.com; h=cc:cc:content-type:date:date:feedback-id
        :feedback-id:from:from:in-reply-to:in-reply-to:message-id
        :mime-version:references:reply-to:sender:subject:subject:to:to
        :x-me-proxy:x-me-proxy:x-me-sender:x-me-sender:x-sasl-enc; s=
        fm1; t=1669912004; x=1669998404; bh=kK8tjfIpX7xXRH9wAV/NGprqCcNF
        pZBgtzVaZrvKOcQ=; b=EUnC+kzcB7/9E4GLUTwYoUAVAn7yNQb6/c37Ygxf77G9
        qxexz3cNkdwn/MozkQTG+QQWX7J8LnGfXs4fLDoSyo4/gtkHI01hXknCuEklO/4m
        y81AvfFF6xGfSvZ0RLIXhtXdNQWR9CFSATBHbOxwjqVne6GL2+nxMR4plazauZAd
        0tWh+t5Ywtv4w7r7P53/N1x3WD+vt6HL17WgKiC2txju7+GFy2hRfGwzAVrKEBPZ
        8ZU7KBRoww19mV13N/5mQjDjHwObK8YMZ1eIAHpSUUdiAP40A6aqrGsfeCtdoNX1
        J0WdM//UHLTKmt15TDFOLf3KFnaNok2eZ+G5H7Bs4Q==
X-ME-Sender: <xms:wtWIY56hUumOChzUoxWgLsx9NR4fjnsBfELadDNPOBVoZAAMIpIe8A>
    <xme:wtWIY27gAN-wAKsrGqZQk2y4rzqyJlAp-yyKpHEFoCK4YZToVe7CdbKDe_G4o5W1V
    z2Pq6VvpgHXPPjcGH4>
X-ME-Received: <xmr:wtWIYwe7yv2kh2Zq53D54aBDVk5y2M3d7_it0tgljxTulM-UeFYNi7z7_viqO8YJ80az1Q>
X-ME-Proxy-Cause: gggruggvucftvghtrhhoucdtuddrgedvhedrtdehgdeklecutefuodetggdotefrodftvf
    curfhrohhfihhlvgemucfhrghsthforghilhdpqfgfvfdpuffrtefokffrpgfnqfghnecu
    uegrihhlohhuthemuceftddtnecusecvtfgvtghiphhivghnthhsucdlqddutddtmdenuc
    fjughrpeffhffvvefukfhfgggtuggjsehttddttddttddvnecuhfhrohhmpedfmfhirhhi
    lhhlucetrdcuufhhuhhtvghmohhvfdcuoehkihhrihhllhesshhhuhhtvghmohhvrdhnrg
    hmvgeqnecuggftrfgrthhtvghrnhepfeeileeffeeiteeljeekheetieehhffhfeeuheel
    tdetgfeuvddvffegvdelhfdunecuffhomhgrihhnpehinhhtvghlrdgtohhmnecuvehluh
    hsthgvrhfuihiivgeptdenucfrrghrrghmpehmrghilhhfrhhomhepkhhirhhilhhlsehs
    hhhuthgvmhhovhdrnhgrmhgv
X-ME-Proxy: <xmx:wtWIYyJYsfQnV_qzO1J6DnV1Tjm8q4h6Zk1fZ2ImLLhCX9b2LW8NYA>
    <xmx:wtWIY9LWTHxJXLuTyo7F-EVXUwMnt0t7GCCdc6XS0AIr7PDWYM7GMg>
    <xmx:wtWIY7y_Npyr51F8GDGCGf3A1ju4TIzprJNI-TcBmIOA-AE8xh36Xw>
    <xmx:xNWIY09zypy1SO3N-r-7Qutp78aN-zKG24WIf8MTLoq5Up84qcIChg>
Feedback-ID: ie3994620:Fastmail
Received: by mail.messagingengine.com (Postfix) with ESMTPA; Thu,
 1 Dec 2022 11:26:42 -0500 (EST)
Received: by box.shutemov.name (Postfix, from userid 1000)
        id ADFCE109781; Thu,  1 Dec 2022 19:26:39 +0300 (+03)
Date:   Thu, 1 Dec 2022 19:26:39 +0300
From:   "Kirill A. Shutemov" <kirill@shutemov.name>
To:     Juergen Gross <jgross@suse.com>
Cc:     linux-kernel@vger.kernel.org, x86@kernel.org,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>,
        Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>
Subject: Re: [PATCH v5 13/16] x86: decouple PAT and MTRR handling
Message-ID: <20221201162639.omlr5ff55go7uhlf@box.shutemov.name>
References: <20221102074713.21493-1-jgross@suse.com>
 <20221102074713.21493-14-jgross@suse.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20221102074713.21493-14-jgross@suse.com>
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, Nov 02, 2022 at 08:47:10AM +0100, Juergen Gross wrote:
> Today PAT is usable only with MTRR being active, with some nasty tweaks
> to make PAT usable when running as Xen PV guest, which doesn't support
> MTRR.
> 
> The reason for this coupling is, that both, PAT MSR changes and MTRR
> changes, require a similar sequence and so full PAT support was added
> using the already available MTRR handling.
> 
> Xen PV PAT handling can work without MTRR, as it just needs to consume
> the PAT MSR setting done by the hypervisor without the ability and need
> to change it. This in turn has resulted in a convoluted initialization
> sequence and wrong decisions regarding cache mode availability due to
> misguiding PAT availability flags.
> 
> Fix all of that by allowing to use PAT without MTRR and by reworking
> the current PAT initialization sequence to match better with the newly
> introduced generic cache initialization.
> 
> This removes the need of the recently added pat_force_disabled flag, so
> remove the remnants of the patch adding it.
> 
> Signed-off-by: Juergen Gross <jgross@suse.com>

This patch breaks boot for TDX guest.

Kernel now tries to set CR0.CD which is forbidden in TDX guest[1] and
causes #VE:

	tdx: Unexpected #VE: 28
	VE fault: 0000 [#1] PREEMPT SMP NOPTI
	CPU: 0 PID: 0 Comm: swapper Not tainted 6.1.0-rc1-00015-gadfe7512e1d0 #2646
	Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 0.0.0 02/06/2015
	RIP: 0010:native_write_cr0 (arch/x86/kernel/cpu/common.c:427) 
	 Call Trace:
	  <TASK>
	 ? cache_disable (arch/x86/include/asm/cpufeature.h:173 arch/x86/kernel/cpu/cacheinfo.c:1085) 
	 ? cache_cpu_init (arch/x86/kernel/cpu/cacheinfo.c:1132 (discriminator 3)) 
	 ? setup_arch (arch/x86/kernel/setup.c:1079) 
	 ? start_kernel (init/main.c:279 (discriminator 3) init/main.c:477 (discriminator 3) init/main.c:960 (discriminator 3)) 
	 ? load_ucode_bsp (arch/x86/kernel/cpu/microcode/core.c:155) 
	 ? secondary_startup_64_no_verify (arch/x86/kernel/head_64.S:358) 
	  </TASK>

Any suggestion how to fix it?

[1] Section 10.6.1. "CR0", https://cdrdv2.intel.com/v1/dl/getContent/733568
-- 
  Kiryl Shutsemau / Kirill A. Shutemov

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id B0058C43217
	for <linux-kernel@archiver.kernel.org>; Thu,  1 Dec 2022 16:33:35 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232229AbiLAQde (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 1 Dec 2022 11:33:34 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:51782 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S232235AbiLAQdc (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 1 Dec 2022 11:33:32 -0500
Received: from smtp-out1.suse.de (smtp-out1.suse.de [195.135.220.28])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id CB4B7A95B8
        for <linux-kernel@vger.kernel.org>; Thu,  1 Dec 2022 08:33:30 -0800 (PST)
Received: from imap1.suse-dmz.suse.de (imap1.suse-dmz.suse.de [192.168.254.73])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out1.suse.de (Postfix) with ESMTPS id 7918321B50;
        Thu,  1 Dec 2022 16:33:29 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1669912409; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references;
        bh=hQBCgRtNwjpMVX06HttfDC1rrQdpVuhxKCeeWmLG3BM=;
        b=jVHOMh4nZ1CSjAtMP9/EarGO4bviHQ5OdPoxy8FdaYsZfin8+1YwcxUgn9DR+IfkfC2rau
        dw8G1guShDzc37XFubFUTjFi4HCwZ+KvhSsB+Lb4lFVwyaiw8tPg3vH4Sd43YiTZQqlFKh
        ZRxzmGIQhlCPZFsFOWzF6bZ817tdNDc=
Received: from imap1.suse-dmz.suse.de (imap1.suse-dmz.suse.de [192.168.254.73])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap1.suse-dmz.suse.de (Postfix) with ESMTPS id 2DF8C1320E;
        Thu,  1 Dec 2022 16:33:29 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap1.suse-dmz.suse.de with ESMTPSA
        id xWBnCVnXiGONdAAAGKfGzw
        (envelope-from <jgross@suse.com>); Thu, 01 Dec 2022 16:33:29 +0000
Message-ID: <6d642051-31d8-81d5-f379-568360c5cb60@suse.com>
Date:   Thu, 1 Dec 2022 17:33:28 +0100
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.5.0
Subject: Re: [PATCH v5 13/16] x86: decouple PAT and MTRR handling
Content-Language: en-US
To:     "Kirill A. Shutemov" <kirill@shutemov.name>
Cc:     linux-kernel@vger.kernel.org, x86@kernel.org,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>,
        Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>
References: <20221102074713.21493-1-jgross@suse.com>
 <20221102074713.21493-14-jgross@suse.com>
 <20221201162639.omlr5ff55go7uhlf@box.shutemov.name>
From:   Juergen Gross <jgross@suse.com>
In-Reply-To: <20221201162639.omlr5ff55go7uhlf@box.shutemov.name>
Content-Type: multipart/signed; micalg=pgp-sha256;
 protocol="application/pgp-signature";
 boundary="------------SHy2yd5K00j8as9NgyPSOPSV"
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--------------SHy2yd5K00j8as9NgyPSOPSV
Content-Type: multipart/mixed; boundary="------------pUsBNUjjT3z3WMLFulHrpovs";
 protected-headers="v1"
From: Juergen Gross <jgross@suse.com>
To: "Kirill A. Shutemov" <kirill@shutemov.name>
Cc: linux-kernel@vger.kernel.org, x86@kernel.org,
 Thomas Gleixner <tglx@linutronix.de>, Ingo Molnar <mingo@redhat.com>,
 Borislav Petkov <bp@alien8.de>, Dave Hansen <dave.hansen@linux.intel.com>,
 "H. Peter Anvin" <hpa@zytor.com>, Andy Lutomirski <luto@kernel.org>,
 Peter Zijlstra <peterz@infradead.org>
Message-ID: <6d642051-31d8-81d5-f379-568360c5cb60@suse.com>
Subject: Re: [PATCH v5 13/16] x86: decouple PAT and MTRR handling
References: <20221102074713.21493-1-jgross@suse.com>
 <20221102074713.21493-14-jgross@suse.com>
 <20221201162639.omlr5ff55go7uhlf@box.shutemov.name>
In-Reply-To: <20221201162639.omlr5ff55go7uhlf@box.shutemov.name>

--------------pUsBNUjjT3z3WMLFulHrpovs
Content-Type: multipart/mixed; boundary="------------PNcRKuxBkzdEC4HvHP3ep8H7"

--------------PNcRKuxBkzdEC4HvHP3ep8H7
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: base64

T24gMDEuMTIuMjIgMTc6MjYsIEtpcmlsbCBBLiBTaHV0ZW1vdiB3cm90ZToNCj4gT24gV2Vk
LCBOb3YgMDIsIDIwMjIgYXQgMDg6NDc6MTBBTSArMDEwMCwgSnVlcmdlbiBHcm9zcyB3cm90
ZToNCj4+IFRvZGF5IFBBVCBpcyB1c2FibGUgb25seSB3aXRoIE1UUlIgYmVpbmcgYWN0aXZl
LCB3aXRoIHNvbWUgbmFzdHkgdHdlYWtzDQo+PiB0byBtYWtlIFBBVCB1c2FibGUgd2hlbiBy
dW5uaW5nIGFzIFhlbiBQViBndWVzdCwgd2hpY2ggZG9lc24ndCBzdXBwb3J0DQo+PiBNVFJS
Lg0KPj4NCj4+IFRoZSByZWFzb24gZm9yIHRoaXMgY291cGxpbmcgaXMsIHRoYXQgYm90aCwg
UEFUIE1TUiBjaGFuZ2VzIGFuZCBNVFJSDQo+PiBjaGFuZ2VzLCByZXF1aXJlIGEgc2ltaWxh
ciBzZXF1ZW5jZSBhbmQgc28gZnVsbCBQQVQgc3VwcG9ydCB3YXMgYWRkZWQNCj4+IHVzaW5n
IHRoZSBhbHJlYWR5IGF2YWlsYWJsZSBNVFJSIGhhbmRsaW5nLg0KPj4NCj4+IFhlbiBQViBQ
QVQgaGFuZGxpbmcgY2FuIHdvcmsgd2l0aG91dCBNVFJSLCBhcyBpdCBqdXN0IG5lZWRzIHRv
IGNvbnN1bWUNCj4+IHRoZSBQQVQgTVNSIHNldHRpbmcgZG9uZSBieSB0aGUgaHlwZXJ2aXNv
ciB3aXRob3V0IHRoZSBhYmlsaXR5IGFuZCBuZWVkDQo+PiB0byBjaGFuZ2UgaXQuIFRoaXMg
aW4gdHVybiBoYXMgcmVzdWx0ZWQgaW4gYSBjb252b2x1dGVkIGluaXRpYWxpemF0aW9uDQo+
PiBzZXF1ZW5jZSBhbmQgd3JvbmcgZGVjaXNpb25zIHJlZ2FyZGluZyBjYWNoZSBtb2RlIGF2
YWlsYWJpbGl0eSBkdWUgdG8NCj4+IG1pc2d1aWRpbmcgUEFUIGF2YWlsYWJpbGl0eSBmbGFn
cy4NCj4+DQo+PiBGaXggYWxsIG9mIHRoYXQgYnkgYWxsb3dpbmcgdG8gdXNlIFBBVCB3aXRo
b3V0IE1UUlIgYW5kIGJ5IHJld29ya2luZw0KPj4gdGhlIGN1cnJlbnQgUEFUIGluaXRpYWxp
emF0aW9uIHNlcXVlbmNlIHRvIG1hdGNoIGJldHRlciB3aXRoIHRoZSBuZXdseQ0KPj4gaW50
cm9kdWNlZCBnZW5lcmljIGNhY2hlIGluaXRpYWxpemF0aW9uLg0KPj4NCj4+IFRoaXMgcmVt
b3ZlcyB0aGUgbmVlZCBvZiB0aGUgcmVjZW50bHkgYWRkZWQgcGF0X2ZvcmNlX2Rpc2FibGVk
IGZsYWcsIHNvDQo+PiByZW1vdmUgdGhlIHJlbW5hbnRzIG9mIHRoZSBwYXRjaCBhZGRpbmcg
aXQuDQo+Pg0KPj4gU2lnbmVkLW9mZi1ieTogSnVlcmdlbiBHcm9zcyA8amdyb3NzQHN1c2Uu
Y29tPg0KPiANCj4gVGhpcyBwYXRjaCBicmVha3MgYm9vdCBmb3IgVERYIGd1ZXN0Lg0KPiAN
Cj4gS2VybmVsIG5vdyB0cmllcyB0byBzZXQgQ1IwLkNEIHdoaWNoIGlzIGZvcmJpZGRlbiBp
biBURFggZ3Vlc3RbMV0gYW5kDQo+IGNhdXNlcyAjVkU6DQo+IA0KPiAJdGR4OiBVbmV4cGVj
dGVkICNWRTogMjgNCj4gCVZFIGZhdWx0OiAwMDAwIFsjMV0gUFJFRU1QVCBTTVAgTk9QVEkN
Cj4gCUNQVTogMCBQSUQ6IDAgQ29tbTogc3dhcHBlciBOb3QgdGFpbnRlZCA2LjEuMC1yYzEt
MDAwMTUtZ2FkZmU3NTEyZTFkMCAjMjY0Ng0KPiAJSGFyZHdhcmUgbmFtZTogUUVNVSBTdGFu
ZGFyZCBQQyAoUTM1ICsgSUNIOSwgMjAwOSksIEJJT1MgMC4wLjAgMDIvMDYvMjAxNQ0KPiAJ
UklQOiAwMDEwOm5hdGl2ZV93cml0ZV9jcjAgKGFyY2gveDg2L2tlcm5lbC9jcHUvY29tbW9u
LmM6NDI3KQ0KPiAJIENhbGwgVHJhY2U6DQo+IAkgIDxUQVNLPg0KPiAJID8gY2FjaGVfZGlz
YWJsZSAoYXJjaC94ODYvaW5jbHVkZS9hc20vY3B1ZmVhdHVyZS5oOjE3MyBhcmNoL3g4Ni9r
ZXJuZWwvY3B1L2NhY2hlaW5mby5jOjEwODUpDQo+IAkgPyBjYWNoZV9jcHVfaW5pdCAoYXJj
aC94ODYva2VybmVsL2NwdS9jYWNoZWluZm8uYzoxMTMyIChkaXNjcmltaW5hdG9yIDMpKQ0K
PiAJID8gc2V0dXBfYXJjaCAoYXJjaC94ODYva2VybmVsL3NldHVwLmM6MTA3OSkNCj4gCSA/
IHN0YXJ0X2tlcm5lbCAoaW5pdC9tYWluLmM6Mjc5IChkaXNjcmltaW5hdG9yIDMpIGluaXQv
bWFpbi5jOjQ3NyAoZGlzY3JpbWluYXRvciAzKSBpbml0L21haW4uYzo5NjAgKGRpc2NyaW1p
bmF0b3IgMykpDQo+IAkgPyBsb2FkX3Vjb2RlX2JzcCAoYXJjaC94ODYva2VybmVsL2NwdS9t
aWNyb2NvZGUvY29yZS5jOjE1NSkNCj4gCSA/IHNlY29uZGFyeV9zdGFydHVwXzY0X25vX3Zl
cmlmeSAoYXJjaC94ODYva2VybmVsL2hlYWRfNjQuUzozNTgpDQo+IAkgIDwvVEFTSz4NCj4g
DQo+IEFueSBzdWdnZXN0aW9uIGhvdyB0byBmaXggaXQ/DQo+IA0KPiBbMV0gU2VjdGlvbiAx
MC42LjEuICJDUjAiLCBodHRwczovL2NkcmR2Mi5pbnRlbC5jb20vdjEvZGwvZ2V0Q29udGVu
dC83MzM1NjgNCg0KV2hhdCB3YXMgdGhlIHNvbHV0aW9uIGJlZm9yZT8NCg0KSSBndWVzcyBN
VFJSIHdhcyBkaXNhYmxlZCwgc28gdGhlcmUgd2FzIG5vIFBBVCwgdG9vPw0KDQpJZiB0aGlz
IGlzIHRoZSBjYXNlLCB5b3UgY2FuIGdvIHRoZSBzYW1lIHJvdXRlIGFzIFhlbiBQViBndWVz
dHMgZG8uDQoNCg0KSnVlcmdlbg0K
--------------PNcRKuxBkzdEC4HvHP3ep8H7
Content-Type: application/pgp-keys; name="OpenPGP_0xB0DE9DD628BF132F.asc"
Content-Disposition: attachment; filename="OpenPGP_0xB0DE9DD628BF132F.asc"
Content-Description: OpenPGP public key
Content-Transfer-Encoding: quoted-printable

-----BEGIN PGP PUBLIC KEY BLOCK-----

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
jR/i1DG86lem3iBDXzXsZDn8R38=3D
=3D2wuH
-----END PGP PUBLIC KEY BLOCK-----

--------------PNcRKuxBkzdEC4HvHP3ep8H7--

--------------pUsBNUjjT3z3WMLFulHrpovs--

--------------SHy2yd5K00j8as9NgyPSOPSV
Content-Type: application/pgp-signature; name="OpenPGP_signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="OpenPGP_signature"

-----BEGIN PGP SIGNATURE-----

wsB5BAABCAAjFiEEhRJncuj2BJSl0Jf3sN6d1ii/Ey8FAmOI11gFAwAAAAAACgkQsN6d1ii/Ey9L
yggAnSlGoWtvwDBsTJtTbNRBn+/WwC8QpUeKd/i5mHZcvY7aTL9bemCOj2nuMHKV7KX56aTryVM6
s2r8u+sKgmPHMLaIdxE4YXQnNFgkeAscZuuXZz26t8XRAme39MYZY0dK1G4IuvvZP8wx4B1sGzoE
kyISe+++tl4LhxyjhT9oivEzfB5opLANbm0JyKer9pT9iuB7EuX72fQGsspEddzquBYCMt2Eg0IT
ClHg3E966oJn5bS7CurP5dwvyly9WyzL4r2DDdyGNd+p7qt6WlSOGMeb8VpLeZ3IVGOpB20XQFb/
GjX9VDagM7CZhD5sLhnQ5UpE35S46nwdQJJyg0+M+Q==
=jOk1
-----END PGP SIGNATURE-----

--------------SHy2yd5K00j8as9NgyPSOPSV--

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id F2708C4332F
	for <linux-kernel@archiver.kernel.org>; Thu,  1 Dec 2022 23:58:17 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S231825AbiLAX6Q (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Thu, 1 Dec 2022 18:58:16 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:59950 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S231904AbiLAX6F (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 1 Dec 2022 18:58:05 -0500
Received: from wout2-smtp.messagingengine.com (wout2-smtp.messagingengine.com [64.147.123.25])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 31C9A1BE87
        for <linux-kernel@vger.kernel.org>; Thu,  1 Dec 2022 15:58:02 -0800 (PST)
Received: from compute3.internal (compute3.nyi.internal [10.202.2.43])
        by mailout.west.internal (Postfix) with ESMTP id 1BECD3200973;
        Thu,  1 Dec 2022 18:57:58 -0500 (EST)
Received: from mailfrontend1 ([10.202.2.162])
  by compute3.internal (MEProxy); Thu, 01 Dec 2022 18:57:58 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=shutemov.name;
         h=cc:cc:content-type:date:date:from:from:in-reply-to
        :in-reply-to:message-id:mime-version:references:reply-to:sender
        :subject:subject:to:to; s=fm3; t=1669939077; x=1670025477; bh=HU
        b79/u3DHt9exkJriR6aYTYCbhg1aynIlctuTDFlM8=; b=v12t/8Mqp3h7TSrJxP
        bqwVIXt4FosA/BnSwWLCNOeKAcPtDIPdLsgVQV4b98Dyrzpw1PgokSquillqt4o4
        zXKm0Kb34kqV4kasthh5EsDP0qRDz9zgwWfxUdXK1KSxAGeUu+AGFVCwF4VuKaDk
        vCAon/Xp7g2iYratKqrhUfqmKcb3d03YfQB5JbczRvvseSJwz6DpjKqvIBszSZaU
        3kB6cbw9UgBHXh1wTXxSPdqdqn0n8KsjPOw1h5gO/UTs45d49O6Wzi1mQJLVmJfH
        XBgumscP7g4pw+L1Jyp6SClthcfnAZE7YsKnSSnX2SCyO8J5+jI0KkFCgn2PBUjE
        C80A==
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=
        messagingengine.com; h=cc:cc:content-type:date:date:feedback-id
        :feedback-id:from:from:in-reply-to:in-reply-to:message-id
        :mime-version:references:reply-to:sender:subject:subject:to:to
        :x-me-proxy:x-me-proxy:x-me-sender:x-me-sender:x-sasl-enc; s=
        fm1; t=1669939077; x=1670025477; bh=HUb79/u3DHt9exkJriR6aYTYCbhg
        1aynIlctuTDFlM8=; b=OZzmklLoXrDZXu/dVqEFZMy3M8fd0CloieNx05pWgjSi
        3PtsZsjGtgV7mGTuyP3W1g7JVqQAQo0Nw6t/onztRtckdK9Oxq0XARSX2WUn5O4v
        sdkCuu372coDPFneKpF/C5Nm0dmrWsa4XzK4caXQ6DkWVySlaub3mvVjSWVzukMq
        mZD5Pu3P2UVQfhXFzvBE+LsaB3weCw8GqmGgrIBsy2tvwhVIcHfjqWKPJE5T85a+
        uMnpC7QqRUPLQjP59beZjFoOc/SoHPCwEeGxX1M7UH13nGwenMubxOKRwe7HxWrG
        KQMCR/+mzDTjkfsbsx3BwIDr9/3presZakhsnkFEjQ==
X-ME-Sender: <xms:hD-JY31xBAPYeQG-Cb0KVszFrMbpfm5BRV7NyyaYGtXrakMfljGesw>
    <xme:hD-JY2G8DJRizhIrU8ax2iDiJLlNunhqPCMYKeLXdws-J3dQQcpQbsvNSAH4zvmQv
    GvCKO6Xl8r52aesoFA>
X-ME-Received: <xmr:hD-JY36zdznFkcCEbg8-iP-QR872pPaQKzJAth9OKIx_ktbA1cKwsaakY63yEoZhDPFqmg>
X-ME-Proxy-Cause: gggruggvucftvghtrhhoucdtuddrgedvhedrtdeigddujecutefuodetggdotefrodftvf
    curfhrohhfihhlvgemucfhrghsthforghilhdpqfgfvfdpuffrtefokffrpgfnqfghnecu
    uegrihhlohhuthemuceftddtnecusecvtfgvtghiphhivghnthhsucdlqddutddtmdenuc
    fjughrpeffhffvvefukfhfgggtuggjsehttddttddttddvnecuhfhrohhmpedfmfhirhhi
    lhhlucetrdcuufhhuhhtvghmohhvfdcuoehkihhrihhllhesshhhuhhtvghmohhvrdhnrg
    hmvgeqnecuggftrfgrthhtvghrnhepfeeileeffeeiteeljeekheetieehhffhfeeuheel
    tdetgfeuvddvffegvdelhfdunecuffhomhgrihhnpehinhhtvghlrdgtohhmnecuvehluh
    hsthgvrhfuihiivgeptdenucfrrghrrghmpehmrghilhhfrhhomhepkhhirhhilhhlsehs
    hhhuthgvmhhovhdrnhgrmhgv
X-ME-Proxy: <xmx:hD-JY80MRgThr2XyWKZlqgFw-tWJ1jpCVc-Q74d38PfIeghTiZg04A>
    <xmx:hD-JY6Flk5C0tdZc8cYrxVQ-3YJOWryYFOitm1SrrnwFUVPiK_MJlQ>
    <xmx:hD-JY9-HY8tMERCmQmYBGg0jbeNwDH_38tr6okJtgj0X0s35KaFigQ>
    <xmx:hT-JY4Z3klNOwFaIsBcVQz1PS1FrRqLLzt0fKAiyri9-0L2VGRJZtw>
Feedback-ID: ie3994620:Fastmail
Received: by mail.messagingengine.com (Postfix) with ESMTPA; Thu,
 1 Dec 2022 18:57:56 -0500 (EST)
Received: by box.shutemov.name (Postfix, from userid 1000)
        id 8FCE8109781; Fri,  2 Dec 2022 02:57:53 +0300 (+03)
Date:   Fri, 2 Dec 2022 02:57:53 +0300
From:   "Kirill A. Shutemov" <kirill@shutemov.name>
To:     Juergen Gross <jgross@suse.com>
Cc:     linux-kernel@vger.kernel.org, x86@kernel.org,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>,
        Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>
Subject: Re: [PATCH v5 13/16] x86: decouple PAT and MTRR handling
Message-ID: <20221201235753.ybfc7gkgj7hlfkru@box.shutemov.name>
References: <20221102074713.21493-1-jgross@suse.com>
 <20221102074713.21493-14-jgross@suse.com>
 <20221201162639.omlr5ff55go7uhlf@box.shutemov.name>
 <6d642051-31d8-81d5-f379-568360c5cb60@suse.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <6d642051-31d8-81d5-f379-568360c5cb60@suse.com>
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, Dec 01, 2022 at 05:33:28PM +0100, Juergen Gross wrote:
> On 01.12.22 17:26, Kirill A. Shutemov wrote:
> > On Wed, Nov 02, 2022 at 08:47:10AM +0100, Juergen Gross wrote:
> > > Today PAT is usable only with MTRR being active, with some nasty tweaks
> > > to make PAT usable when running as Xen PV guest, which doesn't support
> > > MTRR.
> > > 
> > > The reason for this coupling is, that both, PAT MSR changes and MTRR
> > > changes, require a similar sequence and so full PAT support was added
> > > using the already available MTRR handling.
> > > 
> > > Xen PV PAT handling can work without MTRR, as it just needs to consume
> > > the PAT MSR setting done by the hypervisor without the ability and need
> > > to change it. This in turn has resulted in a convoluted initialization
> > > sequence and wrong decisions regarding cache mode availability due to
> > > misguiding PAT availability flags.
> > > 
> > > Fix all of that by allowing to use PAT without MTRR and by reworking
> > > the current PAT initialization sequence to match better with the newly
> > > introduced generic cache initialization.
> > > 
> > > This removes the need of the recently added pat_force_disabled flag, so
> > > remove the remnants of the patch adding it.
> > > 
> > > Signed-off-by: Juergen Gross <jgross@suse.com>
> > 
> > This patch breaks boot for TDX guest.
> > 
> > Kernel now tries to set CR0.CD which is forbidden in TDX guest[1] and
> > causes #VE:
> > 
> > 	tdx: Unexpected #VE: 28
> > 	VE fault: 0000 [#1] PREEMPT SMP NOPTI
> > 	CPU: 0 PID: 0 Comm: swapper Not tainted 6.1.0-rc1-00015-gadfe7512e1d0 #2646
> > 	Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 0.0.0 02/06/2015
> > 	RIP: 0010:native_write_cr0 (arch/x86/kernel/cpu/common.c:427)
> > 	 Call Trace:
> > 	  <TASK>
> > 	 ? cache_disable (arch/x86/include/asm/cpufeature.h:173 arch/x86/kernel/cpu/cacheinfo.c:1085)
> > 	 ? cache_cpu_init (arch/x86/kernel/cpu/cacheinfo.c:1132 (discriminator 3))
> > 	 ? setup_arch (arch/x86/kernel/setup.c:1079)
> > 	 ? start_kernel (init/main.c:279 (discriminator 3) init/main.c:477 (discriminator 3) init/main.c:960 (discriminator 3))
> > 	 ? load_ucode_bsp (arch/x86/kernel/cpu/microcode/core.c:155)
> > 	 ? secondary_startup_64_no_verify (arch/x86/kernel/head_64.S:358)
> > 	  </TASK>
> > 
> > Any suggestion how to fix it?
> > 
> > [1] Section 10.6.1. "CR0", https://cdrdv2.intel.com/v1/dl/getContent/733568
> 
> What was the solution before?
> 
> I guess MTRR was disabled, so there was no PAT, too?

Right:

Linus' tree:

[    0.002589] last_pfn = 0x480000 max_arch_pfn = 0x10000000000
[    0.003976] Disabled
[    0.004452] x86/PAT: MTRRs disabled, skipping PAT initialization too.
[    0.005856] CPU MTRRs all blank - virtualized system.
[    0.006915] x86/PAT: Configuration [0-7]: WB  WT  UC- UC  WB  WT  UC- UC

tip/master:

[    0.003443] last_pfn = 0x20b8e max_arch_pfn = 0x10000000000
[    0.005220] Disabled
[    0.005818] x86/PAT: Configuration [0-7]: WB  WC  UC- UC  WB  WP  UC- WT
[    0.007752] tdx: Unexpected #VE: 28

The dangling "Disabled" comes mtrr_bp_init().


> If this is the case, you can go the same route as Xen PV guests do.

Any reason X86_FEATURE_HYPERVISOR cannot be used instead of
X86_FEATURE_XENPV there?

Do we have any virtualized platform that supports it?

-- 
  Kiryl Shutsemau / Kirill A. Shutemov

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 79215C4332F
	for <linux-kernel@archiver.kernel.org>; Fri,  2 Dec 2022 05:56:55 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S231987AbiLBF4x (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Fri, 2 Dec 2022 00:56:53 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:50028 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S231744AbiLBF4v (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 2 Dec 2022 00:56:51 -0500
Received: from smtp-out1.suse.de (smtp-out1.suse.de [195.135.220.28])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 780CCDC4F9
        for <linux-kernel@vger.kernel.org>; Thu,  1 Dec 2022 21:56:49 -0800 (PST)
Received: from imap1.suse-dmz.suse.de (imap1.suse-dmz.suse.de [192.168.254.73])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out1.suse.de (Postfix) with ESMTPS id E97AA21C26;
        Fri,  2 Dec 2022 05:56:47 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1669960607; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references;
        bh=e5Qhleh6hKXDm+oqXFN78ksEK0h92aJ1A16NTsWbdQc=;
        b=jChMQqbMNkMKV9L5cXPawPWr06sqNz44TIwIoU3UMBhtnQarm1zBg2jHxogYwyfbcZr2Iy
        F9vu33XV/9WPUw8GoDpQaldOkTEtLRY+qghZ+3uOqQveNu+Zs5TijGHvZ47XgxrKSuUDvg
        KlaR5RRMBMjiXJxYZXZHWTgaFaStcD4=
Received: from imap1.suse-dmz.suse.de (imap1.suse-dmz.suse.de [192.168.254.73])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap1.suse-dmz.suse.de (Postfix) with ESMTPS id 99FFC13644;
        Fri,  2 Dec 2022 05:56:47 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap1.suse-dmz.suse.de with ESMTPSA
        id IqgwJJ+TiWOEXwAAGKfGzw
        (envelope-from <jgross@suse.com>); Fri, 02 Dec 2022 05:56:47 +0000
Message-ID: <eded3906-0720-a300-50c7-f8dad61c32c0@suse.com>
Date:   Fri, 2 Dec 2022 06:56:47 +0100
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.5.0
Content-Language: en-US
To:     "Kirill A. Shutemov" <kirill@shutemov.name>
Cc:     linux-kernel@vger.kernel.org, x86@kernel.org,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>,
        Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>
References: <20221102074713.21493-1-jgross@suse.com>
 <20221102074713.21493-14-jgross@suse.com>
 <20221201162639.omlr5ff55go7uhlf@box.shutemov.name>
 <6d642051-31d8-81d5-f379-568360c5cb60@suse.com>
 <20221201235753.ybfc7gkgj7hlfkru@box.shutemov.name>
From:   Juergen Gross <jgross@suse.com>
Subject: Re: [PATCH v5 13/16] x86: decouple PAT and MTRR handling
In-Reply-To: <20221201235753.ybfc7gkgj7hlfkru@box.shutemov.name>
Content-Type: multipart/signed; micalg=pgp-sha256;
 protocol="application/pgp-signature";
 boundary="------------FjbS7qxI0TTMsfUjM4LdOINs"
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--------------FjbS7qxI0TTMsfUjM4LdOINs
Content-Type: multipart/mixed; boundary="------------76nko0n3mx0T0TvaaFdczH0M";
 protected-headers="v1"
From: Juergen Gross <jgross@suse.com>
To: "Kirill A. Shutemov" <kirill@shutemov.name>
Cc: linux-kernel@vger.kernel.org, x86@kernel.org,
 Thomas Gleixner <tglx@linutronix.de>, Ingo Molnar <mingo@redhat.com>,
 Borislav Petkov <bp@alien8.de>, Dave Hansen <dave.hansen@linux.intel.com>,
 "H. Peter Anvin" <hpa@zytor.com>, Andy Lutomirski <luto@kernel.org>,
 Peter Zijlstra <peterz@infradead.org>
Message-ID: <eded3906-0720-a300-50c7-f8dad61c32c0@suse.com>
Subject: Re: [PATCH v5 13/16] x86: decouple PAT and MTRR handling
References: <20221102074713.21493-1-jgross@suse.com>
 <20221102074713.21493-14-jgross@suse.com>
 <20221201162639.omlr5ff55go7uhlf@box.shutemov.name>
 <6d642051-31d8-81d5-f379-568360c5cb60@suse.com>
 <20221201235753.ybfc7gkgj7hlfkru@box.shutemov.name>
In-Reply-To: <20221201235753.ybfc7gkgj7hlfkru@box.shutemov.name>

--------------76nko0n3mx0T0TvaaFdczH0M
Content-Type: multipart/mixed; boundary="------------qIRlnUsnE0YoorvkOvYRKO4j"

--------------qIRlnUsnE0YoorvkOvYRKO4j
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: base64

T24gMDIuMTIuMjIgMDA6NTcsIEtpcmlsbCBBLiBTaHV0ZW1vdiB3cm90ZToNCj4gT24gVGh1
LCBEZWMgMDEsIDIwMjIgYXQgMDU6MzM6MjhQTSArMDEwMCwgSnVlcmdlbiBHcm9zcyB3cm90
ZToNCj4+IE9uIDAxLjEyLjIyIDE3OjI2LCBLaXJpbGwgQS4gU2h1dGVtb3Ygd3JvdGU6DQo+
Pj4gT24gV2VkLCBOb3YgMDIsIDIwMjIgYXQgMDg6NDc6MTBBTSArMDEwMCwgSnVlcmdlbiBH
cm9zcyB3cm90ZToNCj4+Pj4gVG9kYXkgUEFUIGlzIHVzYWJsZSBvbmx5IHdpdGggTVRSUiBi
ZWluZyBhY3RpdmUsIHdpdGggc29tZSBuYXN0eSB0d2Vha3MNCj4+Pj4gdG8gbWFrZSBQQVQg
dXNhYmxlIHdoZW4gcnVubmluZyBhcyBYZW4gUFYgZ3Vlc3QsIHdoaWNoIGRvZXNuJ3Qgc3Vw
cG9ydA0KPj4+PiBNVFJSLg0KPj4+Pg0KPj4+PiBUaGUgcmVhc29uIGZvciB0aGlzIGNvdXBs
aW5nIGlzLCB0aGF0IGJvdGgsIFBBVCBNU1IgY2hhbmdlcyBhbmQgTVRSUg0KPj4+PiBjaGFu
Z2VzLCByZXF1aXJlIGEgc2ltaWxhciBzZXF1ZW5jZSBhbmQgc28gZnVsbCBQQVQgc3VwcG9y
dCB3YXMgYWRkZWQNCj4+Pj4gdXNpbmcgdGhlIGFscmVhZHkgYXZhaWxhYmxlIE1UUlIgaGFu
ZGxpbmcuDQo+Pj4+DQo+Pj4+IFhlbiBQViBQQVQgaGFuZGxpbmcgY2FuIHdvcmsgd2l0aG91
dCBNVFJSLCBhcyBpdCBqdXN0IG5lZWRzIHRvIGNvbnN1bWUNCj4+Pj4gdGhlIFBBVCBNU1Ig
c2V0dGluZyBkb25lIGJ5IHRoZSBoeXBlcnZpc29yIHdpdGhvdXQgdGhlIGFiaWxpdHkgYW5k
IG5lZWQNCj4+Pj4gdG8gY2hhbmdlIGl0LiBUaGlzIGluIHR1cm4gaGFzIHJlc3VsdGVkIGlu
IGEgY29udm9sdXRlZCBpbml0aWFsaXphdGlvbg0KPj4+PiBzZXF1ZW5jZSBhbmQgd3Jvbmcg
ZGVjaXNpb25zIHJlZ2FyZGluZyBjYWNoZSBtb2RlIGF2YWlsYWJpbGl0eSBkdWUgdG8NCj4+
Pj4gbWlzZ3VpZGluZyBQQVQgYXZhaWxhYmlsaXR5IGZsYWdzLg0KPj4+Pg0KPj4+PiBGaXgg
YWxsIG9mIHRoYXQgYnkgYWxsb3dpbmcgdG8gdXNlIFBBVCB3aXRob3V0IE1UUlIgYW5kIGJ5
IHJld29ya2luZw0KPj4+PiB0aGUgY3VycmVudCBQQVQgaW5pdGlhbGl6YXRpb24gc2VxdWVu
Y2UgdG8gbWF0Y2ggYmV0dGVyIHdpdGggdGhlIG5ld2x5DQo+Pj4+IGludHJvZHVjZWQgZ2Vu
ZXJpYyBjYWNoZSBpbml0aWFsaXphdGlvbi4NCj4+Pj4NCj4+Pj4gVGhpcyByZW1vdmVzIHRo
ZSBuZWVkIG9mIHRoZSByZWNlbnRseSBhZGRlZCBwYXRfZm9yY2VfZGlzYWJsZWQgZmxhZywg
c28NCj4+Pj4gcmVtb3ZlIHRoZSByZW1uYW50cyBvZiB0aGUgcGF0Y2ggYWRkaW5nIGl0Lg0K
Pj4+Pg0KPj4+PiBTaWduZWQtb2ZmLWJ5OiBKdWVyZ2VuIEdyb3NzIDxqZ3Jvc3NAc3VzZS5j
b20+DQo+Pj4NCj4+PiBUaGlzIHBhdGNoIGJyZWFrcyBib290IGZvciBURFggZ3Vlc3QuDQo+
Pj4NCj4+PiBLZXJuZWwgbm93IHRyaWVzIHRvIHNldCBDUjAuQ0Qgd2hpY2ggaXMgZm9yYmlk
ZGVuIGluIFREWCBndWVzdFsxXSBhbmQNCj4+PiBjYXVzZXMgI1ZFOg0KPj4+DQo+Pj4gCXRk
eDogVW5leHBlY3RlZCAjVkU6IDI4DQo+Pj4gCVZFIGZhdWx0OiAwMDAwIFsjMV0gUFJFRU1Q
VCBTTVAgTk9QVEkNCj4+PiAJQ1BVOiAwIFBJRDogMCBDb21tOiBzd2FwcGVyIE5vdCB0YWlu
dGVkIDYuMS4wLXJjMS0wMDAxNS1nYWRmZTc1MTJlMWQwICMyNjQ2DQo+Pj4gCUhhcmR3YXJl
IG5hbWU6IFFFTVUgU3RhbmRhcmQgUEMgKFEzNSArIElDSDksIDIwMDkpLCBCSU9TIDAuMC4w
IDAyLzA2LzIwMTUNCj4+PiAJUklQOiAwMDEwOm5hdGl2ZV93cml0ZV9jcjAgKGFyY2gveDg2
L2tlcm5lbC9jcHUvY29tbW9uLmM6NDI3KQ0KPj4+IAkgQ2FsbCBUcmFjZToNCj4+PiAJICA8
VEFTSz4NCj4+PiAJID8gY2FjaGVfZGlzYWJsZSAoYXJjaC94ODYvaW5jbHVkZS9hc20vY3B1
ZmVhdHVyZS5oOjE3MyBhcmNoL3g4Ni9rZXJuZWwvY3B1L2NhY2hlaW5mby5jOjEwODUpDQo+
Pj4gCSA/IGNhY2hlX2NwdV9pbml0IChhcmNoL3g4Ni9rZXJuZWwvY3B1L2NhY2hlaW5mby5j
OjExMzIgKGRpc2NyaW1pbmF0b3IgMykpDQo+Pj4gCSA/IHNldHVwX2FyY2ggKGFyY2gveDg2
L2tlcm5lbC9zZXR1cC5jOjEwNzkpDQo+Pj4gCSA/IHN0YXJ0X2tlcm5lbCAoaW5pdC9tYWlu
LmM6Mjc5IChkaXNjcmltaW5hdG9yIDMpIGluaXQvbWFpbi5jOjQ3NyAoZGlzY3JpbWluYXRv
ciAzKSBpbml0L21haW4uYzo5NjAgKGRpc2NyaW1pbmF0b3IgMykpDQo+Pj4gCSA/IGxvYWRf
dWNvZGVfYnNwIChhcmNoL3g4Ni9rZXJuZWwvY3B1L21pY3JvY29kZS9jb3JlLmM6MTU1KQ0K
Pj4+IAkgPyBzZWNvbmRhcnlfc3RhcnR1cF82NF9ub192ZXJpZnkgKGFyY2gveDg2L2tlcm5l
bC9oZWFkXzY0LlM6MzU4KQ0KPj4+IAkgIDwvVEFTSz4NCj4+Pg0KPj4+IEFueSBzdWdnZXN0
aW9uIGhvdyB0byBmaXggaXQ/DQo+Pj4NCj4+PiBbMV0gU2VjdGlvbiAxMC42LjEuICJDUjAi
LCBodHRwczovL2NkcmR2Mi5pbnRlbC5jb20vdjEvZGwvZ2V0Q29udGVudC83MzM1NjgNCj4+
DQo+PiBXaGF0IHdhcyB0aGUgc29sdXRpb24gYmVmb3JlPw0KPj4NCj4+IEkgZ3Vlc3MgTVRS
UiB3YXMgZGlzYWJsZWQsIHNvIHRoZXJlIHdhcyBubyBQQVQsIHRvbz8NCj4gDQo+IFJpZ2h0
Og0KPiANCj4gTGludXMnIHRyZWU6DQo+IA0KPiBbICAgIDAuMDAyNTg5XSBsYXN0X3BmbiA9
IDB4NDgwMDAwIG1heF9hcmNoX3BmbiA9IDB4MTAwMDAwMDAwMDANCj4gWyAgICAwLjAwMzk3
Nl0gRGlzYWJsZWQNCj4gWyAgICAwLjAwNDQ1Ml0geDg2L1BBVDogTVRSUnMgZGlzYWJsZWQs
IHNraXBwaW5nIFBBVCBpbml0aWFsaXphdGlvbiB0b28uDQo+IFsgICAgMC4wMDU4NTZdIENQ
VSBNVFJScyBhbGwgYmxhbmsgLSB2aXJ0dWFsaXplZCBzeXN0ZW0uDQo+IFsgICAgMC4wMDY5
MTVdIHg4Ni9QQVQ6IENvbmZpZ3VyYXRpb24gWzAtN106IFdCICBXVCAgVUMtIFVDICBXQiAg
V1QgIFVDLSBVQw0KPiANCj4gdGlwL21hc3RlcjoNCj4gDQo+IFsgICAgMC4wMDM0NDNdIGxh
c3RfcGZuID0gMHgyMGI4ZSBtYXhfYXJjaF9wZm4gPSAweDEwMDAwMDAwMDAwDQo+IFsgICAg
MC4wMDUyMjBdIERpc2FibGVkDQo+IFsgICAgMC4wMDU4MThdIHg4Ni9QQVQ6IENvbmZpZ3Vy
YXRpb24gWzAtN106IFdCICBXQyAgVUMtIFVDICBXQiAgV1AgIFVDLSBXVA0KPiBbICAgIDAu
MDA3NzUyXSB0ZHg6IFVuZXhwZWN0ZWQgI1ZFOiAyOA0KPiANCj4gVGhlIGRhbmdsaW5nICJE
aXNhYmxlZCIgY29tZXMgbXRycl9icF9pbml0KCkuDQo+IA0KPiANCj4+IElmIHRoaXMgaXMg
dGhlIGNhc2UsIHlvdSBjYW4gZ28gdGhlIHNhbWUgcm91dGUgYXMgWGVuIFBWIGd1ZXN0cyBk
by4NCj4gDQo+IEFueSByZWFzb24gWDg2X0ZFQVRVUkVfSFlQRVJWSVNPUiBjYW5ub3QgYmUg
dXNlZCBpbnN0ZWFkIG9mDQo+IFg4Nl9GRUFUVVJFX1hFTlBWIHRoZXJlPw0KPiANCj4gRG8g
d2UgaGF2ZSBhbnkgdmlydHVhbGl6ZWQgcGxhdGZvcm0gdGhhdCBzdXBwb3J0cyBpdD8NCg0K
WWVzLCBvZiBjb3Vyc2UuIEFueSBoYXJkd2FyZSB2aXJ0dWFsaXplZCBndWVzdCBzaG91bGQg
YmUgYWJsZSB0byB1c2UgaXQsDQpvYnZpb3VzbHkgVERYIGd1ZXN0cyBhcmUgdGhlIGZpcnN0
IG9uZXMgbm90IGJlaW5nIGFibGUgdG8gZG8gc28uDQoNCkFuZCBhYm92ZSBkbWVzZyBzbmlw
cGxldHMgYXJlIHNob3dpbmcgcmF0aGVyIG5pY2VseSB0aGF0IG5vdCBkaXNhYmxpbmcNClBB
VCBjb21wbGV0ZWx5IHNob3VsZCBiZSBhIGJlbmVmaXQgZm9yIFREWCBndWVzdHMsIGFzIGFs
bCBjYWNoaW5nIG1vZGVzDQp3b3VsZCBiZSB1c2FibGUgKHRoZSBQQVQgTVNSIHNlZW1zIHRv
IGJlIGluaXRpYWxpemVkIHF1aXRlIGZpbmUpLg0KDQpJbnN0ZWFkIG9mIFg4Nl9GRUFUVVJF
X1hFTlBWIHdlIGNvdWxkIGludHJvZHVjZSBzb21ldGhpbmcgbGlrZQ0KWDg2X0ZFQVRVUkVf
UEFUX1JFQURPTkxZLCB3aGljaCBjb3VsZCBiZSBzZXQgZm9yIFhlbiBQViBndWVzdHMgYW5k
IGZvcg0KVERYIGd1ZXN0cy4NCg0KDQpKdWVyZ2VuDQoNCg==
--------------qIRlnUsnE0YoorvkOvYRKO4j
Content-Type: application/pgp-keys; name="OpenPGP_0xB0DE9DD628BF132F.asc"
Content-Disposition: attachment; filename="OpenPGP_0xB0DE9DD628BF132F.asc"
Content-Description: OpenPGP public key
Content-Transfer-Encoding: quoted-printable

-----BEGIN PGP PUBLIC KEY BLOCK-----

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
jR/i1DG86lem3iBDXzXsZDn8R38=3D
=3D2wuH
-----END PGP PUBLIC KEY BLOCK-----

--------------qIRlnUsnE0YoorvkOvYRKO4j--

--------------76nko0n3mx0T0TvaaFdczH0M--

--------------FjbS7qxI0TTMsfUjM4LdOINs
Content-Type: application/pgp-signature; name="OpenPGP_signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="OpenPGP_signature"

-----BEGIN PGP SIGNATURE-----

wsB5BAABCAAjFiEEhRJncuj2BJSl0Jf3sN6d1ii/Ey8FAmOJk58FAwAAAAAACgkQsN6d1ii/Ey+S
/Af+PyEyZm2dU+IxGwY94OS9XLzapGBBKCAR1CEKwP2LnIBBwYmsL1U31R5IDJWd+vCf2HUI+CYT
mHqHdlnmSugpiJohi3r3QFt9jDUVskdIGRO7jkBfDQ+ycvJ6TIPbQymZlv2z+2I4uuixIWZ9NGMS
lWfXgdjoQNgPSiigRm602tCm1yp+wAt7MDn1bn+fVmDi5CXW8C03D7ftA3l9zPRIwseyUfO0vFmO
4nRLPywvZSBEeHxA/ooVR+cYLat4W3sVf6NC15s0rVC9noFphvzs5W4LZDHORi2ZuDxvPK5JFwC7
HnQ03/2FyVQNTbdPkt0hdLolxrolnZ7ExaP4ek1k9w==
=npWI
-----END PGP SIGNATURE-----

--------------FjbS7qxI0TTMsfUjM4LdOINs--

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 8658EC4321E
	for <linux-kernel@archiver.kernel.org>; Fri,  2 Dec 2022 13:27:16 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S233428AbiLBN1N (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Fri, 2 Dec 2022 08:27:13 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:56488 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S231929AbiLBN1K (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 2 Dec 2022 08:27:10 -0500
Received: from out1-smtp.messagingengine.com (out1-smtp.messagingengine.com [66.111.4.25])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 3FAEF83E95
        for <linux-kernel@vger.kernel.org>; Fri,  2 Dec 2022 05:27:07 -0800 (PST)
Received: from compute2.internal (compute2.nyi.internal [10.202.2.46])
        by mailout.nyi.internal (Postfix) with ESMTP id 6DA935C00DE;
        Fri,  2 Dec 2022 08:27:06 -0500 (EST)
Received: from mailfrontend1 ([10.202.2.162])
  by compute2.internal (MEProxy); Fri, 02 Dec 2022 08:27:06 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=shutemov.name;
         h=cc:cc:content-type:date:date:from:from:in-reply-to
        :in-reply-to:message-id:mime-version:references:reply-to:sender
        :subject:subject:to:to; s=fm3; t=1669987626; x=1670074026; bh=nn
        H2aCJND8jeSVoTp/sLLPIwU0GcEcoqylwasYtGMK0=; b=vPcmXRbnU4666E/as6
        EEysrh54PYRraOm54SuaJGlaHJih702gtrVzqc8tTpP9e0iIBmpCOuNUt1jiSqDW
        5llT3N5cO3+AzQzvKVaupxFZ0FZstbZJevzs7CmLoTu/wRusI9wbnLFRPS+Zl7bb
        4+W9fzEy9LihlXTi3Vhadad0TvSlo9AeIaqRZohvBH9NIg93duBL25jwD3JSDPvI
        bAEY68ciICntwBv9YDoawbEfQlYm1zxnE2updXcObxtyjXLWD4yoMA9EZTe2Ntde
        /Wc9HUYYFkLvlLAVnd03CFPB0QwOruQPtueKLGWVKEZWMLJc6evAENb18dJ0qusS
        FQxg==
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=
        messagingengine.com; h=cc:cc:content-type:date:date:feedback-id
        :feedback-id:from:from:in-reply-to:in-reply-to:message-id
        :mime-version:references:reply-to:sender:subject:subject:to:to
        :x-me-proxy:x-me-proxy:x-me-sender:x-me-sender:x-sasl-enc; s=
        fm1; t=1669987626; x=1670074026; bh=nnH2aCJND8jeSVoTp/sLLPIwU0Gc
        EcoqylwasYtGMK0=; b=l8H95D3qVNTMxEA4awNIIFpPHFuhM5LPGxsMis65DbKl
        Dqp4O16nZKb9PlHMdhKPNScSHHoY+pCyKMAKg2NGxXNbGgAwpsUfl7nglQ8w4uP+
        S328IzhfxYiYOa3cn8dz3PAXJQIGLQNbjYUDSQ5K5H+7HkJlEfacRbFFJqR3kdqC
        WpAiKb1KKs6P9Cw8TI2H00lq5lVO9/nTtNwAg/LTD2/XaYUxs5R4QU0VkvvNFtj/
        0ViL2eJR2jc7VbfQi/TwiaUl5UjVPH6C8PaN8KW9UOxza9Ju3gAw6K/VbCpeaYdL
        j4XMMvufq27UUpslLBFai3Zgl/PKM7AzyOZcjnb/tg==
X-ME-Sender: <xms:Kf2JY5EP_l511x7W9L2UTaw5aOcN9AIDrALYxQqPUGQX7cqtd41g5w>
    <xme:Kf2JY-UCyxPzrm7it8PKtq4CguImWkZZbklJ7XpXFq0c6kL3SPDMgXerfRjaoe9Ie
    nl4Cmm4MR6lya77hQs>
X-ME-Received: <xmr:Kf2JY7JRhgp8F7lwkN4D-xgV3bjlJDePzxzGA-BaNGvT6QQy4C6fZGZQua_TLe8uU49IYQ>
X-ME-Proxy-Cause: gggruggvucftvghtrhhoucdtuddrgedvhedrtdekgddvkecutefuodetggdotefrodftvf
    curfhrohhfihhlvgemucfhrghsthforghilhdpqfgfvfdpuffrtefokffrpgfnqfghnecu
    uegrihhlohhuthemuceftddtnecusecvtfgvtghiphhivghnthhsucdlqddutddtmdenuc
    fjughrpeffhffvvefukfhfgggtuggjsehttddttddttddvnecuhfhrohhmpedfmfhirhhi
    lhhlucetrdcuufhhuhhtvghmohhvfdcuoehkihhrihhllhesshhhuhhtvghmohhvrdhnrg
    hmvgeqnecuggftrfgrthhtvghrnhepfeeileeffeeiteeljeekheetieehhffhfeeuheel
    tdetgfeuvddvffegvdelhfdunecuffhomhgrihhnpehinhhtvghlrdgtohhmnecuvehluh
    hsthgvrhfuihiivgeptdenucfrrghrrghmpehmrghilhhfrhhomhepkhhirhhilhhlsehs
    hhhuthgvmhhovhdrnhgrmhgv
X-ME-Proxy: <xmx:Kf2JY_EgkhkZxUUH3UMWOg-fuq7Hpsh6swohC1ybw1bipBt9T6yEnQ>
    <xmx:Kf2JY_VQQMV7gdLabiomOS8tEa_oA2U5u-6hEc_ypkL00AScb5rqXA>
    <xmx:Kf2JY6My4V20lXlxYpM1bxyh81m5aR7pORqU1ODAIMw9PKWtDWS4Bg>
    <xmx:Kv2JY7oKFbWuMU7V49T_tYCZi58prMHsnLNbq9h0mc00XguvbqA-aw>
Feedback-ID: ie3994620:Fastmail
Received: by mail.messagingengine.com (Postfix) with ESMTPA; Fri,
 2 Dec 2022 08:27:04 -0500 (EST)
Received: by box.shutemov.name (Postfix, from userid 1000)
        id EC5B210975F; Fri,  2 Dec 2022 16:27:01 +0300 (+03)
Date:   Fri, 2 Dec 2022 16:27:01 +0300
From:   "Kirill A. Shutemov" <kirill@shutemov.name>
To:     Juergen Gross <jgross@suse.com>
Cc:     linux-kernel@vger.kernel.org, x86@kernel.org,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>,
        Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>
Subject: Re: [PATCH v5 13/16] x86: decouple PAT and MTRR handling
Message-ID: <20221202132701.ymcp7a2yv3st33so@box.shutemov.name>
References: <20221102074713.21493-1-jgross@suse.com>
 <20221102074713.21493-14-jgross@suse.com>
 <20221201162639.omlr5ff55go7uhlf@box.shutemov.name>
 <6d642051-31d8-81d5-f379-568360c5cb60@suse.com>
 <20221201235753.ybfc7gkgj7hlfkru@box.shutemov.name>
 <eded3906-0720-a300-50c7-f8dad61c32c0@suse.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <eded3906-0720-a300-50c7-f8dad61c32c0@suse.com>
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, Dec 02, 2022 at 06:56:47AM +0100, Juergen Gross wrote:
> On 02.12.22 00:57, Kirill A. Shutemov wrote:
> > On Thu, Dec 01, 2022 at 05:33:28PM +0100, Juergen Gross wrote:
> > > On 01.12.22 17:26, Kirill A. Shutemov wrote:
> > > > On Wed, Nov 02, 2022 at 08:47:10AM +0100, Juergen Gross wrote:
> > > > > Today PAT is usable only with MTRR being active, with some nasty tweaks
> > > > > to make PAT usable when running as Xen PV guest, which doesn't support
> > > > > MTRR.
> > > > > 
> > > > > The reason for this coupling is, that both, PAT MSR changes and MTRR
> > > > > changes, require a similar sequence and so full PAT support was added
> > > > > using the already available MTRR handling.
> > > > > 
> > > > > Xen PV PAT handling can work without MTRR, as it just needs to consume
> > > > > the PAT MSR setting done by the hypervisor without the ability and need
> > > > > to change it. This in turn has resulted in a convoluted initialization
> > > > > sequence and wrong decisions regarding cache mode availability due to
> > > > > misguiding PAT availability flags.
> > > > > 
> > > > > Fix all of that by allowing to use PAT without MTRR and by reworking
> > > > > the current PAT initialization sequence to match better with the newly
> > > > > introduced generic cache initialization.
> > > > > 
> > > > > This removes the need of the recently added pat_force_disabled flag, so
> > > > > remove the remnants of the patch adding it.
> > > > > 
> > > > > Signed-off-by: Juergen Gross <jgross@suse.com>
> > > > 
> > > > This patch breaks boot for TDX guest.
> > > > 
> > > > Kernel now tries to set CR0.CD which is forbidden in TDX guest[1] and
> > > > causes #VE:
> > > > 
> > > > 	tdx: Unexpected #VE: 28
> > > > 	VE fault: 0000 [#1] PREEMPT SMP NOPTI
> > > > 	CPU: 0 PID: 0 Comm: swapper Not tainted 6.1.0-rc1-00015-gadfe7512e1d0 #2646
> > > > 	Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 0.0.0 02/06/2015
> > > > 	RIP: 0010:native_write_cr0 (arch/x86/kernel/cpu/common.c:427)
> > > > 	 Call Trace:
> > > > 	  <TASK>
> > > > 	 ? cache_disable (arch/x86/include/asm/cpufeature.h:173 arch/x86/kernel/cpu/cacheinfo.c:1085)
> > > > 	 ? cache_cpu_init (arch/x86/kernel/cpu/cacheinfo.c:1132 (discriminator 3))
> > > > 	 ? setup_arch (arch/x86/kernel/setup.c:1079)
> > > > 	 ? start_kernel (init/main.c:279 (discriminator 3) init/main.c:477 (discriminator 3) init/main.c:960 (discriminator 3))
> > > > 	 ? load_ucode_bsp (arch/x86/kernel/cpu/microcode/core.c:155)
> > > > 	 ? secondary_startup_64_no_verify (arch/x86/kernel/head_64.S:358)
> > > > 	  </TASK>
> > > > 
> > > > Any suggestion how to fix it?
> > > > 
> > > > [1] Section 10.6.1. "CR0", https://cdrdv2.intel.com/v1/dl/getContent/733568
> > > 
> > > What was the solution before?
> > > 
> > > I guess MTRR was disabled, so there was no PAT, too?
> > 
> > Right:
> > 
> > Linus' tree:
> > 
> > [    0.002589] last_pfn = 0x480000 max_arch_pfn = 0x10000000000
> > [    0.003976] Disabled
> > [    0.004452] x86/PAT: MTRRs disabled, skipping PAT initialization too.
> > [    0.005856] CPU MTRRs all blank - virtualized system.
> > [    0.006915] x86/PAT: Configuration [0-7]: WB  WT  UC- UC  WB  WT  UC- UC
> > 
> > tip/master:
> > 
> > [    0.003443] last_pfn = 0x20b8e max_arch_pfn = 0x10000000000
> > [    0.005220] Disabled
> > [    0.005818] x86/PAT: Configuration [0-7]: WB  WC  UC- UC  WB  WP  UC- WT
> > [    0.007752] tdx: Unexpected #VE: 28
> > 
> > The dangling "Disabled" comes mtrr_bp_init().
> > 
> > 
> > > If this is the case, you can go the same route as Xen PV guests do.
> > 
> > Any reason X86_FEATURE_HYPERVISOR cannot be used instead of
> > X86_FEATURE_XENPV there?
> > 
> > Do we have any virtualized platform that supports it?
> 
> Yes, of course. Any hardware virtualized guest should be able to use it,
> obviously TDX guests are the first ones not being able to do so.
> 
> And above dmesg snipplets are showing rather nicely that not disabling
> PAT completely should be a benefit for TDX guests, as all caching modes
> would be usable (the PAT MSR seems to be initialized quite fine).
> 
> Instead of X86_FEATURE_XENPV we could introduce something like
> X86_FEATURE_PAT_READONLY, which could be set for Xen PV guests and for
> TDX guests.

Technically, the MSR is writable on TDX. But it seems there's no way to
properly change it, following the protocol of changing on MP systems.

Although, I don't quite follow what role cache disabling playing on system
with self-snoop support. Hm?

-- 
  Kiryl Shutsemau / Kirill A. Shutemov

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 7627CC4321E
	for <linux-kernel@archiver.kernel.org>; Fri,  2 Dec 2022 13:40:06 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232598AbiLBNkF (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Fri, 2 Dec 2022 08:40:05 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:42734 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S232364AbiLBNkC (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 2 Dec 2022 08:40:02 -0500
Received: from smtp-out1.suse.de (smtp-out1.suse.de [IPv6:2001:67c:2178:6::1c])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 3C8EABE1E
        for <linux-kernel@vger.kernel.org>; Fri,  2 Dec 2022 05:40:00 -0800 (PST)
Received: from imap1.suse-dmz.suse.de (imap1.suse-dmz.suse.de [192.168.254.73])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out1.suse.de (Postfix) with ESMTPS id DA25F21B7F;
        Fri,  2 Dec 2022 13:39:58 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1669988398; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references;
        bh=bVqDiQnZa9AyRVdLubylzVhEywv734CEEk9VurbOMrU=;
        b=U/4exzS652SdfJqmW8xdO4aa2SJRoL9x/R8OULV2PQLVr9IVyAE9AcFVwW2bOCKkUI20S5
        hsrCG0/KimjKHHwCnlMzNA1jU9G1OXZlXaoMXzlohMhVHGpP+daOIONUkpHbMg1cHXbdm1
        SSEl1b2Cn1mOX29Ph+15XlvxU1ozVFY=
Received: from imap1.suse-dmz.suse.de (imap1.suse-dmz.suse.de [192.168.254.73])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap1.suse-dmz.suse.de (Postfix) with ESMTPS id 8C22D133DE;
        Fri,  2 Dec 2022 13:39:58 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap1.suse-dmz.suse.de with ESMTPSA
        id avmqIC4AimPoUgAAGKfGzw
        (envelope-from <jgross@suse.com>); Fri, 02 Dec 2022 13:39:58 +0000
Message-ID: <f4e9b9bb-6906-084c-4b9e-144b2abb024b@suse.com>
Date:   Fri, 2 Dec 2022 14:39:58 +0100
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.5.0
Content-Language: en-US
To:     "Kirill A. Shutemov" <kirill@shutemov.name>
Cc:     linux-kernel@vger.kernel.org, x86@kernel.org,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>,
        Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>
References: <20221102074713.21493-1-jgross@suse.com>
 <20221102074713.21493-14-jgross@suse.com>
 <20221201162639.omlr5ff55go7uhlf@box.shutemov.name>
 <6d642051-31d8-81d5-f379-568360c5cb60@suse.com>
 <20221201235753.ybfc7gkgj7hlfkru@box.shutemov.name>
 <eded3906-0720-a300-50c7-f8dad61c32c0@suse.com>
 <20221202132701.ymcp7a2yv3st33so@box.shutemov.name>
From:   Juergen Gross <jgross@suse.com>
Subject: Re: [PATCH v5 13/16] x86: decouple PAT and MTRR handling
In-Reply-To: <20221202132701.ymcp7a2yv3st33so@box.shutemov.name>
Content-Type: multipart/signed; micalg=pgp-sha256;
 protocol="application/pgp-signature";
 boundary="------------nUPj1uNSfJc2zDo5700NPXPS"
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--------------nUPj1uNSfJc2zDo5700NPXPS
Content-Type: multipart/mixed; boundary="------------CCVp1KJZ6wUIf0SSvKkUjCE4";
 protected-headers="v1"
From: Juergen Gross <jgross@suse.com>
To: "Kirill A. Shutemov" <kirill@shutemov.name>
Cc: linux-kernel@vger.kernel.org, x86@kernel.org,
 Thomas Gleixner <tglx@linutronix.de>, Ingo Molnar <mingo@redhat.com>,
 Borislav Petkov <bp@alien8.de>, Dave Hansen <dave.hansen@linux.intel.com>,
 "H. Peter Anvin" <hpa@zytor.com>, Andy Lutomirski <luto@kernel.org>,
 Peter Zijlstra <peterz@infradead.org>
Message-ID: <f4e9b9bb-6906-084c-4b9e-144b2abb024b@suse.com>
Subject: Re: [PATCH v5 13/16] x86: decouple PAT and MTRR handling
References: <20221102074713.21493-1-jgross@suse.com>
 <20221102074713.21493-14-jgross@suse.com>
 <20221201162639.omlr5ff55go7uhlf@box.shutemov.name>
 <6d642051-31d8-81d5-f379-568360c5cb60@suse.com>
 <20221201235753.ybfc7gkgj7hlfkru@box.shutemov.name>
 <eded3906-0720-a300-50c7-f8dad61c32c0@suse.com>
 <20221202132701.ymcp7a2yv3st33so@box.shutemov.name>
In-Reply-To: <20221202132701.ymcp7a2yv3st33so@box.shutemov.name>

--------------CCVp1KJZ6wUIf0SSvKkUjCE4
Content-Type: multipart/mixed; boundary="------------JZdpnW6b0Ot5vsKXw2u8LDOf"

--------------JZdpnW6b0Ot5vsKXw2u8LDOf
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: base64

T24gMDIuMTIuMjIgMTQ6MjcsIEtpcmlsbCBBLiBTaHV0ZW1vdiB3cm90ZToNCj4gT24gRnJp
LCBEZWMgMDIsIDIwMjIgYXQgMDY6NTY6NDdBTSArMDEwMCwgSnVlcmdlbiBHcm9zcyB3cm90
ZToNCj4+IE9uIDAyLjEyLjIyIDAwOjU3LCBLaXJpbGwgQS4gU2h1dGVtb3Ygd3JvdGU6DQo+
Pj4gT24gVGh1LCBEZWMgMDEsIDIwMjIgYXQgMDU6MzM6MjhQTSArMDEwMCwgSnVlcmdlbiBH
cm9zcyB3cm90ZToNCj4+Pj4gT24gMDEuMTIuMjIgMTc6MjYsIEtpcmlsbCBBLiBTaHV0ZW1v
diB3cm90ZToNCj4+Pj4+IE9uIFdlZCwgTm92IDAyLCAyMDIyIGF0IDA4OjQ3OjEwQU0gKzAx
MDAsIEp1ZXJnZW4gR3Jvc3Mgd3JvdGU6DQo+Pj4+Pj4gVG9kYXkgUEFUIGlzIHVzYWJsZSBv
bmx5IHdpdGggTVRSUiBiZWluZyBhY3RpdmUsIHdpdGggc29tZSBuYXN0eSB0d2Vha3MNCj4+
Pj4+PiB0byBtYWtlIFBBVCB1c2FibGUgd2hlbiBydW5uaW5nIGFzIFhlbiBQViBndWVzdCwg
d2hpY2ggZG9lc24ndCBzdXBwb3J0DQo+Pj4+Pj4gTVRSUi4NCj4+Pj4+Pg0KPj4+Pj4+IFRo
ZSByZWFzb24gZm9yIHRoaXMgY291cGxpbmcgaXMsIHRoYXQgYm90aCwgUEFUIE1TUiBjaGFu
Z2VzIGFuZCBNVFJSDQo+Pj4+Pj4gY2hhbmdlcywgcmVxdWlyZSBhIHNpbWlsYXIgc2VxdWVu
Y2UgYW5kIHNvIGZ1bGwgUEFUIHN1cHBvcnQgd2FzIGFkZGVkDQo+Pj4+Pj4gdXNpbmcgdGhl
IGFscmVhZHkgYXZhaWxhYmxlIE1UUlIgaGFuZGxpbmcuDQo+Pj4+Pj4NCj4+Pj4+PiBYZW4g
UFYgUEFUIGhhbmRsaW5nIGNhbiB3b3JrIHdpdGhvdXQgTVRSUiwgYXMgaXQganVzdCBuZWVk
cyB0byBjb25zdW1lDQo+Pj4+Pj4gdGhlIFBBVCBNU1Igc2V0dGluZyBkb25lIGJ5IHRoZSBo
eXBlcnZpc29yIHdpdGhvdXQgdGhlIGFiaWxpdHkgYW5kIG5lZWQNCj4+Pj4+PiB0byBjaGFu
Z2UgaXQuIFRoaXMgaW4gdHVybiBoYXMgcmVzdWx0ZWQgaW4gYSBjb252b2x1dGVkIGluaXRp
YWxpemF0aW9uDQo+Pj4+Pj4gc2VxdWVuY2UgYW5kIHdyb25nIGRlY2lzaW9ucyByZWdhcmRp
bmcgY2FjaGUgbW9kZSBhdmFpbGFiaWxpdHkgZHVlIHRvDQo+Pj4+Pj4gbWlzZ3VpZGluZyBQ
QVQgYXZhaWxhYmlsaXR5IGZsYWdzLg0KPj4+Pj4+DQo+Pj4+Pj4gRml4IGFsbCBvZiB0aGF0
IGJ5IGFsbG93aW5nIHRvIHVzZSBQQVQgd2l0aG91dCBNVFJSIGFuZCBieSByZXdvcmtpbmcN
Cj4+Pj4+PiB0aGUgY3VycmVudCBQQVQgaW5pdGlhbGl6YXRpb24gc2VxdWVuY2UgdG8gbWF0
Y2ggYmV0dGVyIHdpdGggdGhlIG5ld2x5DQo+Pj4+Pj4gaW50cm9kdWNlZCBnZW5lcmljIGNh
Y2hlIGluaXRpYWxpemF0aW9uLg0KPj4+Pj4+DQo+Pj4+Pj4gVGhpcyByZW1vdmVzIHRoZSBu
ZWVkIG9mIHRoZSByZWNlbnRseSBhZGRlZCBwYXRfZm9yY2VfZGlzYWJsZWQgZmxhZywgc28N
Cj4+Pj4+PiByZW1vdmUgdGhlIHJlbW5hbnRzIG9mIHRoZSBwYXRjaCBhZGRpbmcgaXQuDQo+
Pj4+Pj4NCj4+Pj4+PiBTaWduZWQtb2ZmLWJ5OiBKdWVyZ2VuIEdyb3NzIDxqZ3Jvc3NAc3Vz
ZS5jb20+DQo+Pj4+Pg0KPj4+Pj4gVGhpcyBwYXRjaCBicmVha3MgYm9vdCBmb3IgVERYIGd1
ZXN0Lg0KPj4+Pj4NCj4+Pj4+IEtlcm5lbCBub3cgdHJpZXMgdG8gc2V0IENSMC5DRCB3aGlj
aCBpcyBmb3JiaWRkZW4gaW4gVERYIGd1ZXN0WzFdIGFuZA0KPj4+Pj4gY2F1c2VzICNWRToN
Cj4+Pj4+DQo+Pj4+PiAJdGR4OiBVbmV4cGVjdGVkICNWRTogMjgNCj4+Pj4+IAlWRSBmYXVs
dDogMDAwMCBbIzFdIFBSRUVNUFQgU01QIE5PUFRJDQo+Pj4+PiAJQ1BVOiAwIFBJRDogMCBD
b21tOiBzd2FwcGVyIE5vdCB0YWludGVkIDYuMS4wLXJjMS0wMDAxNS1nYWRmZTc1MTJlMWQw
ICMyNjQ2DQo+Pj4+PiAJSGFyZHdhcmUgbmFtZTogUUVNVSBTdGFuZGFyZCBQQyAoUTM1ICsg
SUNIOSwgMjAwOSksIEJJT1MgMC4wLjAgMDIvMDYvMjAxNQ0KPj4+Pj4gCVJJUDogMDAxMDpu
YXRpdmVfd3JpdGVfY3IwIChhcmNoL3g4Ni9rZXJuZWwvY3B1L2NvbW1vbi5jOjQyNykNCj4+
Pj4+IAkgQ2FsbCBUcmFjZToNCj4+Pj4+IAkgIDxUQVNLPg0KPj4+Pj4gCSA/IGNhY2hlX2Rp
c2FibGUgKGFyY2gveDg2L2luY2x1ZGUvYXNtL2NwdWZlYXR1cmUuaDoxNzMgYXJjaC94ODYv
a2VybmVsL2NwdS9jYWNoZWluZm8uYzoxMDg1KQ0KPj4+Pj4gCSA/IGNhY2hlX2NwdV9pbml0
IChhcmNoL3g4Ni9rZXJuZWwvY3B1L2NhY2hlaW5mby5jOjExMzIgKGRpc2NyaW1pbmF0b3Ig
MykpDQo+Pj4+PiAJID8gc2V0dXBfYXJjaCAoYXJjaC94ODYva2VybmVsL3NldHVwLmM6MTA3
OSkNCj4+Pj4+IAkgPyBzdGFydF9rZXJuZWwgKGluaXQvbWFpbi5jOjI3OSAoZGlzY3JpbWlu
YXRvciAzKSBpbml0L21haW4uYzo0NzcgKGRpc2NyaW1pbmF0b3IgMykgaW5pdC9tYWluLmM6
OTYwIChkaXNjcmltaW5hdG9yIDMpKQ0KPj4+Pj4gCSA/IGxvYWRfdWNvZGVfYnNwIChhcmNo
L3g4Ni9rZXJuZWwvY3B1L21pY3JvY29kZS9jb3JlLmM6MTU1KQ0KPj4+Pj4gCSA/IHNlY29u
ZGFyeV9zdGFydHVwXzY0X25vX3ZlcmlmeSAoYXJjaC94ODYva2VybmVsL2hlYWRfNjQuUzoz
NTgpDQo+Pj4+PiAJICA8L1RBU0s+DQo+Pj4+Pg0KPj4+Pj4gQW55IHN1Z2dlc3Rpb24gaG93
IHRvIGZpeCBpdD8NCj4+Pj4+DQo+Pj4+PiBbMV0gU2VjdGlvbiAxMC42LjEuICJDUjAiLCBo
dHRwczovL2NkcmR2Mi5pbnRlbC5jb20vdjEvZGwvZ2V0Q29udGVudC83MzM1NjgNCj4+Pj4N
Cj4+Pj4gV2hhdCB3YXMgdGhlIHNvbHV0aW9uIGJlZm9yZT8NCj4+Pj4NCj4+Pj4gSSBndWVz
cyBNVFJSIHdhcyBkaXNhYmxlZCwgc28gdGhlcmUgd2FzIG5vIFBBVCwgdG9vPw0KPj4+DQo+
Pj4gUmlnaHQ6DQo+Pj4NCj4+PiBMaW51cycgdHJlZToNCj4+Pg0KPj4+IFsgICAgMC4wMDI1
ODldIGxhc3RfcGZuID0gMHg0ODAwMDAgbWF4X2FyY2hfcGZuID0gMHgxMDAwMDAwMDAwMA0K
Pj4+IFsgICAgMC4wMDM5NzZdIERpc2FibGVkDQo+Pj4gWyAgICAwLjAwNDQ1Ml0geDg2L1BB
VDogTVRSUnMgZGlzYWJsZWQsIHNraXBwaW5nIFBBVCBpbml0aWFsaXphdGlvbiB0b28uDQo+
Pj4gWyAgICAwLjAwNTg1Nl0gQ1BVIE1UUlJzIGFsbCBibGFuayAtIHZpcnR1YWxpemVkIHN5
c3RlbS4NCj4+PiBbICAgIDAuMDA2OTE1XSB4ODYvUEFUOiBDb25maWd1cmF0aW9uIFswLTdd
OiBXQiAgV1QgIFVDLSBVQyAgV0IgIFdUICBVQy0gVUMNCj4+Pg0KPj4+IHRpcC9tYXN0ZXI6
DQo+Pj4NCj4+PiBbICAgIDAuMDAzNDQzXSBsYXN0X3BmbiA9IDB4MjBiOGUgbWF4X2FyY2hf
cGZuID0gMHgxMDAwMDAwMDAwMA0KPj4+IFsgICAgMC4wMDUyMjBdIERpc2FibGVkDQo+Pj4g
WyAgICAwLjAwNTgxOF0geDg2L1BBVDogQ29uZmlndXJhdGlvbiBbMC03XTogV0IgIFdDICBV
Qy0gVUMgIFdCICBXUCAgVUMtIFdUDQo+Pj4gWyAgICAwLjAwNzc1Ml0gdGR4OiBVbmV4cGVj
dGVkICNWRTogMjgNCj4+Pg0KPj4+IFRoZSBkYW5nbGluZyAiRGlzYWJsZWQiIGNvbWVzIG10
cnJfYnBfaW5pdCgpLg0KPj4+DQo+Pj4NCj4+Pj4gSWYgdGhpcyBpcyB0aGUgY2FzZSwgeW91
IGNhbiBnbyB0aGUgc2FtZSByb3V0ZSBhcyBYZW4gUFYgZ3Vlc3RzIGRvLg0KPj4+DQo+Pj4g
QW55IHJlYXNvbiBYODZfRkVBVFVSRV9IWVBFUlZJU09SIGNhbm5vdCBiZSB1c2VkIGluc3Rl
YWQgb2YNCj4+PiBYODZfRkVBVFVSRV9YRU5QViB0aGVyZT8NCj4+Pg0KPj4+IERvIHdlIGhh
dmUgYW55IHZpcnR1YWxpemVkIHBsYXRmb3JtIHRoYXQgc3VwcG9ydHMgaXQ/DQo+Pg0KPj4g
WWVzLCBvZiBjb3Vyc2UuIEFueSBoYXJkd2FyZSB2aXJ0dWFsaXplZCBndWVzdCBzaG91bGQg
YmUgYWJsZSB0byB1c2UgaXQsDQo+PiBvYnZpb3VzbHkgVERYIGd1ZXN0cyBhcmUgdGhlIGZp
cnN0IG9uZXMgbm90IGJlaW5nIGFibGUgdG8gZG8gc28uDQo+Pg0KPj4gQW5kIGFib3ZlIGRt
ZXNnIHNuaXBwbGV0cyBhcmUgc2hvd2luZyByYXRoZXIgbmljZWx5IHRoYXQgbm90IGRpc2Fi
bGluZw0KPj4gUEFUIGNvbXBsZXRlbHkgc2hvdWxkIGJlIGEgYmVuZWZpdCBmb3IgVERYIGd1
ZXN0cywgYXMgYWxsIGNhY2hpbmcgbW9kZXMNCj4+IHdvdWxkIGJlIHVzYWJsZSAodGhlIFBB
VCBNU1Igc2VlbXMgdG8gYmUgaW5pdGlhbGl6ZWQgcXVpdGUgZmluZSkuDQo+Pg0KPj4gSW5z
dGVhZCBvZiBYODZfRkVBVFVSRV9YRU5QViB3ZSBjb3VsZCBpbnRyb2R1Y2Ugc29tZXRoaW5n
IGxpa2UNCj4+IFg4Nl9GRUFUVVJFX1BBVF9SRUFET05MWSwgd2hpY2ggY291bGQgYmUgc2V0
IGZvciBYZW4gUFYgZ3Vlc3RzIGFuZCBmb3INCj4+IFREWCBndWVzdHMuDQo+IA0KPiBUZWNo
bmljYWxseSwgdGhlIE1TUiBpcyB3cml0YWJsZSBvbiBURFguIEJ1dCBpdCBzZWVtcyB0aGVy
ZSdzIG5vIHdheSB0bw0KPiBwcm9wZXJseSBjaGFuZ2UgaXQsIGZvbGxvd2luZyB0aGUgcHJv
dG9jb2wgb2YgY2hhbmdpbmcgb24gTVAgc3lzdGVtcy4NCg0KV2h5IG5vdD8gSSBkb24ndCBz
ZWUgd2h5IGl0IGlzIHBvc3NpYmxlIGluIGEgbm9uLVREWCBzeXN0ZW0sIGJ1dCBub3Qgd2l0
aGluDQphIFREWCBndWVzdC4NCg0KPiBBbHRob3VnaCwgSSBkb24ndCBxdWl0ZSBmb2xsb3cg
d2hhdCByb2xlIGNhY2hlIGRpc2FibGluZyBwbGF5aW5nIG9uIHN5c3RlbQ0KPiB3aXRoIHNl
bGYtc25vb3Agc3VwcG9ydC4gSG0/DQoNCkl0IGlzIHRoZSByZWNvbW1lbmRlZCB3YXkgdG8g
ZG8gaXQuIFNlZSBTRE0gVm9sLiAzIENoYXB0ZXIgMTEgKCJNZW1vcnkgQ2FjaGUNCkNvbnRy
b2wiKToNCg0KVGhlIG9wZXJhdGluZyBzeXN0ZW0gaXMgcmVzcG9uc2libGUgZm9yIGluc3Vy
aW5nIHRoYXQgY2hhbmdlcyB0byBhIFBBVCBlbnRyeQ0Kb2NjdXIgaW4gYSBtYW5uZXIgdGhh
dCBtYWludGFpbnMgdGhlIGNvbnNpc3RlbmN5IG9mIHRoZSBwcm9jZXNzb3IgY2FjaGVzIGFu
ZA0KdHJhbnNsYXRpb24gbG9va2FzaWRlIGJ1ZmZlcnMgKFRMQikuIFRoaXMgaXMgYWNjb21w
bGlzaGVkIGJ5IGZvbGxvd2luZyB0aGUNCnByb2NlZHVyZSBhcyBzcGVjaWZpZWQgaW4gU2Vj
dGlvbiAxMS4xMS44LCDigJxNVFJSIENvbnNpZGVyYXRpb25zIGluIE1QIFN5c3RlbXMsDQri
gJ1mb3IgY2hhbmdpbmcgdGhlIHZhbHVlIG9mIGFuIE1UUlIgaW4gYSBtdWx0aXBsZSBwcm9j
ZXNzb3Igc3lzdGVtLiBJdCByZXF1aXJlcw0KYSBzcGVjaWZpYyBzZXF1ZW5jZSBvZiBvcGVy
YXRpb25zIHRoYXQgaW5jbHVkZXMgZmx1c2hpbmcgdGhlIHByb2Nlc3NvcnMgY2FjaGVzDQph
bmQgVExCcy4NCg0KQW5kIHRoZSBzZXF1ZW5jZSBmb3IgdGhlIE1UUlJzIGlzOg0KDQoxLiBC
cm9hZGNhc3QgdG8gYWxsIHByb2Nlc3NvcnMgdG8gZXhlY3V0ZSB0aGUgZm9sbG93aW5nIGNv
ZGUgc2VxdWVuY2UuDQoyLiBEaXNhYmxlIGludGVycnVwdHMuDQozLiBXYWl0IGZvciBhbGwg
cHJvY2Vzc29ycyB0byByZWFjaCB0aGlzIHBvaW50Lg0KNC4gRW50ZXIgdGhlIG5vLWZpbGwg
Y2FjaGUgbW9kZS4gKFNldCB0aGUgQ0QgZmxhZyBpbiBjb250cm9sIHJlZ2lzdGVyIENSMCB0
byAxDQogICAgYW5kIHRoZSBOVyBmbGFnIHRvIDAuKQ0KNS4gRmx1c2ggYWxsIGNhY2hlcyB1
c2luZyB0aGUgV0JJTlZEIGluc3RydWN0aW9ucy4gTm90ZSBvbiBhIHByb2Nlc3NvciB0aGF0
DQogICAgc3VwcG9ydHMgc2VsZi1zbm9vcGluZywgQ1BVSUQgZmVhdHVyZSBmbGFnIGJpdCAy
NywgdGhpcyBzdGVwIGlzIHVubmVjZXNzYXJ5Lg0KNi4gSWYgdGhlIFBHRSBmbGFnIGlzIHNl
dCBpbiBjb250cm9sIHJlZ2lzdGVyIENSNCwgZmx1c2ggYWxsIFRMQnMgYnkgY2xlYXJpbmcN
CiAgICB0aGF0IGZsYWcuDQo3LiBJZiB0aGUgUEdFIGZsYWcgaXMgY2xlYXIgaW4gY29udHJv
bCByZWdpc3RlciBDUjQsIGZsdXNoIGFsbCBUTEJzIGJ5IGV4ZWN1dGluZw0KICAgIGEgTU9W
IGZyb20gY29udHJvbCByZWdpc3RlciBDUjMgdG8gYW5vdGhlciByZWdpc3RlciBhbmQgdGhl
biBhIE1PViBmcm9tIHRoYXQNCiAgICByZWdpc3RlciBiYWNrIHRvIENSMy4NCjguIERpc2Fi
bGUgYWxsIHJhbmdlIHJlZ2lzdGVycyAoYnkgY2xlYXJpbmcgdGhlIEUgZmxhZyBpbiByZWdp
c3RlciBNVFJSZGVmVHlwZSkuDQogICAgSWYgb25seSB2YXJpYWJsZSByYW5nZXMgYXJlIGJl
aW5nIG1vZGlmaWVkLCBzb2Z0d2FyZSBtYXkgY2xlYXIgdGhlIHZhbGlkIGJpdHMNCiAgICBm
b3IgdGhlIGFmZmVjdGVkIHJlZ2lzdGVyIHBhaXJzIGluc3RlYWQuDQo5LiBVcGRhdGUgdGhl
IE1UUlJzLg0KMTAuIEVuYWJsZSBhbGwgcmFuZ2UgcmVnaXN0ZXJzIChieSBzZXR0aW5nIHRo
ZSBFIGZsYWcgaW4gcmVnaXN0ZXIgTVRSUmRlZlR5cGUpLg0KICAgICBJZiBvbmx5IHZhcmlh
YmxlLXJhbmdlIHJlZ2lzdGVycyB3ZXJlIG1vZGlmaWVkIGFuZCB0aGVpciBpbmRpdmlkdWFs
IHZhbGlkDQogICAgIGJpdHMgd2VyZSBjbGVhcmVkLCB0aGVuIHNldCB0aGUgdmFsaWQgYml0
cyBmb3IgdGhlIGFmZmVjdGVkIHJhbmdlcyBpbnN0ZWFkLg0KMTEuIEZsdXNoIGFsbCBjYWNo
ZXMgYW5kIGFsbCBUTEJzIGEgc2Vjb25kIHRpbWUuIChUaGUgVExCIGZsdXNoIGlzIHJlcXVp
cmVkIGZvcg0KICAgICBQZW50aXVtIDQsIEludGVsIFhlb24sIGFuZCBQNiBmYW1pbHkgcHJv
Y2Vzc29ycy4gRXhlY3V0aW5nIHRoZSBXQklOVkQNCiAgICAgaW5zdHJ1Y3Rpb24gaXMgbm90
IG5lZWRlZCB3aGVuIHVzaW5nIFBlbnRpdW0gNCwgSW50ZWwgWGVvbiwgYW5kIFA2IGZhbWls
eQ0KICAgICBwcm9jZXNzb3JzLCBidXQgaXQgbWF5IGJlIG5lZWRlZCBpbiBmdXR1cmUgc3lz
dGVtcy4pDQoxMi4gRW50ZXIgdGhlIG5vcm1hbCBjYWNoZSBtb2RlIHRvIHJlLWVuYWJsZSBj
YWNoaW5nLiAoU2V0IHRoZSBDRCBhbmQgTlcgZmxhZ3MNCiAgICAgaW4gY29udHJvbCByZWdp
c3RlciBDUjAgdG8gMC4pDQoxMy4gU2V0IFBHRSBmbGFnIGluIGNvbnRyb2wgcmVnaXN0ZXIg
Q1I0LCBpZiBjbGVhcmVkIGluIFN0ZXAgNiAoYWJvdmUpLg0KMTQuIFdhaXQgZm9yIGFsbCBw
cm9jZXNzb3JzIHRvIHJlYWNoIHRoaXMgcG9pbnQuDQoxNS4gRW5hYmxlIGludGVycnVwdHMu
DQoNClNvIGNhY2hlIGRpc2FibGluZyBpcyByZWNvbW1lbmRlZC4NCg0KDQpKdWVyZ2VuDQo=

--------------JZdpnW6b0Ot5vsKXw2u8LDOf
Content-Type: application/pgp-keys; name="OpenPGP_0xB0DE9DD628BF132F.asc"
Content-Disposition: attachment; filename="OpenPGP_0xB0DE9DD628BF132F.asc"
Content-Description: OpenPGP public key
Content-Transfer-Encoding: quoted-printable

-----BEGIN PGP PUBLIC KEY BLOCK-----

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
jR/i1DG86lem3iBDXzXsZDn8R38=3D
=3D2wuH
-----END PGP PUBLIC KEY BLOCK-----

--------------JZdpnW6b0Ot5vsKXw2u8LDOf--

--------------CCVp1KJZ6wUIf0SSvKkUjCE4--

--------------nUPj1uNSfJc2zDo5700NPXPS
Content-Type: application/pgp-signature; name="OpenPGP_signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="OpenPGP_signature"

-----BEGIN PGP SIGNATURE-----

wsB5BAABCAAjFiEEhRJncuj2BJSl0Jf3sN6d1ii/Ey8FAmOKAC4FAwAAAAAACgkQsN6d1ii/Ey8Y
kwf/avbjjfhvc0Yw72FwouLLPMVUuiUlIONeVtGjAg3396hZryxeTrGG5qteHG3xiCS6MhHBwrI2
HPFNw+EdDC4PhxiilX4W5ohghAsPonRJsNYqOYn0FhAmHeVaxajVjBE882LrBRJmZe/Yh2OfytXr
f5DPoscV71D5F+JU2c3L4yGJLWjApDJ/89N5B5twbm1+QQMAHfRFH5uOo13BixKpvbU+LWR8/NiX
ymLDZDV27eyXyRsfDYpvZUA4Yc2UznpSUifH2/Wi6+hNzXst7IUFe/xyIirjeSYcsF8MeuHZiVFb
FcinK9k33myG+25cBiodocJSxMJ9LsZqkX4LL3keLw==
=sZKC
-----END PGP SIGNATURE-----

--------------nUPj1uNSfJc2zDo5700NPXPS--

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 11894C4321E
	for <linux-kernel@archiver.kernel.org>; Fri,  2 Dec 2022 13:55:22 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S233589AbiLBNzU (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Fri, 2 Dec 2022 08:55:20 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:55488 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S231929AbiLBNzO (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 2 Dec 2022 08:55:14 -0500
Received: from mail.skyhub.de (mail.skyhub.de [IPv6:2a01:4f8:190:11c2::b:1457])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 9C0E4B0A36
        for <linux-kernel@vger.kernel.org>; Fri,  2 Dec 2022 05:55:13 -0800 (PST)
Received: from zn.tnic (p200300ea9733e73a329c23fffea6a903.dip0.t-ipconnect.de [IPv6:2003:ea:9733:e73a:329c:23ff:fea6:a903])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.skyhub.de (SuperMail on ZX Spectrum 128k) with ESMTPSA id D4DA31EC0832;
        Fri,  2 Dec 2022 14:55:11 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=alien8.de; s=dkim;
        t=1669989311;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:content-type:content-type:
         content-transfer-encoding:in-reply-to:in-reply-to:  references:references;
        bh=TjKFn4vwGx5Waf76qIyOWDxn+nMaDMY+/Aq7LR5D9WE=;
        b=k6UCYIKQDF9aWWSgN7l3/xuYux+IkwgwpMn28NP/CG3B7KiesyDEKGkE1NVX/lXrrRIfX1
        C1YGNzes4DxOCry0IFXZrX38QjVO3nouS/4bkjfzY/Ucd7NSzXTBVEbZjW3KymvUzZCWtr
        Jo4zb5GzENBe4W3L8GFdlVS0X9X6fgQ=
Date:   Fri, 2 Dec 2022 14:55:08 +0100
From:   Borislav Petkov <bp@alien8.de>
To:     Juergen Gross <jgross@suse.com>
Cc:     "Kirill A. Shutemov" <kirill@shutemov.name>,
        linux-kernel@vger.kernel.org, x86@kernel.org,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>,
        Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>
Subject: Re: [PATCH v5 13/16] x86: decouple PAT and MTRR handling
Message-ID: <Y4oDvBHt7VZwnoGd@zn.tnic>
References: <20221102074713.21493-1-jgross@suse.com>
 <20221102074713.21493-14-jgross@suse.com>
 <20221201162639.omlr5ff55go7uhlf@box.shutemov.name>
 <6d642051-31d8-81d5-f379-568360c5cb60@suse.com>
 <20221201235753.ybfc7gkgj7hlfkru@box.shutemov.name>
 <eded3906-0720-a300-50c7-f8dad61c32c0@suse.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
In-Reply-To: <eded3906-0720-a300-50c7-f8dad61c32c0@suse.com>
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, Dec 02, 2022 at 06:56:47AM +0100, Juergen Gross wrote:
> Instead of X86_FEATURE_XENPV we could introduce something like
> X86_FEATURE_PAT_READONLY, which could be set for Xen PV guests and for
> TDX guests.

Until a third type comes which wants its pony to be pink and to dance.
:-\

Nah, we already have X86_FEATURE_TDX_GUEST - let's use that in
pat_bp_init() and exit there early and be done with it. This way it is
also self-documenting who can and cannot deal with that code.

Thx.

-- 
Regards/Gruss,
    Boris.

https://people.kernel.org/tglx/notes-about-netiquette

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 78503C4321E
	for <linux-kernel@archiver.kernel.org>; Fri,  2 Dec 2022 14:33:36 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S233651AbiLBOde (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Fri, 2 Dec 2022 09:33:34 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:34884 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S233549AbiLBOdX (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 2 Dec 2022 09:33:23 -0500
Received: from out4-smtp.messagingengine.com (out4-smtp.messagingengine.com [66.111.4.28])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 1255CD4F
        for <linux-kernel@vger.kernel.org>; Fri,  2 Dec 2022 06:33:21 -0800 (PST)
Received: from compute5.internal (compute5.nyi.internal [10.202.2.45])
        by mailout.nyi.internal (Postfix) with ESMTP id 67D495C0117;
        Fri,  2 Dec 2022 09:33:20 -0500 (EST)
Received: from mailfrontend1 ([10.202.2.162])
  by compute5.internal (MEProxy); Fri, 02 Dec 2022 09:33:20 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=shutemov.name;
         h=cc:cc:content-transfer-encoding:content-type:date:date:from
        :from:in-reply-to:in-reply-to:message-id:mime-version:references
        :reply-to:sender:subject:subject:to:to; s=fm3; t=1669991600; x=
        1670078000; bh=2z523A/B5cMV9WqCPYgweDb1Dp8SXwFClHP8kjid4hs=; b=V
        I2FyXemLDSaXJh+hWB+te9d/1b5JH8dZ4tIowJG0CTWhxOveVAvhpmRz6xpmLePo
        0jYmIjXy9BdJcYSVdIgheK5RhZihnkOc7vhc1LdePhN6DF0N6pa/P1xiL8Y+Wufj
        MhuV478rXcllbsH8n7bPvahYk/ip6g4UelhS9ifwZktCZQxFsF9JBv/qEsy801+k
        MTq4pnxxh6RjvRePQQd+9G28oVJVfpo1UfpDj2qAoyU70/F88wtdy8HlLJViTQqt
        EHi/3dwW8Q0UtJTD3KJwiThbfVa6y4qSXTtblowE7REnFVelsTZVrPpFTLe/mkh2
        +aTOeMaBH4w2kcIp1oA8Q==
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=
        messagingengine.com; h=cc:cc:content-transfer-encoding
        :content-type:date:date:feedback-id:feedback-id:from:from
        :in-reply-to:in-reply-to:message-id:mime-version:references
        :reply-to:sender:subject:subject:to:to:x-me-proxy:x-me-proxy
        :x-me-sender:x-me-sender:x-sasl-enc; s=fm1; t=1669991600; x=
        1670078000; bh=2z523A/B5cMV9WqCPYgweDb1Dp8SXwFClHP8kjid4hs=; b=d
        Hd7pU/KShEtqy1thSgVHV9u7KqRLuq6z/0udgsbOic4jTBYAAX9fxLWFNoq7caxH
        vOpaYuLhAkwJ4bbPBkDilg+pRm+cXl7d+Ygz4TG0IFyHUqD3DKFdXVABYunmaiOG
        Tn/QLiI0iA+nNHrRxjMWN3pgV8E+hp2D8cQ7fXaooGog2LwsLw0NZi5YjiY6l5R3
        +tKzGi+2qhYNZGrQMd4T1d2HZjtYeFeqNcOObBdnl+mPeL8ycdupmMZsLLIYEm8v
        OTW/VVv2a0xnGwh+kerOg7jvCHoeu3XVJVXURNra50z41OQaljRxXJ8ykjAjuaXr
        LfaCfW0Zjs8PMLml6HCtw==
X-ME-Sender: <xms:rwyKY2XrtQIKd5u43GbHamjPO-bBMq2G7ppIbeOzRLjpRkGRDbK4-A>
    <xme:rwyKYykUBHg5IAro54ixuaXTfCauQ38-i9OvROExuB4Z9DMrUgiQQJcYkkNOq9SMC
    Px8GFEdpIVExPkV7gA>
X-ME-Received: <xmr:rwyKY6bDBd_Ck1D2qERSI5gxz0A3XpasKq89QDg5JH20rM2Pv8Ov1fMqmpPtzK8tU3xY0g>
X-ME-Proxy-Cause: gggruggvucftvghtrhhoucdtuddrgedvhedrtdekgdegfecutefuodetggdotefrodftvf
    curfhrohhfihhlvgemucfhrghsthforghilhdpqfgfvfdpuffrtefokffrpgfnqfghnecu
    uegrihhlohhuthemuceftddtnecusecvtfgvtghiphhivghnthhsucdlqddutddtmdenuc
    fjughrpeffhffvvefukfhfgggtugfgjgesthektddttddtjeenucfhrhhomhepfdfmihhr
    ihhllhcutedrucfuhhhuthgvmhhovhdfuceokhhirhhilhhlsehshhhuthgvmhhovhdrnh
    grmhgvqeenucggtffrrghtthgvrhhnpeeiteekgfejuedtleetgedvkefhhedvgfefjefh
    veehkefgjefhtdekfeetfeefgfenucffohhmrghinhepihhnthgvlhdrtghomhenucevlh
    hushhtvghrufhiiigvpedtnecurfgrrhgrmhepmhgrihhlfhhrohhmpehkihhrihhllhes
    shhhuhhtvghmohhvrdhnrghmvg
X-ME-Proxy: <xmx:rwyKY9XdJrkLU7kKBvo7LGB1rlsmY-eUpo2DnN78tAmuAV6YdD11Lg>
    <xmx:rwyKYwmWeTMT--eGAMIJIhUqO_FsFGxO7ctnScPxlrfH2b4Hh4LQ4Q>
    <xmx:rwyKYyeUw8YUm3oGUbSqRXsuSoRpHnDQ1zYxLS1aGerWst6zWpF_WA>
    <xmx:sAyKY67h5MpoJn15Gw9kQ4mao6CLfsVHTrLZHq6ZGQPpGyCJcsP4Rw>
Feedback-ID: ie3994620:Fastmail
Received: by mail.messagingengine.com (Postfix) with ESMTPA; Fri,
 2 Dec 2022 09:33:19 -0500 (EST)
Received: by box.shutemov.name (Postfix, from userid 1000)
        id 0E01210975F; Fri,  2 Dec 2022 17:33:16 +0300 (+03)
Date:   Fri, 2 Dec 2022 17:33:16 +0300
From:   "Kirill A. Shutemov" <kirill@shutemov.name>
To:     Juergen Gross <jgross@suse.com>
Cc:     linux-kernel@vger.kernel.org, x86@kernel.org,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>,
        Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>
Subject: Re: [PATCH v5 13/16] x86: decouple PAT and MTRR handling
Message-ID: <20221202143316.mtjz6dghecshldk2@box.shutemov.name>
References: <20221102074713.21493-1-jgross@suse.com>
 <20221102074713.21493-14-jgross@suse.com>
 <20221201162639.omlr5ff55go7uhlf@box.shutemov.name>
 <6d642051-31d8-81d5-f379-568360c5cb60@suse.com>
 <20221201235753.ybfc7gkgj7hlfkru@box.shutemov.name>
 <eded3906-0720-a300-50c7-f8dad61c32c0@suse.com>
 <20221202132701.ymcp7a2yv3st33so@box.shutemov.name>
 <f4e9b9bb-6906-084c-4b9e-144b2abb024b@suse.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <f4e9b9bb-6906-084c-4b9e-144b2abb024b@suse.com>
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Fri, Dec 02, 2022 at 02:39:58PM +0100, Juergen Gross wrote:
> On 02.12.22 14:27, Kirill A. Shutemov wrote:
> > On Fri, Dec 02, 2022 at 06:56:47AM +0100, Juergen Gross wrote:
> > > On 02.12.22 00:57, Kirill A. Shutemov wrote:
> > > > On Thu, Dec 01, 2022 at 05:33:28PM +0100, Juergen Gross wrote:
> > > > > On 01.12.22 17:26, Kirill A. Shutemov wrote:
> > > > > > On Wed, Nov 02, 2022 at 08:47:10AM +0100, Juergen Gross wrote:
> > > > > > > Today PAT is usable only with MTRR being active, with some nasty tweaks
> > > > > > > to make PAT usable when running as Xen PV guest, which doesn't support
> > > > > > > MTRR.
> > > > > > > 
> > > > > > > The reason for this coupling is, that both, PAT MSR changes and MTRR
> > > > > > > changes, require a similar sequence and so full PAT support was added
> > > > > > > using the already available MTRR handling.
> > > > > > > 
> > > > > > > Xen PV PAT handling can work without MTRR, as it just needs to consume
> > > > > > > the PAT MSR setting done by the hypervisor without the ability and need
> > > > > > > to change it. This in turn has resulted in a convoluted initialization
> > > > > > > sequence and wrong decisions regarding cache mode availability due to
> > > > > > > misguiding PAT availability flags.
> > > > > > > 
> > > > > > > Fix all of that by allowing to use PAT without MTRR and by reworking
> > > > > > > the current PAT initialization sequence to match better with the newly
> > > > > > > introduced generic cache initialization.
> > > > > > > 
> > > > > > > This removes the need of the recently added pat_force_disabled flag, so
> > > > > > > remove the remnants of the patch adding it.
> > > > > > > 
> > > > > > > Signed-off-by: Juergen Gross <jgross@suse.com>
> > > > > > 
> > > > > > This patch breaks boot for TDX guest.
> > > > > > 
> > > > > > Kernel now tries to set CR0.CD which is forbidden in TDX guest[1] and
> > > > > > causes #VE:
> > > > > > 
> > > > > > 	tdx: Unexpected #VE: 28
> > > > > > 	VE fault: 0000 [#1] PREEMPT SMP NOPTI
> > > > > > 	CPU: 0 PID: 0 Comm: swapper Not tainted 6.1.0-rc1-00015-gadfe7512e1d0 #2646
> > > > > > 	Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 0.0.0 02/06/2015
> > > > > > 	RIP: 0010:native_write_cr0 (arch/x86/kernel/cpu/common.c:427)
> > > > > > 	 Call Trace:
> > > > > > 	  <TASK>
> > > > > > 	 ? cache_disable (arch/x86/include/asm/cpufeature.h:173 arch/x86/kernel/cpu/cacheinfo.c:1085)
> > > > > > 	 ? cache_cpu_init (arch/x86/kernel/cpu/cacheinfo.c:1132 (discriminator 3))
> > > > > > 	 ? setup_arch (arch/x86/kernel/setup.c:1079)
> > > > > > 	 ? start_kernel (init/main.c:279 (discriminator 3) init/main.c:477 (discriminator 3) init/main.c:960 (discriminator 3))
> > > > > > 	 ? load_ucode_bsp (arch/x86/kernel/cpu/microcode/core.c:155)
> > > > > > 	 ? secondary_startup_64_no_verify (arch/x86/kernel/head_64.S:358)
> > > > > > 	  </TASK>
> > > > > > 
> > > > > > Any suggestion how to fix it?
> > > > > > 
> > > > > > [1] Section 10.6.1. "CR0", https://cdrdv2.intel.com/v1/dl/getContent/733568
> > > > > 
> > > > > What was the solution before?
> > > > > 
> > > > > I guess MTRR was disabled, so there was no PAT, too?
> > > > 
> > > > Right:
> > > > 
> > > > Linus' tree:
> > > > 
> > > > [    0.002589] last_pfn = 0x480000 max_arch_pfn = 0x10000000000
> > > > [    0.003976] Disabled
> > > > [    0.004452] x86/PAT: MTRRs disabled, skipping PAT initialization too.
> > > > [    0.005856] CPU MTRRs all blank - virtualized system.
> > > > [    0.006915] x86/PAT: Configuration [0-7]: WB  WT  UC- UC  WB  WT  UC- UC
> > > > 
> > > > tip/master:
> > > > 
> > > > [    0.003443] last_pfn = 0x20b8e max_arch_pfn = 0x10000000000
> > > > [    0.005220] Disabled
> > > > [    0.005818] x86/PAT: Configuration [0-7]: WB  WC  UC- UC  WB  WP  UC- WT
> > > > [    0.007752] tdx: Unexpected #VE: 28
> > > > 
> > > > The dangling "Disabled" comes mtrr_bp_init().
> > > > 
> > > > 
> > > > > If this is the case, you can go the same route as Xen PV guests do.
> > > > 
> > > > Any reason X86_FEATURE_HYPERVISOR cannot be used instead of
> > > > X86_FEATURE_XENPV there?
> > > > 
> > > > Do we have any virtualized platform that supports it?
> > > 
> > > Yes, of course. Any hardware virtualized guest should be able to use it,
> > > obviously TDX guests are the first ones not being able to do so.
> > > 
> > > And above dmesg snipplets are showing rather nicely that not disabling
> > > PAT completely should be a benefit for TDX guests, as all caching modes
> > > would be usable (the PAT MSR seems to be initialized quite fine).
> > > 
> > > Instead of X86_FEATURE_XENPV we could introduce something like
> > > X86_FEATURE_PAT_READONLY, which could be set for Xen PV guests and for
> > > TDX guests.
> > 
> > Technically, the MSR is writable on TDX. But it seems there's no way to
> > properly change it, following the protocol of changing on MP systems.
> 
> Why not? I don't see why it is possible in a non-TDX system, but not within
> a TDX guest.

Because the protocol you described below requires setting CR0.CD which is
not allowed in TDX guest and causes #VE.

> > Although, I don't quite follow what role cache disabling playing on system
> > with self-snoop support. Hm?
> 
> It is the recommended way to do it. See SDM Vol. 3 Chapter 11 ("Memory Cache
> Control"):
> 
> The operating system is responsible for insuring that changes to a PAT entry
> occur in a manner that maintains the consistency of the processor caches and
> translation lookaside buffers (TLB). This is accomplished by following the
> procedure as specified in Section 11.11.8, “MTRR Considerations in MP Systems,
> ”for changing the value of an MTRR in a multiple processor system. It requires
> a specific sequence of operations that includes flushing the processors caches
> and TLBs.
> 
> And the sequence for the MTRRs is:
> 
> 1. Broadcast to all processors to execute the following code sequence.
> 2. Disable interrupts.
> 3. Wait for all processors to reach this point.
> 4. Enter the no-fill cache mode. (Set the CD flag in control register CR0 to 1
>    and the NW flag to 0.)
> 5. Flush all caches using the WBINVD instructions. Note on a processor that
>    supports self-snooping, CPUID feature flag bit 27, this step is unnecessary.
> 6. If the PGE flag is set in control register CR4, flush all TLBs by clearing
>    that flag.
> 7. If the PGE flag is clear in control register CR4, flush all TLBs by executing
>    a MOV from control register CR3 to another register and then a MOV from that
>    register back to CR3.
> 8. Disable all range registers (by clearing the E flag in register MTRRdefType).
>    If only variable ranges are being modified, software may clear the valid bits
>    for the affected register pairs instead.
> 9. Update the MTRRs.
> 10. Enable all range registers (by setting the E flag in register MTRRdefType).
>     If only variable-range registers were modified and their individual valid
>     bits were cleared, then set the valid bits for the affected ranges instead.
> 11. Flush all caches and all TLBs a second time. (The TLB flush is required for
>     Pentium 4, Intel Xeon, and P6 family processors. Executing the WBINVD
>     instruction is not needed when using Pentium 4, Intel Xeon, and P6 family
>     processors, but it may be needed in future systems.)
> 12. Enter the normal cache mode to re-enable caching. (Set the CD and NW flags
>     in control register CR0 to 0.)
> 13. Set PGE flag in control register CR4, if cleared in Step 6 (above).
> 14. Wait for all processors to reach this point.
> 15. Enable interrupts.
> 
> So cache disabling is recommended.

Yeah, I read that.

But the question is what kind of scenario cache disabling is actually
prevents if self-snoop is supported? In this case cache stays intact (no
WBINVD). The next time a cache line gets accessed with different caching
mode the old line gets snooped, right?

Would it be valid to avoid touching CR0.CD if X86_FEATURE_SELFSNOOP?

-- 
  Kiryl Shutsemau / Kirill A. Shutemov

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id AE3A1C4321E
	for <linux-kernel@archiver.kernel.org>; Fri,  2 Dec 2022 14:56:58 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S233622AbiLBO45 (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Fri, 2 Dec 2022 09:56:57 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:56206 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S233637AbiLBO4w (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Fri, 2 Dec 2022 09:56:52 -0500
Received: from smtp-out2.suse.de (smtp-out2.suse.de [IPv6:2001:67c:2178:6::1d])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 8591AD2D91
        for <linux-kernel@vger.kernel.org>; Fri,  2 Dec 2022 06:56:51 -0800 (PST)
Received: from imap1.suse-dmz.suse.de (imap1.suse-dmz.suse.de [192.168.254.73])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out2.suse.de (Postfix) with ESMTPS id 0C99E1FDB3;
        Fri,  2 Dec 2022 14:56:50 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1669993010; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references;
        bh=XBoUpP4HHw4c+t/+L8WwqyRNCxuiEZ2a4M3o0AVN0JA=;
        b=HXirF5aTu1NTr1KbFFbmXL3WMD+tjjDKc08puxeEkv5VY/fw97kHpuera30trMkRA/c0rS
        pD2lk/f5KoZAt0xXAQVQ49gMeuhy/2gGga9fH69Yf509HkEYxCbo8JHVIe9N4e3SIUxkXP
        hlfA6L+FvHzndPB2kTNDLuONVSvJxGI=
Received: from imap1.suse-dmz.suse.de (imap1.suse-dmz.suse.de [192.168.254.73])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap1.suse-dmz.suse.de (Postfix) with ESMTPS id AB322133DE;
        Fri,  2 Dec 2022 14:56:49 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap1.suse-dmz.suse.de with ESMTPSA
        id PFpMKDESimPOegAAGKfGzw
        (envelope-from <jgross@suse.com>); Fri, 02 Dec 2022 14:56:49 +0000
Message-ID: <d7000f26-2640-074e-10f2-c5232feaa9fd@suse.com>
Date:   Fri, 2 Dec 2022 15:56:49 +0100
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.5.0
Subject: Re: [PATCH v5 13/16] x86: decouple PAT and MTRR handling
Content-Language: en-US
To:     "Kirill A. Shutemov" <kirill@shutemov.name>
Cc:     linux-kernel@vger.kernel.org, x86@kernel.org,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>,
        Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>
References: <20221102074713.21493-1-jgross@suse.com>
 <20221102074713.21493-14-jgross@suse.com>
 <20221201162639.omlr5ff55go7uhlf@box.shutemov.name>
 <6d642051-31d8-81d5-f379-568360c5cb60@suse.com>
 <20221201235753.ybfc7gkgj7hlfkru@box.shutemov.name>
 <eded3906-0720-a300-50c7-f8dad61c32c0@suse.com>
 <20221202132701.ymcp7a2yv3st33so@box.shutemov.name>
 <f4e9b9bb-6906-084c-4b9e-144b2abb024b@suse.com>
 <20221202143316.mtjz6dghecshldk2@box.shutemov.name>
From:   Juergen Gross <jgross@suse.com>
In-Reply-To: <20221202143316.mtjz6dghecshldk2@box.shutemov.name>
Content-Type: multipart/signed; micalg=pgp-sha256;
 protocol="application/pgp-signature";
 boundary="------------mhiKl7IcBv0P1QrVefCJKhbs"
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--------------mhiKl7IcBv0P1QrVefCJKhbs
Content-Type: multipart/mixed; boundary="------------74ekdzUIKhtQAMS4rh000SD0";
 protected-headers="v1"
From: Juergen Gross <jgross@suse.com>
To: "Kirill A. Shutemov" <kirill@shutemov.name>
Cc: linux-kernel@vger.kernel.org, x86@kernel.org,
 Thomas Gleixner <tglx@linutronix.de>, Ingo Molnar <mingo@redhat.com>,
 Borislav Petkov <bp@alien8.de>, Dave Hansen <dave.hansen@linux.intel.com>,
 "H. Peter Anvin" <hpa@zytor.com>, Andy Lutomirski <luto@kernel.org>,
 Peter Zijlstra <peterz@infradead.org>
Message-ID: <d7000f26-2640-074e-10f2-c5232feaa9fd@suse.com>
Subject: Re: [PATCH v5 13/16] x86: decouple PAT and MTRR handling
References: <20221102074713.21493-1-jgross@suse.com>
 <20221102074713.21493-14-jgross@suse.com>
 <20221201162639.omlr5ff55go7uhlf@box.shutemov.name>
 <6d642051-31d8-81d5-f379-568360c5cb60@suse.com>
 <20221201235753.ybfc7gkgj7hlfkru@box.shutemov.name>
 <eded3906-0720-a300-50c7-f8dad61c32c0@suse.com>
 <20221202132701.ymcp7a2yv3st33so@box.shutemov.name>
 <f4e9b9bb-6906-084c-4b9e-144b2abb024b@suse.com>
 <20221202143316.mtjz6dghecshldk2@box.shutemov.name>
In-Reply-To: <20221202143316.mtjz6dghecshldk2@box.shutemov.name>

--------------74ekdzUIKhtQAMS4rh000SD0
Content-Type: multipart/mixed; boundary="------------Y0RcTrtcCX1XG7CicsZVyIjl"

--------------Y0RcTrtcCX1XG7CicsZVyIjl
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: base64

T24gMDIuMTIuMjIgMTU6MzMsIEtpcmlsbCBBLiBTaHV0ZW1vdiB3cm90ZToNCj4gT24gRnJp
LCBEZWMgMDIsIDIwMjIgYXQgMDI6Mzk6NThQTSArMDEwMCwgSnVlcmdlbiBHcm9zcyB3cm90
ZToNCj4+IE9uIDAyLjEyLjIyIDE0OjI3LCBLaXJpbGwgQS4gU2h1dGVtb3Ygd3JvdGU6DQo+
Pj4gT24gRnJpLCBEZWMgMDIsIDIwMjIgYXQgMDY6NTY6NDdBTSArMDEwMCwgSnVlcmdlbiBH
cm9zcyB3cm90ZToNCj4+Pj4gT24gMDIuMTIuMjIgMDA6NTcsIEtpcmlsbCBBLiBTaHV0ZW1v
diB3cm90ZToNCj4+Pj4+IE9uIFRodSwgRGVjIDAxLCAyMDIyIGF0IDA1OjMzOjI4UE0gKzAx
MDAsIEp1ZXJnZW4gR3Jvc3Mgd3JvdGU6DQo+Pj4+Pj4gT24gMDEuMTIuMjIgMTc6MjYsIEtp
cmlsbCBBLiBTaHV0ZW1vdiB3cm90ZToNCj4+Pj4+Pj4gT24gV2VkLCBOb3YgMDIsIDIwMjIg
YXQgMDg6NDc6MTBBTSArMDEwMCwgSnVlcmdlbiBHcm9zcyB3cm90ZToNCj4+Pj4+Pj4+IFRv
ZGF5IFBBVCBpcyB1c2FibGUgb25seSB3aXRoIE1UUlIgYmVpbmcgYWN0aXZlLCB3aXRoIHNv
bWUgbmFzdHkgdHdlYWtzDQo+Pj4+Pj4+PiB0byBtYWtlIFBBVCB1c2FibGUgd2hlbiBydW5u
aW5nIGFzIFhlbiBQViBndWVzdCwgd2hpY2ggZG9lc24ndCBzdXBwb3J0DQo+Pj4+Pj4+PiBN
VFJSLg0KPj4+Pj4+Pj4NCj4+Pj4+Pj4+IFRoZSByZWFzb24gZm9yIHRoaXMgY291cGxpbmcg
aXMsIHRoYXQgYm90aCwgUEFUIE1TUiBjaGFuZ2VzIGFuZCBNVFJSDQo+Pj4+Pj4+PiBjaGFu
Z2VzLCByZXF1aXJlIGEgc2ltaWxhciBzZXF1ZW5jZSBhbmQgc28gZnVsbCBQQVQgc3VwcG9y
dCB3YXMgYWRkZWQNCj4+Pj4+Pj4+IHVzaW5nIHRoZSBhbHJlYWR5IGF2YWlsYWJsZSBNVFJS
IGhhbmRsaW5nLg0KPj4+Pj4+Pj4NCj4+Pj4+Pj4+IFhlbiBQViBQQVQgaGFuZGxpbmcgY2Fu
IHdvcmsgd2l0aG91dCBNVFJSLCBhcyBpdCBqdXN0IG5lZWRzIHRvIGNvbnN1bWUNCj4+Pj4+
Pj4+IHRoZSBQQVQgTVNSIHNldHRpbmcgZG9uZSBieSB0aGUgaHlwZXJ2aXNvciB3aXRob3V0
IHRoZSBhYmlsaXR5IGFuZCBuZWVkDQo+Pj4+Pj4+PiB0byBjaGFuZ2UgaXQuIFRoaXMgaW4g
dHVybiBoYXMgcmVzdWx0ZWQgaW4gYSBjb252b2x1dGVkIGluaXRpYWxpemF0aW9uDQo+Pj4+
Pj4+PiBzZXF1ZW5jZSBhbmQgd3JvbmcgZGVjaXNpb25zIHJlZ2FyZGluZyBjYWNoZSBtb2Rl
IGF2YWlsYWJpbGl0eSBkdWUgdG8NCj4+Pj4+Pj4+IG1pc2d1aWRpbmcgUEFUIGF2YWlsYWJp
bGl0eSBmbGFncy4NCj4+Pj4+Pj4+DQo+Pj4+Pj4+PiBGaXggYWxsIG9mIHRoYXQgYnkgYWxs
b3dpbmcgdG8gdXNlIFBBVCB3aXRob3V0IE1UUlIgYW5kIGJ5IHJld29ya2luZw0KPj4+Pj4+
Pj4gdGhlIGN1cnJlbnQgUEFUIGluaXRpYWxpemF0aW9uIHNlcXVlbmNlIHRvIG1hdGNoIGJl
dHRlciB3aXRoIHRoZSBuZXdseQ0KPj4+Pj4+Pj4gaW50cm9kdWNlZCBnZW5lcmljIGNhY2hl
IGluaXRpYWxpemF0aW9uLg0KPj4+Pj4+Pj4NCj4+Pj4+Pj4+IFRoaXMgcmVtb3ZlcyB0aGUg
bmVlZCBvZiB0aGUgcmVjZW50bHkgYWRkZWQgcGF0X2ZvcmNlX2Rpc2FibGVkIGZsYWcsIHNv
DQo+Pj4+Pj4+PiByZW1vdmUgdGhlIHJlbW5hbnRzIG9mIHRoZSBwYXRjaCBhZGRpbmcgaXQu
DQo+Pj4+Pj4+Pg0KPj4+Pj4+Pj4gU2lnbmVkLW9mZi1ieTogSnVlcmdlbiBHcm9zcyA8amdy
b3NzQHN1c2UuY29tPg0KPj4+Pj4+Pg0KPj4+Pj4+PiBUaGlzIHBhdGNoIGJyZWFrcyBib290
IGZvciBURFggZ3Vlc3QuDQo+Pj4+Pj4+DQo+Pj4+Pj4+IEtlcm5lbCBub3cgdHJpZXMgdG8g
c2V0IENSMC5DRCB3aGljaCBpcyBmb3JiaWRkZW4gaW4gVERYIGd1ZXN0WzFdIGFuZA0KPj4+
Pj4+PiBjYXVzZXMgI1ZFOg0KPj4+Pj4+Pg0KPj4+Pj4+PiAJdGR4OiBVbmV4cGVjdGVkICNW
RTogMjgNCj4+Pj4+Pj4gCVZFIGZhdWx0OiAwMDAwIFsjMV0gUFJFRU1QVCBTTVAgTk9QVEkN
Cj4+Pj4+Pj4gCUNQVTogMCBQSUQ6IDAgQ29tbTogc3dhcHBlciBOb3QgdGFpbnRlZCA2LjEu
MC1yYzEtMDAwMTUtZ2FkZmU3NTEyZTFkMCAjMjY0Ng0KPj4+Pj4+PiAJSGFyZHdhcmUgbmFt
ZTogUUVNVSBTdGFuZGFyZCBQQyAoUTM1ICsgSUNIOSwgMjAwOSksIEJJT1MgMC4wLjAgMDIv
MDYvMjAxNQ0KPj4+Pj4+PiAJUklQOiAwMDEwOm5hdGl2ZV93cml0ZV9jcjAgKGFyY2gveDg2
L2tlcm5lbC9jcHUvY29tbW9uLmM6NDI3KQ0KPj4+Pj4+PiAJIENhbGwgVHJhY2U6DQo+Pj4+
Pj4+IAkgIDxUQVNLPg0KPj4+Pj4+PiAJID8gY2FjaGVfZGlzYWJsZSAoYXJjaC94ODYvaW5j
bHVkZS9hc20vY3B1ZmVhdHVyZS5oOjE3MyBhcmNoL3g4Ni9rZXJuZWwvY3B1L2NhY2hlaW5m
by5jOjEwODUpDQo+Pj4+Pj4+IAkgPyBjYWNoZV9jcHVfaW5pdCAoYXJjaC94ODYva2VybmVs
L2NwdS9jYWNoZWluZm8uYzoxMTMyIChkaXNjcmltaW5hdG9yIDMpKQ0KPj4+Pj4+PiAJID8g
c2V0dXBfYXJjaCAoYXJjaC94ODYva2VybmVsL3NldHVwLmM6MTA3OSkNCj4+Pj4+Pj4gCSA/
IHN0YXJ0X2tlcm5lbCAoaW5pdC9tYWluLmM6Mjc5IChkaXNjcmltaW5hdG9yIDMpIGluaXQv
bWFpbi5jOjQ3NyAoZGlzY3JpbWluYXRvciAzKSBpbml0L21haW4uYzo5NjAgKGRpc2NyaW1p
bmF0b3IgMykpDQo+Pj4+Pj4+IAkgPyBsb2FkX3Vjb2RlX2JzcCAoYXJjaC94ODYva2VybmVs
L2NwdS9taWNyb2NvZGUvY29yZS5jOjE1NSkNCj4+Pj4+Pj4gCSA/IHNlY29uZGFyeV9zdGFy
dHVwXzY0X25vX3ZlcmlmeSAoYXJjaC94ODYva2VybmVsL2hlYWRfNjQuUzozNTgpDQo+Pj4+
Pj4+IAkgIDwvVEFTSz4NCj4+Pj4+Pj4NCj4+Pj4+Pj4gQW55IHN1Z2dlc3Rpb24gaG93IHRv
IGZpeCBpdD8NCj4+Pj4+Pj4NCj4+Pj4+Pj4gWzFdIFNlY3Rpb24gMTAuNi4xLiAiQ1IwIiwg
aHR0cHM6Ly9jZHJkdjIuaW50ZWwuY29tL3YxL2RsL2dldENvbnRlbnQvNzMzNTY4DQo+Pj4+
Pj4NCj4+Pj4+PiBXaGF0IHdhcyB0aGUgc29sdXRpb24gYmVmb3JlPw0KPj4+Pj4+DQo+Pj4+
Pj4gSSBndWVzcyBNVFJSIHdhcyBkaXNhYmxlZCwgc28gdGhlcmUgd2FzIG5vIFBBVCwgdG9v
Pw0KPj4+Pj4NCj4+Pj4+IFJpZ2h0Og0KPj4+Pj4NCj4+Pj4+IExpbnVzJyB0cmVlOg0KPj4+
Pj4NCj4+Pj4+IFsgICAgMC4wMDI1ODldIGxhc3RfcGZuID0gMHg0ODAwMDAgbWF4X2FyY2hf
cGZuID0gMHgxMDAwMDAwMDAwMA0KPj4+Pj4gWyAgICAwLjAwMzk3Nl0gRGlzYWJsZWQNCj4+
Pj4+IFsgICAgMC4wMDQ0NTJdIHg4Ni9QQVQ6IE1UUlJzIGRpc2FibGVkLCBza2lwcGluZyBQ
QVQgaW5pdGlhbGl6YXRpb24gdG9vLg0KPj4+Pj4gWyAgICAwLjAwNTg1Nl0gQ1BVIE1UUlJz
IGFsbCBibGFuayAtIHZpcnR1YWxpemVkIHN5c3RlbS4NCj4+Pj4+IFsgICAgMC4wMDY5MTVd
IHg4Ni9QQVQ6IENvbmZpZ3VyYXRpb24gWzAtN106IFdCICBXVCAgVUMtIFVDICBXQiAgV1Qg
IFVDLSBVQw0KPj4+Pj4NCj4+Pj4+IHRpcC9tYXN0ZXI6DQo+Pj4+Pg0KPj4+Pj4gWyAgICAw
LjAwMzQ0M10gbGFzdF9wZm4gPSAweDIwYjhlIG1heF9hcmNoX3BmbiA9IDB4MTAwMDAwMDAw
MDANCj4+Pj4+IFsgICAgMC4wMDUyMjBdIERpc2FibGVkDQo+Pj4+PiBbICAgIDAuMDA1ODE4
XSB4ODYvUEFUOiBDb25maWd1cmF0aW9uIFswLTddOiBXQiAgV0MgIFVDLSBVQyAgV0IgIFdQ
ICBVQy0gV1QNCj4+Pj4+IFsgICAgMC4wMDc3NTJdIHRkeDogVW5leHBlY3RlZCAjVkU6IDI4
DQo+Pj4+Pg0KPj4+Pj4gVGhlIGRhbmdsaW5nICJEaXNhYmxlZCIgY29tZXMgbXRycl9icF9p
bml0KCkuDQo+Pj4+Pg0KPj4+Pj4NCj4+Pj4+PiBJZiB0aGlzIGlzIHRoZSBjYXNlLCB5b3Ug
Y2FuIGdvIHRoZSBzYW1lIHJvdXRlIGFzIFhlbiBQViBndWVzdHMgZG8uDQo+Pj4+Pg0KPj4+
Pj4gQW55IHJlYXNvbiBYODZfRkVBVFVSRV9IWVBFUlZJU09SIGNhbm5vdCBiZSB1c2VkIGlu
c3RlYWQgb2YNCj4+Pj4+IFg4Nl9GRUFUVVJFX1hFTlBWIHRoZXJlPw0KPj4+Pj4NCj4+Pj4+
IERvIHdlIGhhdmUgYW55IHZpcnR1YWxpemVkIHBsYXRmb3JtIHRoYXQgc3VwcG9ydHMgaXQ/
DQo+Pj4+DQo+Pj4+IFllcywgb2YgY291cnNlLiBBbnkgaGFyZHdhcmUgdmlydHVhbGl6ZWQg
Z3Vlc3Qgc2hvdWxkIGJlIGFibGUgdG8gdXNlIGl0LA0KPj4+PiBvYnZpb3VzbHkgVERYIGd1
ZXN0cyBhcmUgdGhlIGZpcnN0IG9uZXMgbm90IGJlaW5nIGFibGUgdG8gZG8gc28uDQo+Pj4+
DQo+Pj4+IEFuZCBhYm92ZSBkbWVzZyBzbmlwcGxldHMgYXJlIHNob3dpbmcgcmF0aGVyIG5p
Y2VseSB0aGF0IG5vdCBkaXNhYmxpbmcNCj4+Pj4gUEFUIGNvbXBsZXRlbHkgc2hvdWxkIGJl
IGEgYmVuZWZpdCBmb3IgVERYIGd1ZXN0cywgYXMgYWxsIGNhY2hpbmcgbW9kZXMNCj4+Pj4g
d291bGQgYmUgdXNhYmxlICh0aGUgUEFUIE1TUiBzZWVtcyB0byBiZSBpbml0aWFsaXplZCBx
dWl0ZSBmaW5lKS4NCj4+Pj4NCj4+Pj4gSW5zdGVhZCBvZiBYODZfRkVBVFVSRV9YRU5QViB3
ZSBjb3VsZCBpbnRyb2R1Y2Ugc29tZXRoaW5nIGxpa2UNCj4+Pj4gWDg2X0ZFQVRVUkVfUEFU
X1JFQURPTkxZLCB3aGljaCBjb3VsZCBiZSBzZXQgZm9yIFhlbiBQViBndWVzdHMgYW5kIGZv
cg0KPj4+PiBURFggZ3Vlc3RzLg0KPj4+DQo+Pj4gVGVjaG5pY2FsbHksIHRoZSBNU1IgaXMg
d3JpdGFibGUgb24gVERYLiBCdXQgaXQgc2VlbXMgdGhlcmUncyBubyB3YXkgdG8NCj4+PiBw
cm9wZXJseSBjaGFuZ2UgaXQsIGZvbGxvd2luZyB0aGUgcHJvdG9jb2wgb2YgY2hhbmdpbmcg
b24gTVAgc3lzdGVtcy4NCj4+DQo+PiBXaHkgbm90PyBJIGRvbid0IHNlZSB3aHkgaXQgaXMg
cG9zc2libGUgaW4gYSBub24tVERYIHN5c3RlbSwgYnV0IG5vdCB3aXRoaW4NCj4+IGEgVERY
IGd1ZXN0Lg0KPiANCj4gQmVjYXVzZSB0aGUgcHJvdG9jb2wgeW91IGRlc2NyaWJlZCBiZWxv
dyByZXF1aXJlcyBzZXR0aW5nIENSMC5DRCB3aGljaCBpcw0KPiBub3QgYWxsb3dlZCBpbiBU
RFggZ3Vlc3QgYW5kIGNhdXNlcyAjVkUuDQoNCkhtbSwgeWVzLCBzZWVtcyB0byBiZSBhIHZh
bGlkIHJlYXNvbi4gOi0pDQoNCj4gDQo+Pj4gQWx0aG91Z2gsIEkgZG9uJ3QgcXVpdGUgZm9s
bG93IHdoYXQgcm9sZSBjYWNoZSBkaXNhYmxpbmcgcGxheWluZyBvbiBzeXN0ZW0NCj4+PiB3
aXRoIHNlbGYtc25vb3Agc3VwcG9ydC4gSG0/DQo+Pg0KPj4gSXQgaXMgdGhlIHJlY29tbWVu
ZGVkIHdheSB0byBkbyBpdC4gU2VlIFNETSBWb2wuIDMgQ2hhcHRlciAxMSAoIk1lbW9yeSBD
YWNoZQ0KPj4gQ29udHJvbCIpOg0KPj4NCj4+IFRoZSBvcGVyYXRpbmcgc3lzdGVtIGlzIHJl
c3BvbnNpYmxlIGZvciBpbnN1cmluZyB0aGF0IGNoYW5nZXMgdG8gYSBQQVQgZW50cnkNCj4+
IG9jY3VyIGluIGEgbWFubmVyIHRoYXQgbWFpbnRhaW5zIHRoZSBjb25zaXN0ZW5jeSBvZiB0
aGUgcHJvY2Vzc29yIGNhY2hlcyBhbmQNCj4+IHRyYW5zbGF0aW9uIGxvb2thc2lkZSBidWZm
ZXJzIChUTEIpLiBUaGlzIGlzIGFjY29tcGxpc2hlZCBieSBmb2xsb3dpbmcgdGhlDQo+PiBw
cm9jZWR1cmUgYXMgc3BlY2lmaWVkIGluIFNlY3Rpb24gMTEuMTEuOCwg4oCcTVRSUiBDb25z
aWRlcmF0aW9ucyBpbiBNUCBTeXN0ZW1zLA0KPj4g4oCdZm9yIGNoYW5naW5nIHRoZSB2YWx1
ZSBvZiBhbiBNVFJSIGluIGEgbXVsdGlwbGUgcHJvY2Vzc29yIHN5c3RlbS4gSXQgcmVxdWly
ZXMNCj4+IGEgc3BlY2lmaWMgc2VxdWVuY2Ugb2Ygb3BlcmF0aW9ucyB0aGF0IGluY2x1ZGVz
IGZsdXNoaW5nIHRoZSBwcm9jZXNzb3JzIGNhY2hlcw0KPj4gYW5kIFRMQnMuDQo+Pg0KPj4g
QW5kIHRoZSBzZXF1ZW5jZSBmb3IgdGhlIE1UUlJzIGlzOg0KPj4NCj4+IDEuIEJyb2FkY2Fz
dCB0byBhbGwgcHJvY2Vzc29ycyB0byBleGVjdXRlIHRoZSBmb2xsb3dpbmcgY29kZSBzZXF1
ZW5jZS4NCj4+IDIuIERpc2FibGUgaW50ZXJydXB0cy4NCj4+IDMuIFdhaXQgZm9yIGFsbCBw
cm9jZXNzb3JzIHRvIHJlYWNoIHRoaXMgcG9pbnQuDQo+PiA0LiBFbnRlciB0aGUgbm8tZmls
bCBjYWNoZSBtb2RlLiAoU2V0IHRoZSBDRCBmbGFnIGluIGNvbnRyb2wgcmVnaXN0ZXIgQ1Iw
IHRvIDENCj4+ICAgICBhbmQgdGhlIE5XIGZsYWcgdG8gMC4pDQo+PiA1LiBGbHVzaCBhbGwg
Y2FjaGVzIHVzaW5nIHRoZSBXQklOVkQgaW5zdHJ1Y3Rpb25zLiBOb3RlIG9uIGEgcHJvY2Vz
c29yIHRoYXQNCj4+ICAgICBzdXBwb3J0cyBzZWxmLXNub29waW5nLCBDUFVJRCBmZWF0dXJl
IGZsYWcgYml0IDI3LCB0aGlzIHN0ZXAgaXMgdW5uZWNlc3NhcnkuDQo+PiA2LiBJZiB0aGUg
UEdFIGZsYWcgaXMgc2V0IGluIGNvbnRyb2wgcmVnaXN0ZXIgQ1I0LCBmbHVzaCBhbGwgVExC
cyBieSBjbGVhcmluZw0KPj4gICAgIHRoYXQgZmxhZy4NCj4+IDcuIElmIHRoZSBQR0UgZmxh
ZyBpcyBjbGVhciBpbiBjb250cm9sIHJlZ2lzdGVyIENSNCwgZmx1c2ggYWxsIFRMQnMgYnkg
ZXhlY3V0aW5nDQo+PiAgICAgYSBNT1YgZnJvbSBjb250cm9sIHJlZ2lzdGVyIENSMyB0byBh
bm90aGVyIHJlZ2lzdGVyIGFuZCB0aGVuIGEgTU9WIGZyb20gdGhhdA0KPj4gICAgIHJlZ2lz
dGVyIGJhY2sgdG8gQ1IzLg0KPj4gOC4gRGlzYWJsZSBhbGwgcmFuZ2UgcmVnaXN0ZXJzIChi
eSBjbGVhcmluZyB0aGUgRSBmbGFnIGluIHJlZ2lzdGVyIE1UUlJkZWZUeXBlKS4NCj4+ICAg
ICBJZiBvbmx5IHZhcmlhYmxlIHJhbmdlcyBhcmUgYmVpbmcgbW9kaWZpZWQsIHNvZnR3YXJl
IG1heSBjbGVhciB0aGUgdmFsaWQgYml0cw0KPj4gICAgIGZvciB0aGUgYWZmZWN0ZWQgcmVn
aXN0ZXIgcGFpcnMgaW5zdGVhZC4NCj4+IDkuIFVwZGF0ZSB0aGUgTVRSUnMuDQo+PiAxMC4g
RW5hYmxlIGFsbCByYW5nZSByZWdpc3RlcnMgKGJ5IHNldHRpbmcgdGhlIEUgZmxhZyBpbiBy
ZWdpc3RlciBNVFJSZGVmVHlwZSkuDQo+PiAgICAgIElmIG9ubHkgdmFyaWFibGUtcmFuZ2Ug
cmVnaXN0ZXJzIHdlcmUgbW9kaWZpZWQgYW5kIHRoZWlyIGluZGl2aWR1YWwgdmFsaWQNCj4+
ICAgICAgYml0cyB3ZXJlIGNsZWFyZWQsIHRoZW4gc2V0IHRoZSB2YWxpZCBiaXRzIGZvciB0
aGUgYWZmZWN0ZWQgcmFuZ2VzIGluc3RlYWQuDQo+PiAxMS4gRmx1c2ggYWxsIGNhY2hlcyBh
bmQgYWxsIFRMQnMgYSBzZWNvbmQgdGltZS4gKFRoZSBUTEIgZmx1c2ggaXMgcmVxdWlyZWQg
Zm9yDQo+PiAgICAgIFBlbnRpdW0gNCwgSW50ZWwgWGVvbiwgYW5kIFA2IGZhbWlseSBwcm9j
ZXNzb3JzLiBFeGVjdXRpbmcgdGhlIFdCSU5WRA0KPj4gICAgICBpbnN0cnVjdGlvbiBpcyBu
b3QgbmVlZGVkIHdoZW4gdXNpbmcgUGVudGl1bSA0LCBJbnRlbCBYZW9uLCBhbmQgUDYgZmFt
aWx5DQo+PiAgICAgIHByb2Nlc3NvcnMsIGJ1dCBpdCBtYXkgYmUgbmVlZGVkIGluIGZ1dHVy
ZSBzeXN0ZW1zLikNCj4+IDEyLiBFbnRlciB0aGUgbm9ybWFsIGNhY2hlIG1vZGUgdG8gcmUt
ZW5hYmxlIGNhY2hpbmcuIChTZXQgdGhlIENEIGFuZCBOVyBmbGFncw0KPj4gICAgICBpbiBj
b250cm9sIHJlZ2lzdGVyIENSMCB0byAwLikNCj4+IDEzLiBTZXQgUEdFIGZsYWcgaW4gY29u
dHJvbCByZWdpc3RlciBDUjQsIGlmIGNsZWFyZWQgaW4gU3RlcCA2IChhYm92ZSkuDQo+PiAx
NC4gV2FpdCBmb3IgYWxsIHByb2Nlc3NvcnMgdG8gcmVhY2ggdGhpcyBwb2ludC4NCj4+IDE1
LiBFbmFibGUgaW50ZXJydXB0cy4NCj4+DQo+PiBTbyBjYWNoZSBkaXNhYmxpbmcgaXMgcmVj
b21tZW5kZWQuDQo+IA0KPiBZZWFoLCBJIHJlYWQgdGhhdC4NCj4gDQo+IEJ1dCB0aGUgcXVl
c3Rpb24gaXMgd2hhdCBraW5kIG9mIHNjZW5hcmlvIGNhY2hlIGRpc2FibGluZyBpcyBhY3R1
YWxseQ0KPiBwcmV2ZW50cyBpZiBzZWxmLXNub29wIGlzIHN1cHBvcnRlZD8gSW4gdGhpcyBj
YXNlIGNhY2hlIHN0YXlzIGludGFjdCAobm8NCj4gV0JJTlZEKS4gVGhlIG5leHQgdGltZSBh
IGNhY2hlIGxpbmUgZ2V0cyBhY2Nlc3NlZCB3aXRoIGRpZmZlcmVudCBjYWNoaW5nDQo+IG1v
ZGUgdGhlIG9sZCBsaW5lIGdldHMgc25vb3BlZCwgcmlnaHQ/DQo+IA0KPiBXb3VsZCBpdCBi
ZSB2YWxpZCB0byBhdm9pZCB0b3VjaGluZyBDUjAuQ0QgaWYgWDg2X0ZFQVRVUkVfU0VMRlNO
T09QPw0KPiANCg0KVGhhdCdzIGEgcXVlc3Rpb24gZm9yIHRoZSBJbnRlbCBhcmNoaXRlY3Rz
LCBJIGd1ZXNzLg0KDQpJJ2QganVzdCBhc2sgdGhlbSBob3cgdG8gc2V0dXAgUEFUIGluIFRE
WCBndWVzdHMuIEVpdGhlciB0aGV5IG5lZWQgdG8NCmNoYW5nZSB0aGUgcmVjb21tZW5kZWQg
c2V0dXAgc2VxdWVuY2UsIG9yIHRoZSBQQVQgc3VwcG9ydCBiaXQgbmVlZHMgdG8NCmJlIGNs
ZWFyZWQgSU1PLg0KDQoNCkp1ZXJnZW4NCg==
--------------Y0RcTrtcCX1XG7CicsZVyIjl
Content-Type: application/pgp-keys; name="OpenPGP_0xB0DE9DD628BF132F.asc"
Content-Disposition: attachment; filename="OpenPGP_0xB0DE9DD628BF132F.asc"
Content-Description: OpenPGP public key
Content-Transfer-Encoding: quoted-printable

-----BEGIN PGP PUBLIC KEY BLOCK-----

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
jR/i1DG86lem3iBDXzXsZDn8R38=3D
=3D2wuH
-----END PGP PUBLIC KEY BLOCK-----

--------------Y0RcTrtcCX1XG7CicsZVyIjl--

--------------74ekdzUIKhtQAMS4rh000SD0--

--------------mhiKl7IcBv0P1QrVefCJKhbs
Content-Type: application/pgp-signature; name="OpenPGP_signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="OpenPGP_signature"

-----BEGIN PGP SIGNATURE-----

wsB5BAABCAAjFiEEhRJncuj2BJSl0Jf3sN6d1ii/Ey8FAmOKEjEFAwAAAAAACgkQsN6d1ii/Ey9w
4gf/XYFTUMv2uOGUOM0HPAsUBxw0dEsvaVudgrCmnz74KGQQK6bNsy38E553+TCasNfooVkYoPIv
R/nKSrY8epCUmKSNfp/NIaU8kSIv2Og47sETfjPysnbchjgl74nb8okoNM36Rr8dhEtIaITC7mEu
lP1lHo0ITYLuUECr+BgDBV7uAk1tGpZkK+NElmvJOXoUklw/O/lK3liCjqkCm12HHQiJMsmeD5uH
/mWc6M2taAOtJBKhVnx2t5hSyStfL8E+DkajrbsyYBJGfpr/Z+a+lWVfLaEcf0hQYgLVg9BSA8Iq
/1WD+UPxfcgFvgaOOMc8KveWP6DK/VOZIDOh6SNwIQ==
=LNPa
-----END PGP SIGNATURE-----

--------------mhiKl7IcBv0P1QrVefCJKhbs--

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id 53F61C4321E
	for <linux-kernel@archiver.kernel.org>; Mon,  5 Dec 2022 07:40:14 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S231462AbiLEHkM (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Mon, 5 Dec 2022 02:40:12 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:39910 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S231453AbiLEHkK (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 5 Dec 2022 02:40:10 -0500
Received: from smtp-out1.suse.de (smtp-out1.suse.de [195.135.220.28])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 9AA09FAFD
        for <linux-kernel@vger.kernel.org>; Sun,  4 Dec 2022 23:40:08 -0800 (PST)
Received: from imap1.suse-dmz.suse.de (imap1.suse-dmz.suse.de [192.168.254.73])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by smtp-out1.suse.de (Postfix) with ESMTPS id 1A29D21B3E;
        Mon,  5 Dec 2022 07:40:07 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
        t=1670226007; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
         mime-version:mime-version:content-type:content-type:
         in-reply-to:in-reply-to:references:references;
        bh=D6Vf95su3VmrHCYkH/OlvY2CBKv1q8/+cyB1x34WCuU=;
        b=aLQCFyNF4IMydkQkgR5c/ngNnrXehxXPEigdNLJud+8SfCprlgHx+uAMC8/PRnXJtJw15U
        XjMLJySEfbpaXKWCW8pmb43+2skrPhR6RNL+NMlYPoWhcJLGkr6OFbOx0PfSM3Cmczi6d+
        FkreAtcYXznVTn8g6Ee7wwXVp1KbkS4=
Received: from imap1.suse-dmz.suse.de (imap1.suse-dmz.suse.de [192.168.254.73])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
        (No client certificate requested)
        by imap1.suse-dmz.suse.de (Postfix) with ESMTPS id B47F61348F;
        Mon,  5 Dec 2022 07:40:06 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
        by imap1.suse-dmz.suse.de with ESMTPSA
        id lzKYKlagjWNmKAAAGKfGzw
        (envelope-from <jgross@suse.com>); Mon, 05 Dec 2022 07:40:06 +0000
Message-ID: <cf7db285-deaf-8e3e-2b35-7cecbaff7d61@suse.com>
Date:   Mon, 5 Dec 2022 08:40:06 +0100
MIME-Version: 1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101
 Thunderbird/102.5.0
Subject: Re: [PATCH v5 13/16] x86: decouple PAT and MTRR handling
Content-Language: en-US
From:   Juergen Gross <jgross@suse.com>
To:     "Kirill A. Shutemov" <kirill@shutemov.name>
Cc:     linux-kernel@vger.kernel.org, x86@kernel.org,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>,
        Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>
References: <20221102074713.21493-1-jgross@suse.com>
 <20221102074713.21493-14-jgross@suse.com>
 <20221201162639.omlr5ff55go7uhlf@box.shutemov.name>
 <6d642051-31d8-81d5-f379-568360c5cb60@suse.com>
 <20221201235753.ybfc7gkgj7hlfkru@box.shutemov.name>
 <eded3906-0720-a300-50c7-f8dad61c32c0@suse.com>
 <20221202132701.ymcp7a2yv3st33so@box.shutemov.name>
 <f4e9b9bb-6906-084c-4b9e-144b2abb024b@suse.com>
 <20221202143316.mtjz6dghecshldk2@box.shutemov.name>
 <d7000f26-2640-074e-10f2-c5232feaa9fd@suse.com>
In-Reply-To: <d7000f26-2640-074e-10f2-c5232feaa9fd@suse.com>
Content-Type: multipart/signed; micalg=pgp-sha256;
 protocol="application/pgp-signature";
 boundary="------------FFsnj7hIV1XStGP65ZkDO2st"
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--------------FFsnj7hIV1XStGP65ZkDO2st
Content-Type: multipart/mixed; boundary="------------hMom9wf9Vg0Oix5OdnPOWhAc";
 protected-headers="v1"
From: Juergen Gross <jgross@suse.com>
To: "Kirill A. Shutemov" <kirill@shutemov.name>
Cc: linux-kernel@vger.kernel.org, x86@kernel.org,
 Thomas Gleixner <tglx@linutronix.de>, Ingo Molnar <mingo@redhat.com>,
 Borislav Petkov <bp@alien8.de>, Dave Hansen <dave.hansen@linux.intel.com>,
 "H. Peter Anvin" <hpa@zytor.com>, Andy Lutomirski <luto@kernel.org>,
 Peter Zijlstra <peterz@infradead.org>
Message-ID: <cf7db285-deaf-8e3e-2b35-7cecbaff7d61@suse.com>
Subject: Re: [PATCH v5 13/16] x86: decouple PAT and MTRR handling
References: <20221102074713.21493-1-jgross@suse.com>
 <20221102074713.21493-14-jgross@suse.com>
 <20221201162639.omlr5ff55go7uhlf@box.shutemov.name>
 <6d642051-31d8-81d5-f379-568360c5cb60@suse.com>
 <20221201235753.ybfc7gkgj7hlfkru@box.shutemov.name>
 <eded3906-0720-a300-50c7-f8dad61c32c0@suse.com>
 <20221202132701.ymcp7a2yv3st33so@box.shutemov.name>
 <f4e9b9bb-6906-084c-4b9e-144b2abb024b@suse.com>
 <20221202143316.mtjz6dghecshldk2@box.shutemov.name>
 <d7000f26-2640-074e-10f2-c5232feaa9fd@suse.com>
In-Reply-To: <d7000f26-2640-074e-10f2-c5232feaa9fd@suse.com>

--------------hMom9wf9Vg0Oix5OdnPOWhAc
Content-Type: multipart/mixed; boundary="------------YjfqT6cBFixHgJ94aO9qNzeG"

--------------YjfqT6cBFixHgJ94aO9qNzeG
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: base64

T24gMDIuMTIuMjIgMTU6NTYsIEp1ZXJnZW4gR3Jvc3Mgd3JvdGU6DQo+IE9uIDAyLjEyLjIy
IDE1OjMzLCBLaXJpbGwgQS4gU2h1dGVtb3Ygd3JvdGU6DQo+PiBPbiBGcmksIERlYyAwMiwg
MjAyMiBhdCAwMjozOTo1OFBNICswMTAwLCBKdWVyZ2VuIEdyb3NzIHdyb3RlOg0KPj4+IE9u
IDAyLjEyLjIyIDE0OjI3LCBLaXJpbGwgQS4gU2h1dGVtb3Ygd3JvdGU6DQo+Pj4+IE9uIEZy
aSwgRGVjIDAyLCAyMDIyIGF0IDA2OjU2OjQ3QU0gKzAxMDAsIEp1ZXJnZW4gR3Jvc3Mgd3Jv
dGU6DQo+Pj4+PiBPbiAwMi4xMi4yMiAwMDo1NywgS2lyaWxsIEEuIFNodXRlbW92IHdyb3Rl
Og0KPj4+Pj4+IE9uIFRodSwgRGVjIDAxLCAyMDIyIGF0IDA1OjMzOjI4UE0gKzAxMDAsIEp1
ZXJnZW4gR3Jvc3Mgd3JvdGU6DQo+Pj4+Pj4+IE9uIDAxLjEyLjIyIDE3OjI2LCBLaXJpbGwg
QS4gU2h1dGVtb3Ygd3JvdGU6DQo+Pj4+Pj4+PiBPbiBXZWQsIE5vdiAwMiwgMjAyMiBhdCAw
ODo0NzoxMEFNICswMTAwLCBKdWVyZ2VuIEdyb3NzIHdyb3RlOg0KPj4+Pj4+Pj4+IFRvZGF5
IFBBVCBpcyB1c2FibGUgb25seSB3aXRoIE1UUlIgYmVpbmcgYWN0aXZlLCB3aXRoIHNvbWUg
bmFzdHkgdHdlYWtzDQo+Pj4+Pj4+Pj4gdG8gbWFrZSBQQVQgdXNhYmxlIHdoZW4gcnVubmlu
ZyBhcyBYZW4gUFYgZ3Vlc3QsIHdoaWNoIGRvZXNuJ3Qgc3VwcG9ydA0KPj4+Pj4+Pj4+IE1U
UlIuDQo+Pj4+Pj4+Pj4NCj4+Pj4+Pj4+PiBUaGUgcmVhc29uIGZvciB0aGlzIGNvdXBsaW5n
IGlzLCB0aGF0IGJvdGgsIFBBVCBNU1IgY2hhbmdlcyBhbmQgTVRSUg0KPj4+Pj4+Pj4+IGNo
YW5nZXMsIHJlcXVpcmUgYSBzaW1pbGFyIHNlcXVlbmNlIGFuZCBzbyBmdWxsIFBBVCBzdXBw
b3J0IHdhcyBhZGRlZA0KPj4+Pj4+Pj4+IHVzaW5nIHRoZSBhbHJlYWR5IGF2YWlsYWJsZSBN
VFJSIGhhbmRsaW5nLg0KPj4+Pj4+Pj4+DQo+Pj4+Pj4+Pj4gWGVuIFBWIFBBVCBoYW5kbGlu
ZyBjYW4gd29yayB3aXRob3V0IE1UUlIsIGFzIGl0IGp1c3QgbmVlZHMgdG8gY29uc3VtZQ0K
Pj4+Pj4+Pj4+IHRoZSBQQVQgTVNSIHNldHRpbmcgZG9uZSBieSB0aGUgaHlwZXJ2aXNvciB3
aXRob3V0IHRoZSBhYmlsaXR5IGFuZCBuZWVkDQo+Pj4+Pj4+Pj4gdG8gY2hhbmdlIGl0LiBU
aGlzIGluIHR1cm4gaGFzIHJlc3VsdGVkIGluIGEgY29udm9sdXRlZCBpbml0aWFsaXphdGlv
bg0KPj4+Pj4+Pj4+IHNlcXVlbmNlIGFuZCB3cm9uZyBkZWNpc2lvbnMgcmVnYXJkaW5nIGNh
Y2hlIG1vZGUgYXZhaWxhYmlsaXR5IGR1ZSB0bw0KPj4+Pj4+Pj4+IG1pc2d1aWRpbmcgUEFU
IGF2YWlsYWJpbGl0eSBmbGFncy4NCj4+Pj4+Pj4+Pg0KPj4+Pj4+Pj4+IEZpeCBhbGwgb2Yg
dGhhdCBieSBhbGxvd2luZyB0byB1c2UgUEFUIHdpdGhvdXQgTVRSUiBhbmQgYnkgcmV3b3Jr
aW5nDQo+Pj4+Pj4+Pj4gdGhlIGN1cnJlbnQgUEFUIGluaXRpYWxpemF0aW9uIHNlcXVlbmNl
IHRvIG1hdGNoIGJldHRlciB3aXRoIHRoZSBuZXdseQ0KPj4+Pj4+Pj4+IGludHJvZHVjZWQg
Z2VuZXJpYyBjYWNoZSBpbml0aWFsaXphdGlvbi4NCj4+Pj4+Pj4+Pg0KPj4+Pj4+Pj4+IFRo
aXMgcmVtb3ZlcyB0aGUgbmVlZCBvZiB0aGUgcmVjZW50bHkgYWRkZWQgcGF0X2ZvcmNlX2Rp
c2FibGVkIGZsYWcsIHNvDQo+Pj4+Pj4+Pj4gcmVtb3ZlIHRoZSByZW1uYW50cyBvZiB0aGUg
cGF0Y2ggYWRkaW5nIGl0Lg0KPj4+Pj4+Pj4+DQo+Pj4+Pj4+Pj4gU2lnbmVkLW9mZi1ieTog
SnVlcmdlbiBHcm9zcyA8amdyb3NzQHN1c2UuY29tPg0KPj4+Pj4+Pj4NCj4+Pj4+Pj4+IFRo
aXMgcGF0Y2ggYnJlYWtzIGJvb3QgZm9yIFREWCBndWVzdC4NCj4+Pj4+Pj4+DQo+Pj4+Pj4+
PiBLZXJuZWwgbm93IHRyaWVzIHRvIHNldCBDUjAuQ0Qgd2hpY2ggaXMgZm9yYmlkZGVuIGlu
IFREWCBndWVzdFsxXSBhbmQNCj4+Pj4+Pj4+IGNhdXNlcyAjVkU6DQo+Pj4+Pj4+Pg0KPj4+
Pj4+Pj4gwqDCoMKgwqB0ZHg6IFVuZXhwZWN0ZWQgI1ZFOiAyOA0KPj4+Pj4+Pj4gwqDCoMKg
wqBWRSBmYXVsdDogMDAwMCBbIzFdIFBSRUVNUFQgU01QIE5PUFRJDQo+Pj4+Pj4+PiDCoMKg
wqDCoENQVTogMCBQSUQ6IDAgQ29tbTogc3dhcHBlciBOb3QgdGFpbnRlZCANCj4+Pj4+Pj4+
IDYuMS4wLXJjMS0wMDAxNS1nYWRmZTc1MTJlMWQwICMyNjQ2DQo+Pj4+Pj4+PiDCoMKgwqDC
oEhhcmR3YXJlIG5hbWU6IFFFTVUgU3RhbmRhcmQgUEMgKFEzNSArIElDSDksIDIwMDkpLCBC
SU9TIDAuMC4wIA0KPj4+Pj4+Pj4gMDIvMDYvMjAxNQ0KPj4+Pj4+Pj4gwqDCoMKgwqBSSVA6
IDAwMTA6bmF0aXZlX3dyaXRlX2NyMCAoYXJjaC94ODYva2VybmVsL2NwdS9jb21tb24uYzo0
MjcpDQo+Pj4+Pj4+PiDCoMKgwqDCoCBDYWxsIFRyYWNlOg0KPj4+Pj4+Pj4gwqDCoMKgwqDC
oCA8VEFTSz4NCj4+Pj4+Pj4+IMKgwqDCoMKgID8gY2FjaGVfZGlzYWJsZSAoYXJjaC94ODYv
aW5jbHVkZS9hc20vY3B1ZmVhdHVyZS5oOjE3MyANCj4+Pj4+Pj4+IGFyY2gveDg2L2tlcm5l
bC9jcHUvY2FjaGVpbmZvLmM6MTA4NSkNCj4+Pj4+Pj4+IMKgwqDCoMKgID8gY2FjaGVfY3B1
X2luaXQgKGFyY2gveDg2L2tlcm5lbC9jcHUvY2FjaGVpbmZvLmM6MTEzMiANCj4+Pj4+Pj4+
IChkaXNjcmltaW5hdG9yIDMpKQ0KPj4+Pj4+Pj4gwqDCoMKgwqAgPyBzZXR1cF9hcmNoIChh
cmNoL3g4Ni9rZXJuZWwvc2V0dXAuYzoxMDc5KQ0KPj4+Pj4+Pj4gwqDCoMKgwqAgPyBzdGFy
dF9rZXJuZWwgKGluaXQvbWFpbi5jOjI3OSAoZGlzY3JpbWluYXRvciAzKSBpbml0L21haW4u
Yzo0NzcgDQo+Pj4+Pj4+PiAoZGlzY3JpbWluYXRvciAzKSBpbml0L21haW4uYzo5NjAgKGRp
c2NyaW1pbmF0b3IgMykpDQo+Pj4+Pj4+PiDCoMKgwqDCoCA/IGxvYWRfdWNvZGVfYnNwIChh
cmNoL3g4Ni9rZXJuZWwvY3B1L21pY3JvY29kZS9jb3JlLmM6MTU1KQ0KPj4+Pj4+Pj4gwqDC
oMKgwqAgPyBzZWNvbmRhcnlfc3RhcnR1cF82NF9ub192ZXJpZnkgKGFyY2gveDg2L2tlcm5l
bC9oZWFkXzY0LlM6MzU4KQ0KPj4+Pj4+Pj4gwqDCoMKgwqDCoCA8L1RBU0s+DQo+Pj4+Pj4+
Pg0KPj4+Pj4+Pj4gQW55IHN1Z2dlc3Rpb24gaG93IHRvIGZpeCBpdD8NCj4+Pj4+Pj4+DQo+
Pj4+Pj4+PiBbMV0gU2VjdGlvbiAxMC42LjEuICJDUjAiLCBodHRwczovL2NkcmR2Mi5pbnRl
bC5jb20vdjEvZGwvZ2V0Q29udGVudC83MzM1NjgNCj4+Pj4+Pj4NCj4+Pj4+Pj4gV2hhdCB3
YXMgdGhlIHNvbHV0aW9uIGJlZm9yZT8NCj4+Pj4+Pj4NCj4+Pj4+Pj4gSSBndWVzcyBNVFJS
IHdhcyBkaXNhYmxlZCwgc28gdGhlcmUgd2FzIG5vIFBBVCwgdG9vPw0KPj4+Pj4+DQo+Pj4+
Pj4gUmlnaHQ6DQo+Pj4+Pj4NCj4+Pj4+PiBMaW51cycgdHJlZToNCj4+Pj4+Pg0KPj4+Pj4+
IFvCoMKgwqAgMC4wMDI1ODldIGxhc3RfcGZuID0gMHg0ODAwMDAgbWF4X2FyY2hfcGZuID0g
MHgxMDAwMDAwMDAwMA0KPj4+Pj4+IFvCoMKgwqAgMC4wMDM5NzZdIERpc2FibGVkDQo+Pj4+
Pj4gW8KgwqDCoCAwLjAwNDQ1Ml0geDg2L1BBVDogTVRSUnMgZGlzYWJsZWQsIHNraXBwaW5n
IFBBVCBpbml0aWFsaXphdGlvbiB0b28uDQo+Pj4+Pj4gW8KgwqDCoCAwLjAwNTg1Nl0gQ1BV
IE1UUlJzIGFsbCBibGFuayAtIHZpcnR1YWxpemVkIHN5c3RlbS4NCj4+Pj4+PiBbwqDCoMKg
IDAuMDA2OTE1XSB4ODYvUEFUOiBDb25maWd1cmF0aW9uIFswLTddOiBXQsKgIFdUwqAgVUMt
IFVDwqAgV0LCoCBXVMKgIFVDLSBVQw0KPj4+Pj4+DQo+Pj4+Pj4gdGlwL21hc3RlcjoNCj4+
Pj4+Pg0KPj4+Pj4+IFvCoMKgwqAgMC4wMDM0NDNdIGxhc3RfcGZuID0gMHgyMGI4ZSBtYXhf
YXJjaF9wZm4gPSAweDEwMDAwMDAwMDAwDQo+Pj4+Pj4gW8KgwqDCoCAwLjAwNTIyMF0gRGlz
YWJsZWQNCj4+Pj4+PiBbwqDCoMKgIDAuMDA1ODE4XSB4ODYvUEFUOiBDb25maWd1cmF0aW9u
IFswLTddOiBXQsKgIFdDwqAgVUMtIFVDwqAgV0LCoCBXUMKgIFVDLSBXVA0KPj4+Pj4+IFvC
oMKgwqAgMC4wMDc3NTJdIHRkeDogVW5leHBlY3RlZCAjVkU6IDI4DQo+Pj4+Pj4NCj4+Pj4+
PiBUaGUgZGFuZ2xpbmcgIkRpc2FibGVkIiBjb21lcyBtdHJyX2JwX2luaXQoKS4NCj4+Pj4+
Pg0KPj4+Pj4+DQo+Pj4+Pj4+IElmIHRoaXMgaXMgdGhlIGNhc2UsIHlvdSBjYW4gZ28gdGhl
IHNhbWUgcm91dGUgYXMgWGVuIFBWIGd1ZXN0cyBkby4NCj4+Pj4+Pg0KPj4+Pj4+IEFueSBy
ZWFzb24gWDg2X0ZFQVRVUkVfSFlQRVJWSVNPUiBjYW5ub3QgYmUgdXNlZCBpbnN0ZWFkIG9m
DQo+Pj4+Pj4gWDg2X0ZFQVRVUkVfWEVOUFYgdGhlcmU/DQo+Pj4+Pj4NCj4+Pj4+PiBEbyB3
ZSBoYXZlIGFueSB2aXJ0dWFsaXplZCBwbGF0Zm9ybSB0aGF0IHN1cHBvcnRzIGl0Pw0KPj4+
Pj4NCj4+Pj4+IFllcywgb2YgY291cnNlLiBBbnkgaGFyZHdhcmUgdmlydHVhbGl6ZWQgZ3Vl
c3Qgc2hvdWxkIGJlIGFibGUgdG8gdXNlIGl0LA0KPj4+Pj4gb2J2aW91c2x5IFREWCBndWVz
dHMgYXJlIHRoZSBmaXJzdCBvbmVzIG5vdCBiZWluZyBhYmxlIHRvIGRvIHNvLg0KPj4+Pj4N
Cj4+Pj4+IEFuZCBhYm92ZSBkbWVzZyBzbmlwcGxldHMgYXJlIHNob3dpbmcgcmF0aGVyIG5p
Y2VseSB0aGF0IG5vdCBkaXNhYmxpbmcNCj4+Pj4+IFBBVCBjb21wbGV0ZWx5IHNob3VsZCBi
ZSBhIGJlbmVmaXQgZm9yIFREWCBndWVzdHMsIGFzIGFsbCBjYWNoaW5nIG1vZGVzDQo+Pj4+
PiB3b3VsZCBiZSB1c2FibGUgKHRoZSBQQVQgTVNSIHNlZW1zIHRvIGJlIGluaXRpYWxpemVk
IHF1aXRlIGZpbmUpLg0KPj4+Pj4NCj4+Pj4+IEluc3RlYWQgb2YgWDg2X0ZFQVRVUkVfWEVO
UFYgd2UgY291bGQgaW50cm9kdWNlIHNvbWV0aGluZyBsaWtlDQo+Pj4+PiBYODZfRkVBVFVS
RV9QQVRfUkVBRE9OTFksIHdoaWNoIGNvdWxkIGJlIHNldCBmb3IgWGVuIFBWIGd1ZXN0cyBh
bmQgZm9yDQo+Pj4+PiBURFggZ3Vlc3RzLg0KPj4+Pg0KPj4+PiBUZWNobmljYWxseSwgdGhl
IE1TUiBpcyB3cml0YWJsZSBvbiBURFguIEJ1dCBpdCBzZWVtcyB0aGVyZSdzIG5vIHdheSB0
bw0KPj4+PiBwcm9wZXJseSBjaGFuZ2UgaXQsIGZvbGxvd2luZyB0aGUgcHJvdG9jb2wgb2Yg
Y2hhbmdpbmcgb24gTVAgc3lzdGVtcy4NCj4+Pg0KPj4+IFdoeSBub3Q/IEkgZG9uJ3Qgc2Vl
IHdoeSBpdCBpcyBwb3NzaWJsZSBpbiBhIG5vbi1URFggc3lzdGVtLCBidXQgbm90IHdpdGhp
bg0KPj4+IGEgVERYIGd1ZXN0Lg0KPj4NCj4+IEJlY2F1c2UgdGhlIHByb3RvY29sIHlvdSBk
ZXNjcmliZWQgYmVsb3cgcmVxdWlyZXMgc2V0dGluZyBDUjAuQ0Qgd2hpY2ggaXMNCj4+IG5v
dCBhbGxvd2VkIGluIFREWCBndWVzdCBhbmQgY2F1c2VzICNWRS4NCj4gDQo+IEhtbSwgeWVz
LCBzZWVtcyB0byBiZSBhIHZhbGlkIHJlYXNvbi4gOi0pDQo+IA0KPj4NCj4+Pj4gQWx0aG91
Z2gsIEkgZG9uJ3QgcXVpdGUgZm9sbG93IHdoYXQgcm9sZSBjYWNoZSBkaXNhYmxpbmcgcGxh
eWluZyBvbiBzeXN0ZW0NCj4+Pj4gd2l0aCBzZWxmLXNub29wIHN1cHBvcnQuIEhtPw0KPj4+
DQo+Pj4gSXQgaXMgdGhlIHJlY29tbWVuZGVkIHdheSB0byBkbyBpdC4gU2VlIFNETSBWb2wu
IDMgQ2hhcHRlciAxMSAoIk1lbW9yeSBDYWNoZQ0KPj4+IENvbnRyb2wiKToNCj4+Pg0KPj4+
IFRoZSBvcGVyYXRpbmcgc3lzdGVtIGlzIHJlc3BvbnNpYmxlIGZvciBpbnN1cmluZyB0aGF0
IGNoYW5nZXMgdG8gYSBQQVQgZW50cnkNCj4+PiBvY2N1ciBpbiBhIG1hbm5lciB0aGF0IG1h
aW50YWlucyB0aGUgY29uc2lzdGVuY3kgb2YgdGhlIHByb2Nlc3NvciBjYWNoZXMgYW5kDQo+
Pj4gdHJhbnNsYXRpb24gbG9va2FzaWRlIGJ1ZmZlcnMgKFRMQikuIFRoaXMgaXMgYWNjb21w
bGlzaGVkIGJ5IGZvbGxvd2luZyB0aGUNCj4+PiBwcm9jZWR1cmUgYXMgc3BlY2lmaWVkIGlu
IFNlY3Rpb24gMTEuMTEuOCwg4oCcTVRSUiBDb25zaWRlcmF0aW9ucyBpbiBNUCBTeXN0ZW1z
LA0KPj4+IOKAnWZvciBjaGFuZ2luZyB0aGUgdmFsdWUgb2YgYW4gTVRSUiBpbiBhIG11bHRp
cGxlIHByb2Nlc3NvciBzeXN0ZW0uIEl0IHJlcXVpcmVzDQo+Pj4gYSBzcGVjaWZpYyBzZXF1
ZW5jZSBvZiBvcGVyYXRpb25zIHRoYXQgaW5jbHVkZXMgZmx1c2hpbmcgdGhlIHByb2Nlc3Nv
cnMgY2FjaGVzDQo+Pj4gYW5kIFRMQnMuDQo+Pj4NCj4+PiBBbmQgdGhlIHNlcXVlbmNlIGZv
ciB0aGUgTVRSUnMgaXM6DQo+Pj4NCj4+PiAxLiBCcm9hZGNhc3QgdG8gYWxsIHByb2Nlc3Nv
cnMgdG8gZXhlY3V0ZSB0aGUgZm9sbG93aW5nIGNvZGUgc2VxdWVuY2UuDQo+Pj4gMi4gRGlz
YWJsZSBpbnRlcnJ1cHRzLg0KPj4+IDMuIFdhaXQgZm9yIGFsbCBwcm9jZXNzb3JzIHRvIHJl
YWNoIHRoaXMgcG9pbnQuDQo+Pj4gNC4gRW50ZXIgdGhlIG5vLWZpbGwgY2FjaGUgbW9kZS4g
KFNldCB0aGUgQ0QgZmxhZyBpbiBjb250cm9sIHJlZ2lzdGVyIENSMCB0byAxDQo+Pj4gwqDC
oMKgIGFuZCB0aGUgTlcgZmxhZyB0byAwLikNCj4+PiA1LiBGbHVzaCBhbGwgY2FjaGVzIHVz
aW5nIHRoZSBXQklOVkQgaW5zdHJ1Y3Rpb25zLiBOb3RlIG9uIGEgcHJvY2Vzc29yIHRoYXQN
Cj4+PiDCoMKgwqAgc3VwcG9ydHMgc2VsZi1zbm9vcGluZywgQ1BVSUQgZmVhdHVyZSBmbGFn
IGJpdCAyNywgdGhpcyBzdGVwIGlzIHVubmVjZXNzYXJ5Lg0KPj4+IDYuIElmIHRoZSBQR0Ug
ZmxhZyBpcyBzZXQgaW4gY29udHJvbCByZWdpc3RlciBDUjQsIGZsdXNoIGFsbCBUTEJzIGJ5
IGNsZWFyaW5nDQo+Pj4gwqDCoMKgIHRoYXQgZmxhZy4NCj4+PiA3LiBJZiB0aGUgUEdFIGZs
YWcgaXMgY2xlYXIgaW4gY29udHJvbCByZWdpc3RlciBDUjQsIGZsdXNoIGFsbCBUTEJzIGJ5
IGV4ZWN1dGluZw0KPj4+IMKgwqDCoCBhIE1PViBmcm9tIGNvbnRyb2wgcmVnaXN0ZXIgQ1Iz
IHRvIGFub3RoZXIgcmVnaXN0ZXIgYW5kIHRoZW4gYSBNT1YgZnJvbSB0aGF0DQo+Pj4gwqDC
oMKgIHJlZ2lzdGVyIGJhY2sgdG8gQ1IzLg0KPj4+IDguIERpc2FibGUgYWxsIHJhbmdlIHJl
Z2lzdGVycyAoYnkgY2xlYXJpbmcgdGhlIEUgZmxhZyBpbiByZWdpc3RlciBNVFJSZGVmVHlw
ZSkuDQo+Pj4gwqDCoMKgIElmIG9ubHkgdmFyaWFibGUgcmFuZ2VzIGFyZSBiZWluZyBtb2Rp
ZmllZCwgc29mdHdhcmUgbWF5IGNsZWFyIHRoZSB2YWxpZCANCj4+PiBiaXRzDQo+Pj4gwqDC
oMKgIGZvciB0aGUgYWZmZWN0ZWQgcmVnaXN0ZXIgcGFpcnMgaW5zdGVhZC4NCj4+PiA5LiBV
cGRhdGUgdGhlIE1UUlJzLg0KPj4+IDEwLiBFbmFibGUgYWxsIHJhbmdlIHJlZ2lzdGVycyAo
Ynkgc2V0dGluZyB0aGUgRSBmbGFnIGluIHJlZ2lzdGVyIE1UUlJkZWZUeXBlKS4NCj4+PiDC
oMKgwqDCoCBJZiBvbmx5IHZhcmlhYmxlLXJhbmdlIHJlZ2lzdGVycyB3ZXJlIG1vZGlmaWVk
IGFuZCB0aGVpciBpbmRpdmlkdWFsIHZhbGlkDQo+Pj4gwqDCoMKgwqAgYml0cyB3ZXJlIGNs
ZWFyZWQsIHRoZW4gc2V0IHRoZSB2YWxpZCBiaXRzIGZvciB0aGUgYWZmZWN0ZWQgcmFuZ2Vz
IGluc3RlYWQuDQo+Pj4gMTEuIEZsdXNoIGFsbCBjYWNoZXMgYW5kIGFsbCBUTEJzIGEgc2Vj
b25kIHRpbWUuIChUaGUgVExCIGZsdXNoIGlzIHJlcXVpcmVkIGZvcg0KPj4+IMKgwqDCoMKg
IFBlbnRpdW0gNCwgSW50ZWwgWGVvbiwgYW5kIFA2IGZhbWlseSBwcm9jZXNzb3JzLiBFeGVj
dXRpbmcgdGhlIFdCSU5WRA0KPj4+IMKgwqDCoMKgIGluc3RydWN0aW9uIGlzIG5vdCBuZWVk
ZWQgd2hlbiB1c2luZyBQZW50aXVtIDQsIEludGVsIFhlb24sIGFuZCBQNiBmYW1pbHkNCj4+
PiDCoMKgwqDCoCBwcm9jZXNzb3JzLCBidXQgaXQgbWF5IGJlIG5lZWRlZCBpbiBmdXR1cmUg
c3lzdGVtcy4pDQo+Pj4gMTIuIEVudGVyIHRoZSBub3JtYWwgY2FjaGUgbW9kZSB0byByZS1l
bmFibGUgY2FjaGluZy4gKFNldCB0aGUgQ0QgYW5kIE5XIGZsYWdzDQo+Pj4gwqDCoMKgwqAg
aW4gY29udHJvbCByZWdpc3RlciBDUjAgdG8gMC4pDQo+Pj4gMTMuIFNldCBQR0UgZmxhZyBp
biBjb250cm9sIHJlZ2lzdGVyIENSNCwgaWYgY2xlYXJlZCBpbiBTdGVwIDYgKGFib3ZlKS4N
Cj4+PiAxNC4gV2FpdCBmb3IgYWxsIHByb2Nlc3NvcnMgdG8gcmVhY2ggdGhpcyBwb2ludC4N
Cj4+PiAxNS4gRW5hYmxlIGludGVycnVwdHMuDQo+Pj4NCj4+PiBTbyBjYWNoZSBkaXNhYmxp
bmcgaXMgcmVjb21tZW5kZWQuDQo+Pg0KPj4gWWVhaCwgSSByZWFkIHRoYXQuDQo+Pg0KPj4g
QnV0IHRoZSBxdWVzdGlvbiBpcyB3aGF0IGtpbmQgb2Ygc2NlbmFyaW8gY2FjaGUgZGlzYWJs
aW5nIGlzIGFjdHVhbGx5DQo+PiBwcmV2ZW50cyBpZiBzZWxmLXNub29wIGlzIHN1cHBvcnRl
ZD8gSW4gdGhpcyBjYXNlIGNhY2hlIHN0YXlzIGludGFjdCAobm8NCj4+IFdCSU5WRCkuIFRo
ZSBuZXh0IHRpbWUgYSBjYWNoZSBsaW5lIGdldHMgYWNjZXNzZWQgd2l0aCBkaWZmZXJlbnQg
Y2FjaGluZw0KPj4gbW9kZSB0aGUgb2xkIGxpbmUgZ2V0cyBzbm9vcGVkLCByaWdodD8NCj4+
DQo+PiBXb3VsZCBpdCBiZSB2YWxpZCB0byBhdm9pZCB0b3VjaGluZyBDUjAuQ0QgaWYgWDg2
X0ZFQVRVUkVfU0VMRlNOT09QPw0KPj4NCj4gDQo+IFRoYXQncyBhIHF1ZXN0aW9uIGZvciB0
aGUgSW50ZWwgYXJjaGl0ZWN0cywgSSBndWVzcy4NCj4gDQo+IEknZCBqdXN0IGFzayB0aGVt
IGhvdyB0byBzZXR1cCBQQVQgaW4gVERYIGd1ZXN0cy4gRWl0aGVyIHRoZXkgbmVlZCB0bw0K
PiBjaGFuZ2UgdGhlIHJlY29tbWVuZGVkIHNldHVwIHNlcXVlbmNlLCBvciB0aGUgUEFUIHN1
cHBvcnQgYml0IG5lZWRzIHRvDQo+IGJlIGNsZWFyZWQgSU1PLg0KDQpJJ3ZlIGZvcndhcmRl
ZCB0aGUgcXVlc3Rpb24gdG8gSW50ZWwsIEJUVy4NCg0KQW5vdGhlciBxdWVzdGlvbiB0byB5
b3U6IHdoZXJlIGRvZXMgdGhlIGluaXRpYWwgUEFUIE1TUiB2YWx1ZSBjb21lIGZyb20/DQpJ
IGd1ZXNzIGZyb20gVUVGST8NCg0KDQpKdWVyZ2VuDQo=
--------------YjfqT6cBFixHgJ94aO9qNzeG
Content-Type: application/pgp-keys; name="OpenPGP_0xB0DE9DD628BF132F.asc"
Content-Disposition: attachment; filename="OpenPGP_0xB0DE9DD628BF132F.asc"
Content-Description: OpenPGP public key
Content-Transfer-Encoding: quoted-printable

-----BEGIN PGP PUBLIC KEY BLOCK-----

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
jR/i1DG86lem3iBDXzXsZDn8R38=3D
=3D2wuH
-----END PGP PUBLIC KEY BLOCK-----

--------------YjfqT6cBFixHgJ94aO9qNzeG--

--------------hMom9wf9Vg0Oix5OdnPOWhAc--

--------------FFsnj7hIV1XStGP65ZkDO2st
Content-Type: application/pgp-signature; name="OpenPGP_signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="OpenPGP_signature"

-----BEGIN PGP SIGNATURE-----

wsB5BAABCAAjFiEEhRJncuj2BJSl0Jf3sN6d1ii/Ey8FAmONoFYFAwAAAAAACgkQsN6d1ii/Ey99
ggf/fMtT9+uOLTT2g/5++DVWwy+JSUp19wfMYgXsq0lfF0+MuFSrSa1ARy7eFqjHoO0Yt3+nLXIY
wvENNeftW59tyCc2JkW56B+oFg91MzqZ4rRzm0/goY8+q6N5/v68x5CfnvAOgXGyetwvKfs3Wjk3
ATgP9KVPwP80+mKys22kOfzPd79okMcEZGBU3Or7JWAaDb0vTlTZVceLmn7rXv7J5etXi0lRgvgn
tJJmFcVPodiIw5WtQficAy/EeHgC1EhpfeiTMaTTcDr2Sby1YIfbWSXW0xWzs37fVsydQwSetH+h
4hwnIunvP3C9m8YykZiBGa/ixDR1Lzn7mEqLgZ5ReQ==
=meBv
-----END PGP SIGNATURE-----

--------------FFsnj7hIV1XStGP65ZkDO2st--

From mboxrd@z Thu Jan  1 00:00:00 1970
Return-Path: <linux-kernel-owner@kernel.org>
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
	aws-us-west-2-korg-lkml-1.web.codeaurora.org
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by smtp.lore.kernel.org (Postfix) with ESMTP id BBB3BC4321E
	for <linux-kernel@archiver.kernel.org>; Mon,  5 Dec 2022 12:21:38 +0000 (UTC)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S231757AbiLEMVh (ORCPT <rfc822;linux-kernel@archiver.kernel.org>);
        Mon, 5 Dec 2022 07:21:37 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:55632 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S231744AbiLEMVf (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 5 Dec 2022 07:21:35 -0500
Received: from wout4-smtp.messagingengine.com (wout4-smtp.messagingengine.com [64.147.123.20])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 9E7A8F5B8
        for <linux-kernel@vger.kernel.org>; Mon,  5 Dec 2022 04:21:33 -0800 (PST)
Received: from compute4.internal (compute4.nyi.internal [10.202.2.44])
        by mailout.west.internal (Postfix) with ESMTP id 8B01B320091F;
        Mon,  5 Dec 2022 07:21:30 -0500 (EST)
Received: from mailfrontend1 ([10.202.2.162])
  by compute4.internal (MEProxy); Mon, 05 Dec 2022 07:21:31 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=shutemov.name;
         h=cc:cc:content-type:date:date:from:from:in-reply-to
        :in-reply-to:message-id:mime-version:references:reply-to:sender
        :subject:subject:to:to; s=fm3; t=1670242890; x=1670329290; bh=8c
        0wk4OjXRa/QesbL2vsgHn8e80nbdEdde63Cqs79LU=; b=V00lIOL6pRsSMCtU95
        vKHxeJ4m9ufk9wwAspWvf1e3s6HrMeTbhsuyPc6OenXh52/DZ908dt0LANk8Vx0S
        rLL/MG16b64cOopmHEBwbZwf2fY4Crqhnv4G3mO4Dwaghlc6Nk32EpzscJS5nLzb
        LmDjElro2B1yCMpQYu6A8M8cnpWuHfixu1sI/L9Vw2MuimSj7k/HPQLDcuJJo1TQ
        6SJ45XSBha1WanrCd+qshB+b5VH/9HZvLfuPsOEkX2MblPXwlf4P+e1o0uIF52ev
        LA0KAkHX6o4Yi2DyTYUTztR2XyNkBMoyNIy7kZsqtk2/qOHQ/dMZxHFoEUVsuDOS
        SV/w==
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=
        messagingengine.com; h=cc:cc:content-type:date:date:feedback-id
        :feedback-id:from:from:in-reply-to:in-reply-to:message-id
        :mime-version:references:reply-to:sender:subject:subject:to:to
        :x-me-proxy:x-me-proxy:x-me-sender:x-me-sender:x-sasl-enc; s=
        fm1; t=1670242890; x=1670329290; bh=8c0wk4OjXRa/QesbL2vsgHn8e80n
        bdEdde63Cqs79LU=; b=Ymhyjo4CLdPwJWL2RhBjtEKy6dSusKREfgc87T61vKIf
        CGj+zLKQL3C+rUPN6gxZH/40+YixrKB/OwcIPwFsjI0rVzzjBwMziYyum+ZYeYjz
        BB/HlkZlyU8usAhwwA3m9FsfripbzN/+jCHvVMxYNx4mOFRstdd8wPippq6Iugtp
        hU74td094dahVYhv5jS+rBZ3CHooGrUMVfdxIF+k8qH689U3NgXb2sDnjz1mS3+L
        d7RIYZaJ9VMDu2mt6RTiImlkGH3JH+KyarVKwklBY3FTAuYU8Hxyt1X4gw2SGCfG
        +Y0tOVnRg/qR+FdmXbGAJK/jAqn3vLXX6d8V6ltdvw==
X-ME-Sender: <xms:SeKNYwzby81n_Ik1yWuw7FbU6XHj6gT1MpOcxBQo0npxGZ9wJGX8vw>
    <xme:SeKNY0Qon2VKhKeEy2fsCSX9c2CR5rU7_39FFUaohkiLotopG-xSLIpLq-nYML1yR
    WUZkWrUez6jMhVYMN0>
X-ME-Received: <xmr:SeKNYyWVAVFt-7NaJhKpZlsbdJsINfdQjOzw8DIeyhTPx2sPRORC1FWote4m_G-iZaM3Bg>
X-ME-Proxy-Cause: gggruggvucftvghtrhhoucdtuddrgedvhedrudeggdefkecutefuodetggdotefrodftvf
    curfhrohhfihhlvgemucfhrghsthforghilhdpqfgfvfdpuffrtefokffrpgfnqfghnecu
    uegrihhlohhuthemuceftddtnecusecvtfgvtghiphhivghnthhsucdlqddutddtmdenuc
    fjughrpeffhffvvefukfhfgggtuggjsehttddttddttddvnecuhfhrohhmpedfmfhirhhi
    lhhlucetrdcuufhhuhhtvghmohhvfdcuoehkihhrihhllhesshhhuhhtvghmohhvrdhnrg
    hmvgeqnecuggftrfgrthhtvghrnhepfeeileeffeeiteeljeekheetieehhffhfeeuheel
    tdetgfeuvddvffegvdelhfdunecuffhomhgrihhnpehinhhtvghlrdgtohhmnecuvehluh
    hsthgvrhfuihiivgeptdenucfrrghrrghmpehmrghilhhfrhhomhepkhhirhhilhhlsehs
    hhhuthgvmhhovhdrnhgrmhgv
X-ME-Proxy: <xmx:SeKNY-gqq8KBVaqdhbT8aLT9CSgceXac2jwCevb7eSxY3VnBOGrWGA>
    <xmx:SeKNYyB5kaXxPKzax80FocyvquEdW7mtabPwsJWUPYt16T6FS9WJlw>
    <xmx:SeKNY_LuKRwfZ_PFkXwRtVJngfJ_VhMTDYDsEaR5e1yZKTDkX5lKjw>
    <xmx:SuKNY-0QBEEogwSFShv4Ahif-Nbx2x2FkaNqRB2FahP8xAb3yYLztA>
Feedback-ID: ie3994620:Fastmail
Received: by mail.messagingengine.com (Postfix) with ESMTPA; Mon,
 5 Dec 2022 07:21:28 -0500 (EST)
Received: by box.shutemov.name (Postfix, from userid 1000)
        id 6994610948F; Mon,  5 Dec 2022 15:21:24 +0300 (+03)
Date:   Mon, 5 Dec 2022 15:21:24 +0300
From:   "Kirill A. Shutemov" <kirill@shutemov.name>
To:     Juergen Gross <jgross@suse.com>
Cc:     linux-kernel@vger.kernel.org, x86@kernel.org,
        Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        Dave Hansen <dave.hansen@linux.intel.com>,
        "H. Peter Anvin" <hpa@zytor.com>,
        Andy Lutomirski <luto@kernel.org>,
        Peter Zijlstra <peterz@infradead.org>
Subject: Re: [PATCH v5 13/16] x86: decouple PAT and MTRR handling
Message-ID: <20221205122124.3sixqn52i4xsdxbt@box.shutemov.name>
References: <20221102074713.21493-14-jgross@suse.com>
 <20221201162639.omlr5ff55go7uhlf@box.shutemov.name>
 <6d642051-31d8-81d5-f379-568360c5cb60@suse.com>
 <20221201235753.ybfc7gkgj7hlfkru@box.shutemov.name>
 <eded3906-0720-a300-50c7-f8dad61c32c0@suse.com>
 <20221202132701.ymcp7a2yv3st33so@box.shutemov.name>
 <f4e9b9bb-6906-084c-4b9e-144b2abb024b@suse.com>
 <20221202143316.mtjz6dghecshldk2@box.shutemov.name>
 <d7000f26-2640-074e-10f2-c5232feaa9fd@suse.com>
 <cf7db285-deaf-8e3e-2b35-7cecbaff7d61@suse.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <cf7db285-deaf-8e3e-2b35-7cecbaff7d61@suse.com>
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Mon, Dec 05, 2022 at 08:40:06AM +0100, Juergen Gross wrote:
> > That's a question for the Intel architects, I guess.
> > 
> > I'd just ask them how to setup PAT in TDX guests. Either they need to
> > change the recommended setup sequence, or the PAT support bit needs to
> > be cleared IMO.
> 
> I've forwarded the question to Intel, BTW.

I've initiated the talk internally too.

> Another question to you: where does the initial PAT MSR value come from?
> I guess from UEFI?

It is set by TDX module on initialization. See section 21.2.4.1.2. "TD
VMCS Guest MSRs" of TDX module spec[1]

[1] https://cdrdv2.intel.com/v1/dl/getContent/733568

-- 
  Kiryl Shutsemau / Kirill A. Shutemov

